/*! For license information please see contenteditable-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["contenteditable-chunk"],{"../CoCreate-contenteditable/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _crdt = _interopRequireDefault(__webpack_require__(/*! @cocreate/crdt */ \"../CoCreate-crdt/src/index.js\"));\n\nvar _cursors = _interopRequireDefault(__webpack_require__(/*! @cocreate/cursors */ \"./src/index.js\"));\n\nvar _form = _interopRequireDefault(__webpack_require__(/*! @cocreate/form */ \"../CoCreate-form/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nclass CoCreateContenteditable {\n  constructor() {\n    this._elements = [];\n\n    this._init();\n\n    this.from = 0;\n    this.to = 0;\n  }\n\n  _init(container) {\n    let mainContainer = container || document;\n\n    if (!mainContainer.querySelector) {\n      return;\n    }\n\n    var elements = mainContainer.querySelectorAll(\"[contentEditable]:not([contentEditable='false'])\");\n\n    if (elements.length == 0 && mainContainer != document && mainContainer.hasAttribute('contentEditable')) {\n      elements = [mainContainer];\n    }\n\n    for (var el of elements) {\n      if (_observer.default.getInitialized(el)) {\n        continue;\n      }\n\n      _observer.default.setInitialized(el);\n\n      this._initElement(el);\n\n      this._elements.push(el);\n    }\n  }\n\n  _initElement(el) {\n    if (!el.matches(\"[contentEditable]:not([contentEditable='false'])\")) {\n      return;\n    }\n\n    this._initElementEvents(el);\n\n    if (_form.default && _form.default.checkID(el)) {\n      el.innerHTML = \"\";\n\n      this._createYDoc(el);\n    } else {\n      let self = this;\n      el.addEventListener('set-document_id', function (e) {\n        self._createYDoc(this);\n      });\n    }\n  }\n\n  _initElementEvents(el) {\n    var _this = this;\n\n    el.addEventListener('select', function (e) {\n      console.log('selection', e);\n    });\n    el.addEventListener('input', function (e) {\n      // console.log(e.inputType, e);\n      let selection_info = _this.getSelectionInfo(this);\n\n      let nowstart = selection_info.start;\n      let nowend = nowstart + 1;\n      let content_text = \"\";\n      let isUpdate = true;\n\n      switch (e.inputType) {\n        case 'deleteContentBackward':\n          nowstart--;\n          nowend--;\n          break;\n\n        case 'deleteContentForward':\n          break;\n\n        case 'insertLineBreak':\n          content_text = \"\\n\";\n          nowend++;\n          break;\n\n        case 'insertText':\n          content_text = e.data || \"\";\n          break;\n\n        case 'deleteByCut':\n          nowend = nowstart;\n          break;\n\n        default:\n          isUpdate = false;\n          break;\n      }\n\n      if (!isUpdate) return;\n      /*let character_deleted = selection_info.start - selection_info.end;\n      \t/*CoCreateCursors.recalculate_local_cursors(this,character_deleted)\n      \t*/\n      //console.log(\" recalculations \",el.textContent,\" [-] \",content_text)\n\n      if (selection_info.is_selected) {\n        _this.sendChangeData(this, \"\", selection_info.start, selection_info.end);\n\n        if (content_text.length > 0) {\n          _this.sendChangeData(this, content_text, nowstart, nowend);\n        }\n\n        _this.setSelectionInfo(this, false, this.selectionStart, this.selectionStart);\n      } else {\n        _this.sendChangeData(this, content_text, nowstart, nowend);\n      }\n    });\n    el.addEventListener('paste', function (e) {\n      let content_text = event.clipboardData.getData('Text'); // let caret = _this._getCaretPosition(this);\n\n      let selection_info = _this.getSelectionInfo(this);\n\n      if (selection_info.start !== selection_info.end) {\n        _this.sendChangeData(this, \"\", selection_info.start, selection_info.end, false);\n      }\n\n      _this.sendChangeData(this, content_text, selection_info.start, selection_info.end, false);\n\n      event.preventDefault();\n    }); ////  Caret and Selection Status Changes\n\n    el.addEventListener('keyup', function (e) {\n      let arrows = [37, 38, 39, 40];\n\n      if (arrows.indexOf(e.keyCode) != -1) {\n        _this.sendPosition(this);\n      }\n    });\n    el.addEventListener('keydown', function (e) {\n      let arrows = [37, 38, 39, 40];\n\n      if (arrows.indexOf(e.keyCode) != -1) {\n        _this.sendPosition(this);\n      }\n\n      const pos = _this._getCaretPosition(el);\n\n      _this.setSelectionInfo(el, pos.from != pos.to, pos.from, pos.to);\n    });\n    el.addEventListener('click', function (e) {\n      _this.sendPosition(this);\n    });\n    el.addEventListener('blur', function (e) {\n      _this.sendPosition(el, true);\n    });\n    el.addEventListener('cocreate-crdt-update', function (e) {\n      var info = event.detail;\n      var pos = 0;\n      var flag = true;\n      info.forEach(item => {\n        if (item.retain) {\n          flag = true;\n          pos = item.retain;\n        }\n\n        if (item.insert || item.delete) {\n          if (flag == false) pos = 0;\n          flag = false;\n\n          if (item.insert) {\n            _this.insertData(this, item.insert, pos);\n          } else if (item.delete) {\n            _this.deleteData(this, pos, pos + item.delete);\n          }\n        }\n      });\n    });\n  }\n\n  sendChangeData(element, content, start, end, isRemove = true) {\n    if (!this._checkConetentEditable(element)) return;\n\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(element);\n\n    if (!document_id) {\n      _form.default.request({\n        element: element,\n        nameAttr: \"name\"\n      });\n\n      element.setAttribute('data-document_id', 'pending');\n      return;\n    }\n\n    if (document_id === 'pending') {\n      return;\n    }\n\n    if (!_crudClient.default.isSaveAttr(element)) {\n      return;\n    }\n\n    if (content.length > 0) {\n      if (isRemove) {\n        this.deleteData(element, start, start + content.length);\n      }\n\n      _crdt.default.insertText({\n        collection,\n        document_id,\n        name,\n        value: content,\n        position: start,\n        attributes: null\n      });\n    } else {\n      if (isRemove) {\n        this.insertData(element, \" \".repeat(end - start), start);\n      }\n\n      _crdt.default.deleteText({\n        collection,\n        document_id,\n        name,\n        position: start,\n        length: end - start\n      });\n    }\n\n    let character_count = content.length > 0 ? content.length : -1;\n\n    _cursors.default.recalculate_local_cursors(element, character_count);\n  }\n\n  setSelectionInfo(e, isSelect, start, end) {\n    e.setAttribute(\"is_selected\", isSelect);\n    e.setAttribute(\"selection_start\", start);\n    e.setAttribute(\"selection_end\", end);\n    this.sendPosition(e);\n  }\n\n  getSelectionInfo(e) {\n    return {\n      is_selected: e.getAttribute(\"is_selected\") === 'true' ? true : false,\n      start: parseInt(e.getAttribute(\"selection_start\")),\n      end: parseInt(e.getAttribute(\"selection_end\"))\n    };\n  }\n\n  sendPosition(el, isClear) {\n    if (!this._checkConetentEditable(el)) return;\n\n    var curRange = this._getCaretPosition(el);\n\n    var _json = this._getElementInfo(el);\n\n    if (curRange && !isClear) {\n      _json['startPosition'] = curRange.from;\n      _json['endPositon'] = curRange.to; //commented by jean mendoza\n      //CoCreate.crdt.sendPosition(_json);\n\n      const id = this._generateElementID(el);\n\n      _crdt.default.setPositionYJS(id, _json['startPosition'], _json['endPositon']);\n    } else {\n      var _id = this._generateElementID(el);\n\n      _crdt.default.setCursorNull(_id);\n    }\n  } //////\n\n\n  _getElementInfo(el) {\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(el);\n\n    return {\n      collection: collection || '_',\n      document_id: document_id || '_',\n      name: name || '_'\n    };\n  }\n\n  _createYDoc(el) {\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(el);\n\n    const status = _crdt.default.init({\n      collection,\n      document_id,\n      name,\n      element: el\n    }); // this.setInitValue(el);\n    // this.elements.push(el)\n\n  }\n\n  _generateElementID(el) {\n    var _eInfo = this._getElementInfo(el);\n\n    return _crdt.default.generateID(config.organization_Id, _eInfo.collection, _eInfo.document_id, _eInfo.name);\n  }\n\n  _checkConetentEditable(el) {\n    if (!el.isContentEditable) return false;\n\n    for (var _el of this._elements) {\n      if (el.isSameNode(_el)) return true;\n    }\n\n    this._initElement(el);\n\n    this._elements.push(el);\n\n    return true;\n  }\n\n  _getCaretPosition(el) {\n    if (document.activeElement !== el) return null;\n    var selection = document.getSelection();\n    if (!selection.rangeCount) return null;\n\n    var _range = selection.getRangeAt(0);\n\n    var selected = _range.toString().length;\n\n    var range = _range.cloneRange();\n\n    range.selectNodeContents(el);\n    range.setEnd(_range.endContainer, _range.endOffset);\n    var to = range.toString().length;\n    var from = selected ? to - selected : to;\n    return {\n      from: from,\n      to: to\n    };\n  }\n\n  _setCaretPosition(el, from, to) {\n    if (document.activeElement !== el) return;\n    var selection = document.getSelection();\n\n    var range = this._cloneRangeByPosition(el, from, to);\n\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n\n  _cloneRangeByPosition(el, from, to, range) {\n    if (!range) {\n      range = document.createRange();\n      range.selectNode(el);\n      range.setStart(el, 0);\n      this.from = from;\n      this.to = to;\n    }\n\n    if (el && (this.from > 0 || this.to > 0)) {\n      if (el.nodeType === Node.TEXT_NODE) {\n        if (el.textContent.length < this.from) this.from -= el.textContent.length;else if (this.from > 0) {\n          range.setStart(el, this.from);\n          this.from = 0;\n        }\n        if (el.textContent.length < this.to) this.to -= el.textContent.length;else if (this.to > 0) {\n          range.setEnd(el, this.to);\n          this.to = 0;\n        }\n      } else {\n        for (var lp = 0; lp < el.childNodes.length; lp++) {\n          range = this._cloneRangeByPosition(el.childNodes[lp], this.from, this.to, range);\n          if (this.from === 0 && this.to === 0) break;\n        }\n      }\n    }\n\n    return range;\n  }\n\n  _getPositionFromRange(el, range) {\n    var _range = document.createRange();\n\n    _range.selectNodeContents(el);\n\n    var from = 0,\n        to = 0;\n\n    _range.setEnd(range.endContainer, range.endOffset);\n\n    to = _range.toString().length;\n\n    _range.setEnd(range.startContainer, range.startOffset);\n\n    from = _range.toString().length;\n    return {\n      from: from,\n      to: to\n    };\n  }\n\n  insertData(el, content, position) {\n    if (!content || content === '') return;\n    var selection = window.getSelection();\n\n    var curCaret = this._getCaretPosition(el);\n\n    var range = this._cloneRangeByPosition(el, position, position);\n\n    var tmp = document.createElement(\"div\");\n    var frag = document.createDocumentFragment(),\n        node;\n    tmp.innerHTML = content;\n\n    while (node = tmp.firstChild) {\n      frag.appendChild(node);\n    }\n\n    range.insertNode(frag);\n\n    if (!curCaret) {\n      selection.addRange(range);\n      selection.removeRange(range);\n      return;\n    }\n\n    var pos = this.selectionProcessing(content, curCaret.from, curCaret.to, position, position);\n\n    this._setCaretPosition(el, pos.start, pos.end);\n\n    this.sendPosition(el);\n  }\n\n  deleteData(el, start, end) {\n    var content_length = end - start;\n    if (!content_length) return;\n\n    var curCaret = this._getCaretPosition(el);\n\n    var selection = window.getSelection();\n\n    var range = this._cloneRangeByPosition(el, start, end);\n\n    if (range) range.deleteContents();\n\n    if (!curCaret) {\n      selection.removeRange(range);\n      return;\n    } // if (!curCaret) return;\n\n\n    var pos = this.selectionProcessing(\"\", curCaret.from, curCaret.to, start, end);\n\n    this._setCaretPosition(el, pos.start, pos.end);\n\n    this.sendPosition(el);\n  }\n\n  selectionProcessing(content, prev_start, prev_end, start, end) {\n    if (prev_start >= start) {\n      if (content == \"\") {\n        prev_start -= end - start;\n        prev_end -= end - start;\n        prev_start = prev_start < start ? start : prev_start;\n      } else {\n        prev_start += content.length;\n        prev_end += content.length;\n      }\n    }\n\n    {\n      if (content == \"\" && prev_end >= start) {\n        prev_end = prev_end >= end ? prev_end - (end - start) : start;\n      }\n    }\n    return {\n      start: prev_start,\n      end: prev_end\n    };\n  }\n\n}\n\nvar g_CoCreateContentEditable = new CoCreateContenteditable(); // CoCreateInit.register('CoCreateText', g_CoCreateContentEditable, g_CoCreateContentEditable._init);\n\n_observer.default.init({\n  name: 'CoCreateContentEditableInit',\n  observe: ['subtree', 'childList'],\n  include: '[contenteditable][data-collection][data-document_id][name]',\n  callback: function (mutation) {\n    g_CoCreateContentEditable._init(mutation.target);\n  }\n});\n\nvar _default = g_CoCreateContentEditable;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-contenteditable/src/index.js\n")}}]);