/*! For license information please see fetch-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["fetch-chunk"],{"../CoCreate-fetch/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _filter = _interopRequireDefault(__webpack_require__(/*! @cocreate/filter */ \"../CoCreate-filter/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nvar _logic = _interopRequireDefault(__webpack_require__(/*! @cocreate/logic */ \"../CoCreate-logic/src/index.js\"));\n\nvar _render = _interopRequireDefault(__webpack_require__(/*! @cocreate/render */ \"../CoCreate-render/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// console.log(socket)\nconst CoCreateFetch = {\n  selector: '[data-template_id][data-fetch_collection]',\n  items: [],\n  init: function () {\n    this.initElement();\n\n    this.__initSocketEvent();\n\n    this.__initEvents();\n  },\n  initElement: function (container) {\n    let mainContainer = container || document;\n    const self = this;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let wrappers = mainContainer.querySelectorAll(this.selector);\n\n    if (wrappers.length == 0 && mainContainer != document && mainContainer.hasAttribute('data-template_id') && mainContainer.hasAttribute('data-fetch_collection')) {\n      wrappers = [mainContainer];\n    }\n\n    wrappers.forEach(wrapper => {\n      self.__initEachElement(wrapper, true, true);\n    });\n  },\n  refershElement: function (mutation) {\n    const {\n      target\n    } = mutation;\n    if (!target) return;\n    if (!target.hasAttribute('data-fetch_collection')) return;\n\n    this.__initEachElement(target, false, false, true);\n  },\n  //. public functions....\n  reload: function (element) {\n    return;\n\n    if (!element || !element.getAttribute) {\n      return;\n    }\n\n    if (element.hasAttribute('date-template_id') && element.hasAttribute('date-fetch_collection')) {\n      this.__initEachElement(element, true);\n    }\n  },\n  __initSocketEvent: function () {\n    const self = this;\n\n    _crudClient.default.listen('readDocumentList', function (data) {\n      self.__fetchedItem(data);\n    });\n\n    _crudClient.default.listen('readCollectionList', function (data) {\n      self.__fetchedItem(data);\n    });\n\n    _crudClient.default.listen('createDocument', function (data) {\n      self.__createItem(data);\n    });\n\n    _crudClient.default.listen('deleteDocument', function (data) {\n      self.__deleteItem(data);\n    });\n  },\n  __initEvents: function () {\n    const self = this;\n    window.addEventListener('dndsuccess', function (e) {\n      const {\n        dropedEl,\n        dragedEl\n      } = e.detail;\n      let dragedElTemplatId = dragedEl.getAttribute('data-template_id');\n      let dragElTemplate = document.querySelector(`[data-fetch_collection][data-template_id='${dragedElTemplatId}']`);\n      let dropElTemplate = self.findTemplateElByChild(dropedEl);\n\n      if (!dragElTemplate || !dropElTemplate) {\n        return;\n      }\n\n      if (!dragElTemplate.isSameNode(dropElTemplate)) {\n        //. save template id\n        self.updateParentTemplateOfChild(dropElTemplate, dragedEl); //. reordering\n\n        self.reorderChildrenOfTemplate(dragElTemplate);\n        self.reorderChildrenOfTemplate(dropElTemplate);\n      } else {\n        self.reorderChildrenOfTemplate(dropElTemplate);\n      }\n    });\n  },\n  __initEachElement: function (element, isInit, checkInit, refresh) {\n    let item_id = element.getAttribute('data-template_id');\n    if (!item_id) return;\n    if (!element.getAttribute('data-fetch_collection')) return;\n\n    if (_observer.default.getInitialized(element, 'fetch') && isInit) {\n      return;\n    }\n\n    let item = _filter.default.getObjectByFilterId(this.items, item_id);\n\n    let filter = null;\n    const self = this;\n\n    if (isInit && item) {\n      return;\n    } // if (checkInit) {  \n\n\n    _observer.default.setInitialized(element, 'fetch'); // }\n\n\n    if (!item) {\n      filter = _filter.default.setFilter(element, \"data-template_id\", \"template\");\n      let fetch_type = element.getAttribute('data-fetch_value_type') || \"string\";\n      if (!filter) return;\n\n      if (fetch_type === 'collection') {\n        filter.is_collection = true;\n      }\n\n      item = {\n        el: element,\n        filter: filter,\n        templateId: item_id,\n        fetch_type: fetch_type\n      };\n      this.items.push(item);\n      element.addEventListener(\"changeFilterInput\", function (e) {\n        self.__removeOldData(item.el);\n\n        item.filter.startIndex = 0;\n        item.filter.isRefresh = true;\n\n        _filter.default.fetchData(item.filter);\n      });\n    } else {\n      filter = item.filter;\n\n      _filter.default.changeCollection(filter);\n\n      if (refresh) {\n        item.filter.isRefresh = true;\n\n        self.__removeOldData(element);\n\n        filter.isRefresh = true;\n        filter.startIndex = 0;\n      }\n    }\n\n    _filter.default.fetchData(filter);\n  },\n  __runLoadMore: function (templateId) {\n    if (!templateId) return;\n\n    let item = _filter.default.getObjectByFilterId(this.items, templateId);\n\n    if (!item) return;\n\n    if (item.filter.count > 0) {\n      _filter.default.fetchData(item.filter);\n    }\n  },\n  __removeOldData: function (wrapper) {\n    let item_id = wrapper.getAttribute('data-template_id');\n    let elements = wrapper.querySelectorAll(\"[templateId='\" + item_id + \"']\");\n    elements.forEach(el => el.remove());\n  },\n  __cloneElement: function (clone_node, templateId, type) {\n    let itemTemplateDiv = document.createElement(clone_node.parentNode.tagName || 'div'); // let itemTemplateDiv = document.createElement('tbody');\n\n    let template = clone_node.cloneNode(true);\n    template.setAttribute('templateId', templateId);\n    if (!type) type = \"data\";\n\n    if (!template.getAttribute('data-render_array')) {\n      template.setAttribute('data-render_array', type);\n    }\n\n    itemTemplateDiv.appendChild(template.cloneNode(true));\n    return itemTemplateDiv;\n  },\n  __renderData: function (wrapper, data, type = \"data\") {\n    let templateId = wrapper.getAttribute('data-template_id');\n    let template = wrapper.querySelector(`.template[data-template_id='${templateId}'`); // || wrapper.querySelector('.template');\n    // let template = wrapper.querySelector('.template');\n\n    if (!template) {\n      return;\n    }\n\n    let renderId = wrapper.getAttribute('data-render_id');\n    let passTo = wrapper.getAttribute('data-pass_to');\n    let renderData = renderId ? {\n      [renderId]: data\n    } : data;\n    type = type || \"data\";\n    type = renderId ? `${renderId}.${type}` : type;\n\n    let cloneWrapper = this.__cloneElement(template, templateId, type); // render.setValue(cloneWrapper.children, renderData, passTo, cloneWrapper);\n\n\n    _render.default.data({\n      elements: cloneWrapper.children,\n      data: renderData,\n      passTo: passTo\n    });\n\n    let removeableTemplate = cloneWrapper.querySelector(`.template[data-template_id=\"${templateId}\"]`);\n\n    if (removeableTemplate) {\n      removeableTemplate.remove();\n    } else {\n      return;\n    }\n\n    template.insertAdjacentHTML('beforebegin', cloneWrapper.innerHTML);\n    var evt = new CustomEvent('fetchedTemplate', {\n      bubbles: true\n    });\n    wrapper.dispatchEvent(evt); /// init passValueBtns\n\n    let forms = wrapper.parentNode.getElementsByTagName('form');\n\n    for (let i = 0; i < forms.length; i++) {\n      let form = forms[i];\n      let valuePassBtn = form.querySelector('.passValueBtn');\n      if (valuePassBtn) _logic.default.__registerValuePassBtnEvent(form, valuePassBtn);\n    } // this.initElement(wrapper)\n\n  },\n  __deleteItem: function (data) {\n    let collection = data['collection'];\n    let document_id = data['document_id'];\n\n    for (let i = 0; i < this.items.length; i++) {\n      let item = this.items[i];\n\n      if (item.filter.collection == collection) {\n        var tmpId = item.el.getAttribute('data-template_id');\n        var els = item.el.querySelectorAll(\"[templateId='\" + tmpId + \"'][data-document_id='\" + document_id + \"']\");\n\n        for (let j = 0; j < els.length; j++) {\n          els[j].remove();\n          item.startIndex--;\n        }\n      }\n    }\n  },\n  __fetchedItem: function (data) {\n    let item_id = data['element'];\n\n    let item = _filter.default.getObjectByFilterId(this.items, item_id);\n\n    if (item) {\n      item.filter.startIndex += data['data'].length;\n      let fetch_name = item.el.getAttribute('data-fetch_name');\n\n      if (fetch_name) {\n        data = data.data[0];\n      }\n\n      if (data) {\n        if (data.metadata && data.metadata.isRefresh) {\n          this.__removeOldData(item.el);\n        }\n\n        this.__renderData(item.el, data, fetch_name);\n      }\n    }\n  },\n  __createItem: function (data) {\n    let collection = data['collection'];\n    const self = this;\n    let itemData = data.data;\n    let render_data = data;\n    render_data.data = [itemData];\n    this.items.forEach(item => {\n      const {\n        filter\n      } = item;\n      let ids = [];\n      item.fetch_ids = [];\n\n      if (filter.collection === collection && !item.el.getAttribute('data-fetch_name') && self.__checkItemByFilters(itemData, filter.filters)) {\n        // ids.push(data['document_id']);\n        self.__renderData(item.el, render_data);\n      }\n    });\n  },\n  findTemplateElByChild: function (element) {\n    return _utils.default.getParentFromElement(element, null, ['data-template_id', 'data-fetch_collection']);\n  },\n  updateParentTemplateOfChild: function (template, element) {\n    const name = template.getAttribute('data-filter_name');\n    const value = template.getAttribute('data-filter_value');\n    const operator = template.getAttribute('data-filter_operator');\n    if (!name || operator != \"$eq\") return;\n\n    _crudClient.default.updateDocument({\n      collection: template.getAttribute('data-fetch_collection'),\n      document_id: element.getAttribute('data-document_id'),\n      data: {\n        [name]: value\n      },\n      broadcast: false\n    });\n  },\n  reorderChildrenOfTemplate: function (template) {\n    const orderField = template.getAttribute('data-order_by');\n    const template_id = template.getAttribute('data-template_id');\n\n    if (!orderField || !template_id) {\n      return;\n    }\n\n    const children = template.querySelectorAll(`[data-template_id=\"${template_id}\"][data-document_id]:not(.template)`);\n    const coff = template.getAttribute('data-order_type') !== 'asc' ? -1 : 1;\n    children.forEach((item, index) => {\n      if (item.classList.contains('template')) {\n        return;\n      }\n\n      _crudClient.default.updateDocument({\n        collection: template.getAttribute('data-fetch_collection'),\n        document_id: item.getAttribute('data-document_id'),\n        data: {\n          [orderField]: index * coff\n        },\n        broadcast: false\n      });\n    });\n  },\n  __checkItemByFilters: function (item, filters) {\n    //. $contain, $range, $eq, $ne, $lt, $lte, $gt, $gte, $in, $nin, $geoWithin\n    let flag = true;\n\n    if (!item || !filters) {\n      return false;\n    }\n\n    if (Array.isArray(item)) return false;\n    filters.forEach(({\n      name,\n      operator,\n      type,\n      value\n    }) => {\n      const fieldValue = item[name];\n      if (!flag) return;\n\n      switch (operator) {\n        case '$contain':\n          if (!Array.isArray(fieldValue) || !fieldValue.some(x => value.includes(x))) flag = false;\n          break;\n\n        case '$range':\n          if (value[0] !== null && value[1] !== null) {\n            if (value[0] > fieldValue || value[1] <= fieldValue) flag = false;\n          } else if (item.value[0] == null && value[1] >= fieldValue) {\n            flag = false;\n          } else if (item.value[1] == null && value[0] <= fieldValue) {\n            flag = false;\n          }\n\n          break;\n\n        case '$eq':\n          if (fieldValue != value[0]) flag = false;\n          break;\n\n        case '$ne':\n          if (fieldValue == null || fieldValue == value[0]) flag = false;\n          break;\n\n        case '$lt':\n          if (fieldValue >= value[0]) flag = false;\n          break;\n\n        case '$lte':\n          if (fieldValue > value[0]) flag = false;\n          break;\n\n        case '$gt':\n          if (fieldValue <= value[0]) flag = false;\n          break;\n\n        case '$gte':\n          if (fieldValue < value[0]) flag = false;\n          break;\n\n        case '$in':\n          if (!Array.isArray(fieldValue) || !fieldValue.some(x => value.includes(x))) flag = false;\n          break;\n\n        case '$nin':\n          if (Array.isArray(fieldValue) && fieldValue.some(x => value.includes(x))) flag = false;\n          break;\n      }\n    });\n    return flag;\n  }\n};\n\n_observer.default.init({\n  name: 'CoCreateFetchObserver',\n  observe: ['attributes'],\n  attributes: ['data-fetch_collection', 'data-filter_name'],\n  callback: function (mutation) {\n    CoCreateFetch.refershElement(mutation);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateFetchInit',\n  observe: ['subtree', 'childList'],\n  include: \"[data-fetch_collection]\",\n  callback: function (mutation) {\n    CoCreateFetch.initElement(mutation.target);\n  }\n});\n\nCoCreateFetch.init();\nvar _default = CoCreateFetch;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-fetch/src/index.js\n")}}]);