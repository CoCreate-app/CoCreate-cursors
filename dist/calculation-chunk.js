/*! For license information please see calculation-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["calculation-chunk"],{"../CoCreate-calculation/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _crdt = _interopRequireDefault(__webpack_require__(/*! @cocreate/crdt */ \"../CoCreate-crdt/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nvar _input = _interopRequireDefault(__webpack_require__(/*! @cocreate/input */ \"../CoCreate-input/src/index.js\"));\n\nvar _floatingLabel = _interopRequireDefault(__webpack_require__(/*! @cocreate/floating-label */ \"../CoCreate-floating-label/src/index.js\"));\n\nvar _htmltags = _interopRequireDefault(__webpack_require__(/*! @cocreate/htmltags */ \"../CoCreate-htmltags/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar CoCreateCalculation = {\n  init: function () {\n    this.initCalculationElements();\n  },\n  initCalculationElements: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let calculationElements = mainContainer.querySelectorAll('[data-calculation]') || [];\n    calculationElements = Array.from(calculationElements);\n\n    if (mainContainer != document && mainContainer.hasAttribute('data-calculation')) {\n      calculationElements.push(mainContainer);\n    }\n\n    for (let i = 0; i < calculationElements.length; i++) {\n      if (_observer.default.getInitialized(calculationElements[i], \"calculation_init\")) {\n        return;\n      }\n\n      _observer.default.setInitialized(calculationElements[i], \"calculation_init\");\n\n      this.initCalculationElement(calculationElements[i]);\n    }\n  },\n  initCalculationElement: function (ele) {\n    const self = this;\n    let data_calculation = ele.getAttribute('data-calculation');\n    let ids = this.getIds(data_calculation);\n    let selectors = [];\n\n    for (let i = 0; i < ids.length; i++) {\n      let id = ids[i];\n      let input = null;\n\n      try {\n        input = document.querySelector(id);\n      } catch (error) {\n        input = null;\n      }\n\n      if (input) {\n        input.addEventListener('input', function () {\n          self.setCalcationResult(ele);\n        });\n        input.addEventListener('CoCreateInput-setvalue', function () {// self.setCalcationResult(ele)\n        });\n\n        if (input.hasAttribute('data-calculation')) {\n          input.addEventListener('changedCalcValue', function (e) {\n            self.setCalcationResult(ele);\n          });\n        }\n      } else {\n        //. add event of special operator\n        let selector = this.__getOperatorSelector(id);\n\n        if (selector) {\n          selectors.push(selector);\n        }\n      }\n    }\n\n    if (selectors.length > 0) {\n      document.addEventListener('changedCalcValue', function (e) {\n        let isMatched = false;\n        selectors.forEach(selector => {\n          if (e.target.matches(selector)) {\n            isMatched = true;\n            return;\n          }\n        });\n\n        if (isMatched) {\n          self.setCalcationResult(ele);\n        }\n      });\n    }\n  },\n\n  __getOperatorSelector(value) {\n    let result = /SUM\\(\\s*([\\w\\W]+)\\s*\\)/g.exec(value);\n\n    if (result && result[1]) {\n      return result[1].trim();\n    }\n\n    return null;\n  },\n\n  calculationSpecialOperator(value) {\n    let self = this;\n    let sum = null;\n    let result = /SUM\\(\\s*([\\w\\W]+)\\s*\\)/g.exec(value);\n\n    if (result) {\n      let selector = result[1].trim();\n\n      if (value.trim().indexOf('SUM') == 0) {\n        let elements = document.querySelectorAll(selector);\n        sum = 0;\n        elements.forEach(el => {\n          let tmpValue = self.__getElementValue(el);\n\n          tmpValue = Number(tmpValue);\n\n          if (!Number.isNaN(tmpValue)) {\n            sum += tmpValue;\n          }\n        });\n      }\n    }\n\n    return sum;\n  },\n\n  setCalcationResult: function (ele) {\n    let data_calculation = ele.getAttribute('data-calculation');\n    let calString = this.replaceIdWithValue(data_calculation);\n\n    if (calString) {\n      let result = calculation(calString);\n\n      if (ele.tagName == 'INPUT' || ele.tagName == 'TEXTAREA' || ele.tagName == 'SELECT') {\n        ele.value = result;\n\n        if (_crudClient.default.isCRDT(ele)) {\n          ele.value = \"\";\n\n          _crdt.default.replaceText({\n            collection: ele.getAttribute('data-collection'),\n            document_id: ele.getAttribute('data-document_id'),\n            name: ele.getAttribute('name'),\n            value: result.toString()\n          });\n        } else {\n          _input.default.save(ele);\n        }\n\n        if (_floatingLabel.default) {\n          _floatingLabel.default.update(ele, ele.value);\n        }\n      } else {\n        ele.innerHTML = result;\n\n        _htmltags.default.saveContent(ele);\n      } //. set custom event\n\n\n      var event = new CustomEvent('changedCalcValue', {\n        bubbles: true\n      });\n      ele.dispatchEvent(event);\n    }\n  },\n  __getElementValue: function (element) {\n    if (element.tagName == 'INPUT' || element.tagName == 'TEXTAREA' || element.tagName == 'SELECT') {\n      return element.value;\n    } else {\n      return element.innerHTML;\n    }\n  },\n  replaceIdWithValue: function (data_calculation) {\n    let ids = this.getIds(data_calculation);\n\n    for (let i = 0; i < ids.length; i++) {\n      let id = ids[i];\n      let input = null;\n\n      try {\n        input = document.querySelector(id);\n      } catch (error) {\n        input = null;\n      }\n\n      let value = null;\n\n      if (input) {\n        value = Number(this.__getElementValue(input));\n      } else {\n        value = this.calculationSpecialOperator(id);\n      }\n\n      if (value != null && !Number.isNaN(value)) {\n        data_calculation = data_calculation.replaceAll('{' + id + '}', value);\n      }\n    }\n\n    return data_calculation;\n  },\n  getIds: function (string) {\n    let tmp = string;\n    let ids = [];\n    if (!tmp) return ids;\n\n    while (tmp.length > 0) {\n      let firstIndex = tmp.indexOf('{');\n      let secondIndex = tmp.indexOf('}', firstIndex);\n\n      if (firstIndex > -1 && secondIndex > -1) {\n        let id = tmp.substring(firstIndex + 1, secondIndex);\n        if (ids.indexOf(id) == -1) ids.push(id);\n        tmp = tmp.substring(secondIndex + 1);\n      } else {\n        return ids;\n      }\n    }\n\n    return ids;\n  }\n};\n\nfunction calculation(string) {\n  let index1, index2, index3, index4;\n  index1 = string.indexOf('+');\n  index2 = string.indexOf('-');\n  index3 = string.indexOf('*');\n  index4 = string.indexOf('/');\n\n  if (index1 > -1) {\n    let lStr = string.substr(0, index1);\n    let rStr = string.substr(index1 + 1);\n    return calculation(lStr) + calculation(rStr);\n  } else if (index2 > -1) {\n    let lStr = string.substr(0, index2);\n    let rStr = string.substr(index2 + 1);\n    return calculation(lStr) - calculation(rStr);\n  } else if (index3 > -1) {\n    let lStr = string.substr(0, index3);\n    let rStr = string.substr(index3 + 1);\n    return calculation(lStr) * calculation(rStr);\n  } else if (index4 > -1) {\n    let lStr = string.substr(0, index4);\n    let rStr = string.substr(index4 + 1);\n    let lValue = calculation(lStr);\n    let rValue = calculation(rStr);\n\n    if (rValue == 0) {\n      return 0;\n    } else {\n      return lValue / rValue;\n    }\n  } else {\n    let result = Number(string);\n\n    if (isNaN(result)) {\n      return 0;\n    } else {\n      return result;\n    }\n  }\n}\n\nCoCreateCalculation.init();\n\n_observer.default.init({\n  name: 'CoCreateCalculationChangeValue',\n  observe: ['attributes'],\n  attributes: ['value'],\n  include: 'input',\n  callback: function (mutation) {\n    console.log('-----------------------------------------------------');\n    console.log(mutation.target);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateCalculationInit',\n  observe: ['subtree', 'childList'],\n  include: '[data-calculation]',\n  callback: function (mutation) {\n    CoCreateCalculation.initCalculationElements(mutation.target);\n  }\n});\n\nvar _default = CoCreateCalculation;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-calculation/src/index.js\n")}}]);