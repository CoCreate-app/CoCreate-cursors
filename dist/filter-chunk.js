/*! For license information please see filter-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["filter-chunk"],{"../CoCreate-filter/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateFilter = {\n  items: [],\n  ioInstance: null,\n  moduleAttribues: [],\n  module_items: [],\n\n  /** start init processing **/\n  __init: function () {\n    this.__initIntesection();\n\n    this.__initSocket();\n\n    this.__initEvents();\n  },\n  __initIntesection: function () {\n    const self = this;\n    this.ioInstance = new IntersectionObserver((entries, observer) => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          const attributeInfo = self.__getMainAttribue(entry.target);\n\n          if (attributeInfo.id) {\n            document.dispatchEvent(new CustomEvent('CoCreateFilter-loadMore', {\n              detail: {\n                attrName: attributeInfo.name,\n                attrId: attributeInfo.id\n              }\n            }));\n          }\n\n          self.ioInstance.unobserve(entry.target);\n        }\n      });\n    }, {\n      threshold: 1\n    });\n  },\n  __runLoadMore: function (attrName, id) {\n    if (!id || !attrName) return;\n    let item = this.items.find(item => item.attrName === attrName && item.id === id);\n    if (!item) return;\n\n    if (item.count > 0) {\n      this.fetchData(item);\n    }\n  },\n  __getMainAttribue: function (el) {\n    const attribute = this.moduleAttribues.find(attr => (el.getAttribute(attr) || \"\") !== \"\");\n\n    if (attribute) {\n      return {\n        name: attribute,\n        id: el.getAttribute(attribute)\n      };\n    } else {\n      return {};\n    }\n  },\n  __initSocket: function () {\n    const self = this;\n\n    _crudClient.default.listen('readDocumentList', function (data) {\n      let item_id = data['element'];\n      let item = self.items.find(item => item.id === item_id);\n\n      if (item) {\n        // eObj.startIndex += data.result.length;\n        const result_data = data['data']; //. set the intersection observe element\n\n        let element = document.querySelector(`[${item.attrName}=\"${item.id}\"][data-fetch_type=\"scroll\"]`);\n\n        if (result_data.length > 0 && element) {\n          self.ioInstance.observe(element);\n        } // /** render total count **/\n\n\n        const totalCount = data['operator'].total;\n        const totalElements = document.querySelectorAll(`[${item.attrName}=\"${item.id}\"][data-fetch_type=\"total\"]`);\n\n        if (totalElements) {\n          totalElements.forEach(el => el.innerHTML = totalCount);\n        }\n      }\n    });\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('CoCreateFilter-loadMore', function (event) {\n      const attrId = event.detail.attrId;\n      const attrName = event.detail.attrName;\n\n      self.__runLoadMore(attrName, attrId);\n    });\n    let buttons = document.querySelectorAll('[data-fetch_type=\"loadmore\"]');\n    buttons.forEach(btn => {\n      btn.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        const attributeInfo = self.__getMainAttribue(btn);\n\n        if (!attributeInfo.id) return;\n\n        self.__runLoadMore(attributeInfo.attrName, attributeInfo.attrId);\n      });\n    });\n  },\n\n  /** ---  End --- **/\n  setFilter: function (el, mainAttr, type) {\n    if (!mainAttr) {\n      return;\n    }\n\n    let id = el.getAttribute(mainAttr);\n    if (!id) return;\n    if (!this.moduleAttribues.includes(mainAttr)) this.moduleAttribues.push(mainAttr);\n    let collection = el.getAttribute('data-fetch_collection');\n    let fetch_type = el.getAttribute('data-fetch_value_type');\n    let fetch_collection = fetch_type == \"collection\" ? true : false;\n    let order_name = el.getAttribute('data-order_by');\n    let order_type = el.getAttribute('data-order_type') || 'asc';\n    let fetch_count = parseInt(el.getAttribute('data-fetch_count'));\n    let item = {\n      el: el,\n      id: id,\n      eId: id,\n      // + this.items.length,\n      type: type,\n      attrName: mainAttr,\n      collection: collection,\n      startIndex: 0,\n      options: {},\n\n      /** return options **/\n      fetch: {},\n      is_collection: fetch_collection,\n      search: {\n        type: 'or',\n        value: []\n      },\n      orders: [],\n      filters: []\n    };\n\n    if (!isNaN(fetch_count) && fetch_count > 0) {\n      item.count = fetch_count;\n    }\n\n    if (order_name) {\n      item.orders.push({\n        name: order_name,\n        type: order_type == 'asc' ? 1 : -1\n      });\n    }\n\n    this._initFilter(item, id, mainAttr);\n\n    this._initOrder(item, id, mainAttr);\n\n    this.items.push(item);\n\n    this._initInputForm(item, mainAttr);\n\n    this._initExportImport(item, id, mainAttr);\n\n    return item;\n  },\n  _initFilter: function (item, id, attrName) {\n    let filter_objs = item.el.getRootNode().querySelectorAll('[' + attrName + '=\"' + id + '\"]');\n\n    for (var i = 0; i < filter_objs.length; i++) {\n      let f_el = filter_objs[i];\n      let filter_name = f_el.getAttribute('data-filter_name');\n      let filter_operator = f_el.getAttribute('data-filter_operator') ? f_el.getAttribute('data-filter_operator') : '$contain';\n      let value_type = f_el.getAttribute('data-filter_value_type') ? f_el.getAttribute('data-filter_value_type') : 'string';\n      let filter_type = f_el.getAttribute('data-filter_type');\n      let filter_value = f_el.getAttribute('data-filter_value');\n\n      if (filter_value == null) {\n        continue;\n      }\n\n      if (value_type !== \"raw\") {\n        filter_value = filter_value.replace(/\\s/g, '').split(',');\n      }\n\n      if (!filter_name) {\n        item.search.value = this._makeSearchOption(id, attrName);\n      } else {\n        let idx = this.getFilterByName(item, filter_name, filter_operator);\n\n        if (value_type != 'string') {\n          for (let i = 0; i < filter_value.length; i++) {\n            filter_value[i] = Number(filter_value[i]);\n          }\n        }\n\n        this.insertArrayObject(item.filters, idx, {\n          name: filter_name,\n          value: filter_value,\n          operator: filter_operator,\n          type: filter_type\n        });\n      }\n    }\n  },\n  _initOrder: function (item, id, attrName) {\n    let filter_objs = item.el.getRootNode().querySelectorAll('[' + attrName + '=\"' + id + '\"]');\n\n    const _this = this;\n\n    for (var i = 0; i < filter_objs.length; i++) {\n      let f_el = filter_objs[i];\n      let order_name = f_el.getAttribute('data-order_by');\n      let order_value = f_el.getAttribute('value');\n\n      if (!order_name || !order_value) {\n        continue;\n      }\n\n      if (['A', 'BUTTON'].includes(f_el.tagName)) {\n        f_el.addEventListener('click', function () {\n          let name = this.getAttribute('data-order_by');\n          let value = this.getAttribute('value');\n\n          _this._applyOrder(item, name, value);\n\n          if (item.el) {\n            item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n              detail: {\n                type: 'order'\n              }\n            }));\n          }\n        }); //. apply click event\n      } else {\n        this._applyOrder(item, order_name, order_value);\n      }\n    }\n\n    this._initToggleOrderEvent(item, id, attrName);\n  },\n  _initToggleOrderEvent: function (item, id, attrName) {\n    let elements = document.querySelectorAll(`[${attrName}=\"${id}\"][data-toggle_order]`);\n    const self = this;\n    elements.forEach(element => {\n      element.addEventListener('click', function () {\n        let value = this.getAttribute('data-toggle_order') || '';\n        let order_name = this.getAttribute('data-order_by');\n        value = value === 'asc' ? 'desc' : 'asc';\n\n        for (let i = 0; i < elements.length; i++) {\n          if (elements[i] !== element) {\n            elements[i].setAttribute('data-toggle_order', '');\n          }\n        }\n\n        item.orders = [];\n\n        self._applyOrder(item, order_name, value);\n\n        element.setAttribute('data-toggle_order', value);\n\n        if (item.el) {\n          item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n            detail: {\n              type: 'order'\n            }\n          }));\n        }\n      });\n    });\n  },\n  _initExportImport: function (item, id, attrName) {\n    let export_button = document.querySelector(`[data-export_type][${attrName}=\"${id}\"]`);\n    let import_button = document.querySelector(`[data-import=\"true\"][${attrName}=\"${id}\"]`);\n    const self = this;\n\n    if (export_button) {\n      //. export_buttons action\n      export_button.addEventListener('click', function () {\n        if (!item) return;\n        let new_filter = self.makeFetchOptions(item);\n        new_filter.export = {\n          collection: new_filter.collection,\n          type: export_button.getAttribute('data-export_type') || 'json'\n        };\n\n        _crudClient.default.readDocumentList(new_filter);\n      });\n    }\n\n    if (import_button) {\n      //. import button action\n      import_button.addEventListener('click', function () {\n        var input = document.createElement('input');\n        input.type = 'file';\n        if (!item) return;\n        let collection = item.collection; //. or \n        // collection = btn.getAttribute('data-collection');\n\n        input.onchange = e => {\n          var file = e.target.files[0];\n\n          _crudClient.default.importCollection({\n            collection: collection,\n            file: file\n          });\n        };\n\n        input.click();\n      });\n    }\n  },\n  _applyOrder: function (item, name, value) {\n    if (!value) {\n      return;\n    }\n\n    let order_type = 0;\n    let idx = this.getOrderByName(item, name);\n\n    if (value == 'asc') {\n      order_type = 1;\n    } else if (value == 'desc') {\n      order_type = -1;\n    } else {\n      order_type = [];\n    }\n\n    this.insertArrayObject(item.orders, idx, {\n      name: name,\n      type: order_type\n    }, order_type);\n  },\n  changeCollection: function (filter) {\n    let collection = filter.el.getAttribute('data-fetch_collection');\n    filter.collection = collection;\n    filter.startIndex = 0;\n  },\n  _makeSearchOption: function (id, attrName) {\n    let forms = document.querySelectorAll('form[' + attrName + '=' + id + ']');\n    let tmpSelector = '[' + attrName + '=' + id + ']';\n    let otherInputs = document.querySelectorAll('input' + tmpSelector + ',textarea' + tmpSelector + ', select' + tmpSelector);\n    let template_inputs = [];\n\n    for (let i = 0; i < forms.length; i++) {\n      let form = forms[i];\n      let formInputs = form.querySelectorAll('input, textarea, select');\n      formInputs = Array.prototype.slice.call(formInputs);\n      template_inputs = template_inputs.concat(formInputs);\n    }\n\n    otherInputs = Array.prototype.slice.call(otherInputs);\n    template_inputs = template_inputs.concat(otherInputs);\n    let values = [];\n\n    for (var i = 0; i < template_inputs.length; i++) {\n      let filter_name = template_inputs[i].getAttribute('data-filter_name');\n      let order_name = template_inputs[i].getAttribute('data-order_by');\n      let input = template_inputs[i];\n      let value_type = input.getAttribute('data-value_type') ? input.getAttribute('data-value_type') : 'string';\n      let value = null;\n\n      if (!filter_name && !order_name) {\n        if (input.type == 'checkbox' && !input.checked) {\n          value = null;\n        } else {\n          value = input.value;\n\n          if (value_type != 'string') {\n            value = Number(value);\n          }\n\n          if (value && !values.includes(value)) {\n            values.push(value);\n          }\n        }\n      }\n    }\n\n    return values;\n  },\n  _initInputForm: function (item, attrName) {\n    if (!item) return;\n    let tmpSelector = '[' + attrName + '=\"' + item.id + '\"]';\n    let formInputs = item.el.getRootNode().querySelectorAll('form' + tmpSelector + ' input, form' + tmpSelector + ' textarea, form' + tmpSelector + ' select');\n    let otherInputs = item.el.getRootNode().querySelectorAll('input' + tmpSelector + ',textarea' + tmpSelector + ', select' + tmpSelector);\n    this.setCheckboxName(item.id, attrName);\n    formInputs = Array.prototype.slice.call(formInputs);\n    otherInputs = Array.prototype.slice.call(otherInputs);\n    formInputs = formInputs.concat(otherInputs); // console.log('input form', tmpSelector);\n\n    for (let i = 0; i < formInputs.length; i++) {\n      let input = formInputs[i];\n      let order_by = input.getAttribute('data-order_by');\n\n      if (order_by) {\n        this._initOrderInput(item, input);\n      } else {\n        this._initFilterInput(item, input, item.id);\n      }\n    }\n  },\n  _initOrderInput: function (item, input) {\n    var _instance = this;\n\n    input.addEventListener('change', function (e) {\n      e.preventDefault();\n      let order_by = this.getAttribute('data-order_by');\n      let order_type = 0;\n\n      let idx = _instance.getOrderByName(item, order_by);\n\n      if (this.value == 'asc') {\n        order_type = 1;\n      } else if (this.value == 'desc') {\n        order_type = -1;\n      } else {\n        order_type = [];\n      }\n\n      _instance.insertArrayObject(item.orders, idx, {\n        name: order_by,\n        type: order_type\n      }, order_type);\n\n      if (item.el) {\n        item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n          detail: {\n            type: 'order'\n          }\n        }));\n      }\n    });\n  },\n  _initFilterInput: function (item, input, id) {\n    var _instance = this;\n\n    var delayTimer;\n    input.addEventListener('input', function (e) {\n      e.preventDefault();\n      let filter_name = this.getAttribute('data-filter_name');\n      let filter_operator = this.getAttribute('data-filter_operator') || '$contain';\n      let filter_type = this.getAttribute('data-filter_type');\n      let value_type = this.getAttribute('data-filter_value_type') || 'string';\n      clearTimeout(delayTimer);\n      delayTimer = setTimeout(function () {\n        if (!filter_name) {\n          item.search.value = _instance._makeSearchOption(id, item.attrName);\n        } else {\n          let idx = _instance.getFilterByName(item, filter_name, filter_operator);\n\n          let inputType = input.type;\n          let filterValue = [];\n\n          if (inputType == 'checkbox') {\n            var inputGroup = document.querySelectorAll(\"input[name=\" + input.name + \"]:checked\");\n\n            for (var i = 0; i < inputGroup.length; i++) {\n              filterValue.push(inputGroup[i].value);\n            }\n          } else if (inputType == 'raido') {} else if (inputType == 'range') {\n            filterValue = [Number(input.min), Number(input.value)];\n          } else {\n            var value = input.value;\n\n            if (value_type != 'string') {\n              value = Number(value);\n            }\n\n            if (value != \"none\") {\n              filterValue = [value];\n            }\n\n            if (value_type === \"raw\") {\n              filterValue = value;\n            }\n          }\n\n          _instance.insertArrayObject(item.filters, idx, {\n            name: filter_name,\n            value: filterValue,\n            operator: filter_operator,\n            type: filter_type\n          });\n        }\n\n        if (item.el) {\n          item.el.dispatchEvent(new CustomEvent(\"changeFilterInput\", {\n            detail: {\n              type: 'filter'\n            }\n          }));\n        }\n      }, 500);\n    });\n  },\n  setCheckboxName: function (id, attrName) {\n    var forms = document.querySelectorAll('form[' + attrName + '=\"' + id + '\"]');\n\n    for (var k = 0; k < forms.length; k++) {\n      var elements = forms[k].querySelectorAll('input[type=checkbox], form input[type=radio]');\n\n      for (var i = 0; i < elements.length; i++) {\n        var el_name = elements[i].getAttribute('name');\n        var f_name = elements[i].getAttribute('data-filter_name');\n\n        if (el_name || !f_name) {\n          continue;\n        }\n\n        elements[i].setAttribute('name', \"_\" + id + \"-\" + f_name + \"_\" + k);\n      }\n    }\n  },\n  getFilterByName: function (item, filterName, filterOperator) {\n    for (var i = 0; i < item.filters.length; i++) {\n      var f = item.filters[i];\n\n      if (f.name == filterName && f.operator == filterOperator) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  insertArrayObject: function (data, idx, obj, value) {\n    if (!value) {\n      value = obj.value;\n    }\n\n    if (typeof value == 'object' && value.length == 0) {\n      if (idx != -1) {\n        data.splice(idx, 1);\n      }\n    } else {\n      if (idx != -1) {\n        data[idx] = obj;\n      } else {\n        data.push(obj);\n      }\n    }\n\n    return data;\n  },\n  getOrderByName: function (item, name) {\n    for (var i = 0; i < item.orders.length; i++) {\n      if (item.orders[i].name == name) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n  defineEvent: function (item) {\n    item.el.addEventListener('fetchFilterData', function (event) {\n      console.log(event);\n    });\n  },\n  fetchData: function (item) {\n    let json = this.makeFetchOptions(item);\n\n    _crudClient.default.readDocumentList(json);\n  },\n  getObjectByFilterId: function (obj, id) {\n    for (var i = 0; i < obj.length; i++) {\n      let filter = obj[i].filter;\n\n      if (!filter) {\n        continue;\n      }\n\n      if (filter.id == id) {\n        return obj[i];\n      }\n    }\n  },\n  getObjectByElement: function (obj, el) {\n    for (var i = 0; i < obj.length; i++) {\n      let filter = obj[i].filter;\n\n      if (!filter) {\n        continue;\n      }\n\n      if (filter.el.isSameNode(el)) {\n        return obj[i];\n      }\n    }\n  },\n  makeFetchOptions: function (item) {\n    let json = {\n      \"collection\": item.collection,\n      \"element\": item.eId,\n      \"metadata\": {\n        isRefresh: item.isRefresh\n      },\n      \"operator\": {\n        \"filters\": item.filters,\n        \"orders\": item.orders,\n        \"search\": item.search,\n        \"startIndex\": item.startIndex\n      },\n      \"is_collection\": item.is_collection\n    };\n\n    if (item.count) {\n      json['operator'].count = item.count;\n    }\n\n    return json;\n  },\n  init: function ({\n    name,\n    attribute,\n    callback\n  }) {\n    let elements = document.querySelectorAll(`[data-fetch_collection][${attribute}]`);\n    const self = this;\n    elements.forEach(el => {\n      self.__initFilterElement(el, attribute, name);\n    });\n\n    _crudClient.default.listen('readDocumentList', function (data) {\n      callback.call(null, data);\n    });\n  },\n  __initFilterElement: function (el, attribute, name) {\n    let _id = el.getAttribute(attribute);\n\n    const self = this;\n    if (!_id) return; //. restrict the duplication define\n    // if (this.module_items.some(x => x.name == name && x.id == _id)) {\n    // \treturn;\n    // }\n\n    let filter = this.setFilter(el, attribute, name);\n\n    if (filter) {\n      this.module_items.push({\n        el: el,\n        filter: filter,\n        id: _id,\n        name: name\n      });\n      el.addEventListener('changeFilterInput', function (e) {\n        self.fetchData(filter);\n      });\n      this.fetchData(filter);\n    }\n  }\n};\n\nCoCreateFilter.__init();\n\nvar _default = CoCreateFilter;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-filter/src/index.js\n")}}]);