/*! For license information please see selected-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["selected-chunk"],{"../CoCreate-selected/src/index.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\nconst CoCreateSelected = {\n  // init: function() {\n  // \tthis.initElement(document);\n  // },\n  // initElement: function(container) {\n  // \tlet mainContainer = container || document;\n  // \tif (!mainContainer.querySelectorAll) {\n  // \t\treturn;\n  // \t}\n  // \tlet elements = mainContainer.querySelectorAll(`[data-selected]`);\n  // \tif (elements.length === 0 && mainContainer != document && mainContainer.hasAttribute(`[data-selected]`)) {\n  // \t\telements = [mainContainer];\n  // \t}\n  // \tconst self = this;\n  // \telements.forEach((element) => self.__initElementEvent(element));\n  // },\n  // __initElementEvent: function(element) {\n  // \tconst selectedValue = element.getAttribute('data-selected') || \"\";\n  // \tlet values = selectedValue.split(',');\n  // \tif (!values || values.length === 0) {\n  // \t\treturn;\n  // \t}\n  // \tvalues = values.map(x => x.trim())\n  // \tconst self = this;\n  // \t// if (CoCreate.observer.getInitialized(element)) {\n  // \t// \treturn;\n  // \t// }\n  // \t// CoCreate.observer.setInitialized(element)\n  // \telement['co_initialized_'] = true;\n  // \telement.addEventListener('click', function() {\n  // \t\tself.__changeElementStatus(element, values)\n  // \t});\n  // \tdocument.addEventListener('click', function(event) {\n  // \t\tif (!element.hasAttribute(\"data-selected_group\") && !element.contains(event.target)) {\n  // \t\t\tself.__removeSelectedStatus(element, values);\n  // \t\t}\n  // \t})\n  // },\n  // __changeElementStatus: function(element, values) {\n  // \tlet target_attribute = element.dataset[`selected_attribute`] || 'class';\n  // \tlet elements = this.__getTargetElements(element);\n  // \tconst self = this;\n  // \tlet selectedGroup = element.dataset['selected_group'];\n  // \tlet group = selectedGroup ? `[data-selected_group=\"${selectedGroup}\"]` : ':not([data-selected_group])';\n  // \tlet previouSelected = document.querySelector('[data-selected]' + group + '[selected]');\n  // \t// if (previouSelected.isSameNode(element)) {\n  // \t// \treturn ;\n  // \t// }\n  // \tif (previouSelected) {\n  // \t\tlet previousValues = previouSelected.dataset['selected'].split(',').map(x => x.trim());\n  // \t\tthis.__removeSelectedStatus(previouSelected, previousValues)\n  // \t}\n  // \tvalues = values.map(x => x.trim());\n  // \telements.forEach((el) => {\n  // \t\tself.setValue(el, target_attribute, values);\n  // \t})\n  // },\n  // __removeSelectedStatus: function(element, values) {\n  // \tlet attrName = element.dataset[`selected_attribute`] || 'class';\n  // \tlet elements = this.__getTargetElements(element);\n  // \telements.forEach(el => {\n  // \t\tif (attrName === 'class') {\n  // \t\t\tlet attrValues = (el.getAttribute(attrName) || \"\").split(' ').map(x => x.trim());\n  // \t\t\tlet currentValue = values.filter(x => attrValues.includes(x))[0] || '';\n  // \t\t\tif (currentValue) {\n  // \t\t\t\tel.classList.remove(currentValue);\n  // \t\t\t}\n  // \t\t}\n  // \t\telse {\n  // \t\t\tel.setAttribute(attrName, \"\");\n  // \t\t}\n  // \t\tel.removeAttribute('selected');\n  // \t})\n  // },\n  // setValue: function(element, attrName, values) {\n  // \tlet currentAttrValue = element.getAttribute(attrName) || \"\";\n  // \tlet attrValues = currentAttrValue;\n  // \tif (attrName === 'class') {\n  // \t\tattrValues = currentAttrValue.split(' ').map(x => x.trim());\n  // \t}\n  // \tlet oldValue = values.filter(x => attrValues.includes(x))[0] || '';\n  // \tlet newValue = this.__getNextValue(values, oldValue)\n  // \telement.setAttribute('selected', \"\")\n  // \tif (oldValue === newValue) {\n  // \t\treturn;\n  // \t}\n  // \tif (attrName === 'class') {\n  // \t\tif (oldValue != '') {\n  // \t\t\telement.classList.remove(oldValue);\n  // \t\t}\n  // \t\tif (newValue != '') {\n  // \t\t\telement.classList.add(newValue);\n  // \t\t}\n  // \t}\n  // \telse {\n  // \t\telement.setAttribute(attrName, newValue);\n  // \t}\n  // },\n  // __getTargetElements: function(element) {\n  // \tlet targetSelector = element.dataset[`selected_target`];\n  // \tlet elements = [element];\n  // \tif (targetSelector) {\n  // \t\telements = Array.from(document.querySelectorAll(targetSelector));\n  // \t\telements.push(element)\n  // \t}\n  // \treturn elements;\n  // },\n  // __getNextValue: function(values, val) {\n  // \tlet size = values.length;\n  // \tlet nn = values.indexOf(val);\n  // \tif (nn == -1) {\n  // \t\treturn values[0];\n  // \t}\n  // \telse {\n  // \t\treturn values[(nn + 1) % size];\n  // \t}\n  // },\n  config: function ({\n    srcDocument,\n    destDocument,\n    wrap,\n    callback = () => '',\n    selector,\n    target,\n    srcAttribute,\n    destAttribute,\n    type = \"post\",\n    eventType = \"click\"\n  }) {\n    srcDocument.addEventListener(eventType, e => {\n      if (e.target.matches(selector) || srcAttribute && e.target.hasAttribute(srcAttribute)) {\n        let targets = destDocument.querySelectorAll(target);\n        targets.forEach(target => {\n          let value = e.target.getAttribute(srcAttribute);\n          if (wrap) value = wrap.replace(\"$1\", value);\n          if (destAttribute) target.setAttribute(destAttribute, value);\n          callback(e.target, target);\n        });\n      }\n\n      if (type === \"cut\") e.target.removeAttribute(srcAttribute);\n    });\n  },\n  selected: function selected() {\n    function activate(ds, el) {\n      if (ds[\"selected_attribute\"]) el.setAttribute(ds[\"selected_attribute\"], ds[\"selected\"]);else {\n        el.classList.add(ds[\"selected\"]);\n        el.setAttribute('selected', '');\n      }\n    }\n\n    function deactiave(ds, el) {\n      if (ds[\"selected_attribute\"]) el.removeAttribute(ds[\"selected_attribute\"], ds[\"selected\"]);else {\n        el.classList.remove(ds[\"selected\"]);\n        el.removeAttribute('selected', '');\n      }\n    }\n\n    function getSelected(el) {\n      while (!el.dataset['selected']) if (el.parentElement) el = el.parentElement;else return false;\n\n      return el;\n    }\n\n    document.addEventListener(\"click\", e => {\n      let el = getSelected(e.target);\n      if (!el) return;\n      let ds = el.dataset;\n      let group = ds['selected_group'] ? `,[data-selected_group=\"${ds[\"selected_group\"] || 'null'}\"]` : '';\n      document.querySelectorAll(` [data-selected]:not([data-selected_group])${group}`).forEach(el => {\n        let ds = el.dataset;\n        deactiave(el.dataset, el);\n        if (ds[\"selected_target\"]) document.querySelectorAll(ds[\"selected_target\"]).forEach(el => deactiave(ds, el));\n      });\n      activate(ds, el);\n      if (ds[\"selected_target\"]) document.querySelectorAll(ds[\"selected_target\"]).forEach(el => activate(ds, el));\n    });\n  }\n};\nCoCreateSelected.selected();\nvar _default = CoCreateSelected;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-selected/src/index.js\n")}}]);