/*! For license information please see text-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["text-chunk"],{"../CoCreate-text/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nvar _crdt = _interopRequireDefault(__webpack_require__(/*! @cocreate/crdt */ \"../CoCreate-crdt/src/index.js\"));\n\nvar _cursors = _interopRequireDefault(__webpack_require__(/*! @cocreate/cursors */ \"./src/index.js\"));\n\nvar _form = _interopRequireDefault(__webpack_require__(/*! @cocreate/form */ \"../CoCreate-form/src/index.js\"));\n\nvar _floatingLabel = _interopRequireDefault(__webpack_require__(/*! @cocreate/floating-label */ \"../CoCreate-floating-label/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateText = {\n  elements: [],\n  init: function () {\n    this.initElement(document); // this.initSockets();\n  },\n  refreshElement: function (mutation) {\n    let element = mutation.target;\n    if (!element) return;\n    const tagName = element.tagName.toLowerCase();\n\n    if (!['input', 'textarea'].includes(tagName) || !element.getAttribute('data-document_id') || !element.getAttribute('name')) {\n      return;\n    }\n\n    if (!_crudClient.default.isCRDT(element)) return;\n\n    if (!_observer.default.getInitialized(element, 'text')) {\n      this.__initEvents(element);\n    }\n\n    _observer.default.setInitialized(element, 'text');\n\n    if (_form.default.checkID(element)) {\n      // element.value = \"\";\n      this.createYDoc(element, true);\n    }\n  },\n  initElement: function (container) {\n    var self = this;\n    let fetch_container = container || document;\n    let elements = fetch_container.querySelectorAll('input[data-document_id][name], textarea[data-document_id][name]');\n\n    if (elements.length == 0 && fetch_container != document && fetch_container.hasAttribute('data-document_id') && fetch_container.hasAttribute('name')) {\n      elements = [fetch_container];\n    }\n\n    elements.forEach(element => {\n      if (!_crudClient.default.isCRDT(element)) {\n        return;\n      }\n\n      if (self.checkExistElement(element)) {\n        // this.setInitValue(elements[i])\n        return;\n      }\n\n      if (_observer.default.getInitialized(element, 'text')) {\n        return;\n      }\n\n      _observer.default.setInitialized(element, 'text');\n\n      self.__initEvents(element);\n\n      if (_form.default.checkID(element)) {\n        self.createYDoc(element);\n      } else {\n        //. register create document_id event\n        element.addEventListener('set-document_id', function (event) {\n          let el = this;\n          let text_str = el.value;\n          self.createYDoc(el);\n          el.value = \"\";\n          self.sendChangeData(el, text_str, 0, text_str.length);\n        });\n      }\n    });\n  },\n  checkExistElement: function (element) {\n    for (var i = 0; i < this.elements.length; i++) {\n      if (this.elements[i].isSameNode(element)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  setInitValue: function (element) {\n    var typeId = this.generateTypeName(element);\n\n    var value = _crdt.default.getWholeString(typeId);\n\n    element.value = value; // input.setValue(element, value);\n  },\n  createYDoc: function (element, isExclude) {\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(element);\n\n    if (!_crudClient.default.checkValue(collection) || !_crudClient.default.checkValue(document_id) || !_crudClient.default.checkValue(name)) return;\n\n    const status = _crdt.default.init({\n      collection,\n      document_id,\n      name,\n      element\n    });\n\n    if (!isExclude) {\n      this.elements.push(element);\n    } else {\n      element.value = _crdt.default.getText({\n        collection,\n        document_id,\n        name\n      }); // input.setValue(element, crdt.getText({collection, document_id, name }));\n    }\n  },\n  __initEvents: function (input_element) {\n    //. selection event\n    const self = this;\n    input_element.addEventListener('select', function () {\n      if (this.selectionEnd !== this.selectionStart) {\n        self.setSelectionInfo(this, true, this.selectionStart, this.selectionEnd);\n        if (document.activeElement === this) self.sendPosition(this);\n      }\n    });\n    input_element.addEventListener('keyup', function (event) {\n      let arrows = [37, 38, 39, 40];\n\n      if (arrows.indexOf(event.keyCode) != -1) {\n        self.sendPosition(this);\n      }\n    });\n    input_element.addEventListener('keydown', function (event) {\n      let arrows = [37, 38, 39, 40];\n\n      if (arrows.indexOf(event.keyCode) != -1) {\n        //console.log(\"keydown ---- \")\n        self.sendPosition(this);\n      }\n    });\n    input_element.addEventListener('click', function (event) {\n      if (document.activeElement === this) self.sendPosition(this);\n    });\n    input_element.addEventListener('blur', function (event) {\n      const id = self.generateTypeName(this);\n\n      _crdt.default.setCursorNull(id);\n    });\n    input_element.addEventListener('input', function (event) {\n      let nowstart = this.selectionStart - 1;\n      let nowend = nowstart;\n      let selection_info = self.getSelectionInfo(this);\n      let content_text = \"\";\n      let isUpdate = false;\n\n      switch (event.inputType) {\n        case 'deleteContentBackward':\n          isUpdate = true;\n          nowstart++;\n          nowend = nowstart + 1;\n          break;\n\n        case 'deleteContentForward':\n          isUpdate = true;\n          nowstart++;\n          nowend = nowstart + 1;\n          break;\n\n        case 'insertLineBreak':\n          isUpdate = true;\n          content_text = \"\\n\";\n          nowend++;\n          break;\n\n        case 'insertText':\n          isUpdate = true;\n          content_text = event.data || \"\\n\";\n          break;\n\n        case 'deleteByCut':\n          isUpdate = true;\n          break;\n      }\n\n      if (isUpdate) {\n        if (selection_info.is_selected) {\n          //. delete event\n          let character_deleted = selection_info.start - selection_info.end; //cursors.recalculate_local_cursors(this,character_deleted)\n\n          self.sendChangeData(this, \"\", selection_info.start, selection_info.end);\n\n          if (content_text.length > 0) {\n            self.sendChangeData(this, content_text, nowstart, nowend);\n          }\n\n          self.setSelectionInfo(this, false, this.selectionStart, this.selectionStart);\n        } else {\n          self.sendChangeData(this, content_text, nowstart, nowend);\n        }\n      }\n    });\n    /** unselect events **/\n\n    input_element.addEventListener('blur', function (e) {\n      self.setSelectionInfo(this, false, this.selectionStart, this.selectionStart);\n    });\n    input_element.addEventListener('click', function (e) {\n      self.setSelectionInfo(this, false, this.selectionStart, this.selectionStart);\n    });\n    /** past events **/\n\n    input_element.addEventListener('paste', function (event) {\n      let content_text = event.clipboardData.getData('Text');\n      let start = this.selectionStart;\n      let end = this.selectionEnd; //. send delete event\n\n      if (start != end) {\n        this.setSelectionRange(end, end);\n        self.sendChangeData(this, \"\", start, end, false);\n      }\n\n      if (start == end) {// to calculate Cursors in collaboration \n        // cursors.recalculate_local_cursors(this,content_text.length)\n      } //. insert event\n\n\n      self.sendChangeData(this, content_text, start, start, false);\n      event.preventDefault();\n    });\n    input_element.addEventListener('cocreate-crdt-update', function (event) {\n      var info = event.detail;\n      input_element.crudSetted = true;\n      var pos = 0;\n      var flag = true;\n      info.forEach(item => {\n        if (item.retain) {\n          flag = true;\n          pos = item.retain;\n        }\n\n        if (item.insert || item.delete) {\n          if (flag == false) pos = 0;\n          flag = false;\n\n          if (item.insert) {\n            //. insert process\n            self.updateChangeData(this, item.insert, pos, pos);\n          } else if (item.delete) {\n            //. delete process\n            self.updateChangeData(this, \"\", pos, pos + item.delete);\n          }\n        }\n      });\n    });\n  },\n  setSelectionInfo: function (e, isSelect, start, end) {\n    e.setAttribute(\"is_selected\", isSelect);\n    e.setAttribute(\"selection_start\", start);\n    e.setAttribute(\"selection_end\", end); //console.log(\"swelect\",e)\n\n    this.sendPosition(e);\n  },\n  getSelectionInfo: function (e) {\n    return {\n      is_selected: e.getAttribute(\"is_selected\") === 'true' ? true : false,\n      start: parseInt(e.getAttribute(\"selection_start\")),\n      end: parseInt(e.getAttribute(\"selection_end\"))\n    };\n  },\n  sendChangeData: function (element, content, start, end, isRemove = true) {\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(element);\n\n    if (!document_id || document_id === \"\") {\n      _form.default.request({\n        element: element,\n        nameAttr: \"name\"\n      });\n\n      element.setAttribute('data-document_id', 'pending');\n      return;\n    }\n\n    if (document_id == 'pending') {\n      return;\n    }\n\n    if (!_crudClient.default.isSaveAttr(element)) {\n      return;\n    } //console.log(\"SendChangeDataFrom Cocreate-Text\")\n\n\n    let character_count = content.length > 0 ? content.length : -1;\n\n    _cursors.default.recalculate_local_cursors(element, character_count); //send position when keyUp \n\n\n    this.sendPosition(element);\n\n    if (content.length > 0) {\n      if (isRemove) {\n        element.setRangeText(\"\", start, start + content.length, \"start\");\n      }\n\n      _crdt.default.insertText({\n        collection,\n        document_id,\n        name,\n        value: content,\n        position: start\n      });\n    } else {\n      if (isRemove) element.setRangeText(\" \".repeat(end - start), start, start, \"end\");\n\n      _crdt.default.deleteText({\n        collection,\n        document_id,\n        name,\n        position: start,\n        length: end - start\n      });\n    }\n\n    if (document.activeElement === element) {\n      this.setSelectionInfo(element, false, element.selectionStart, element.selectionStart);\n      this.sendPosition(element);\n    }\n  },\n  updateChangeData: function (element, content, start, end) {\n    let prev_start = element.selectionStart;\n    let prev_end = element.selectionEnd;\n    element.setRangeText(content, start, end, \"end\");\n\n    if (prev_start >= start) {\n      if (content == \"\") {\n        prev_start -= end - start;\n        prev_end -= end - start;\n        prev_start = prev_start < start ? start : prev_start;\n      } else {\n        prev_start += content.length;\n        prev_end += content.length;\n      }\n    }\n\n    {\n      if (content == \"\" && prev_end >= start) {\n        prev_end = prev_end >= end ? prev_end - (end - start) : start;\n      }\n    }\n    element.selectionStart = prev_start;\n    element.selectionEnd = prev_end;\n    var isFocused = document.activeElement === element;\n\n    _cursors.default.refresh_mirror(element);\n\n    if (_floatingLabel.default) {\n      _floatingLabel.default.update(element, element.value);\n    }\n  },\n  generateTypeName: function (element) {\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(element);\n\n    return _crdt.default.generateID(config.organization_Id, collection, document_id, name);\n  },\n  setText: function (element_id, info) {\n    var pos = 0;\n    var flag = true;\n    info.forEach(item => {\n      if (item.retain) {\n        flag = true;\n        pos = item.retain;\n      }\n\n      if (item.insert || item.delete) {\n        if (flag == false) pos = 0;\n        flag = false;\n\n        if (item.insert) {\n          //. insert process\n          this.receiveChangeData(element_id, item.insert, pos, pos);\n        } else if (item.delete) {\n          //. delete process\n          this.receiveChangeData(element_id, \"\", pos, pos + item.delete);\n        }\n      }\n    });\n  },\n  isAvaiableEl: function (element) {\n    //console.log(this.elements)\n    for (var i = 0; i < this.elements.length; i++) {\n      console.log(this.elements[i].isEqualNode(element), element);\n\n      if (this.elements[i].isEqualNode(element) === true) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  sendPosition: function (element) {\n    //console.log(\"Se envio \")\n\n    /*if (!this.isAvaiableEl(element)) {\n      return;\n    }*/\n    const id = this.generateTypeName(element); //console.log(\" SEnd Position Selector ID \",id)\n    //console.log(element.selectionStart, element.selectionEnd);\n\n    let from = element.selectionStart;\n    let to = element.selectionEnd; //console.log(\"Se envio la position \",id,from, to)\n\n    _crdt.default.setPositionYJS(id, from, to);\n  }\n};\nCoCreateText.init(); // CoCreateInit.register('CoCreateText', CoCreateText, CoCreateText.initElement);\n\n_observer.default.init({\n  name: 'CoCreateTextCreate',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name]',\n  callback: function (mutation) {\n    console.log('cocreate-text init');\n    CoCreateText.initElement(mutation.target);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateTextNameObserver',\n  observe: ['attributes'],\n  attributes: ['name'],\n  callback: function (mutation) {\n    console.log('change cocreate-text name');\n    CoCreateText.refreshElement(mutation);\n  }\n});\n\nvar _default = CoCreateText;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-text/src/index.js\n")}}]);