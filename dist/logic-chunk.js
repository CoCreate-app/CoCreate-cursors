/*! For license information please see logic-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["logic-chunk"],{"../CoCreate-logic/src/attributes.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateAttributes = {\n  //. key: colleciton.document_id.name,\n  //. example:  \n\n  /** modules.xxxxx.test: [\n   *\t{el: element, attr: 'data-test1'},\n   *\t{el: element, attr: 'data-test2'}\n   * ]\n   * \n   **/\n  mainInfo: {},\n  init: function () {\n    // registerModule('fetch-attributes', this, null, this.getRequest, this.renderAttribute);\n    const self = this;\n\n    _crudClient.default.listen('updateDocument', function (data) {\n      self.render(data);\n    });\n\n    _crudClient.default.listen('readDocument', function (data) {\n      self.render(data);\n    });\n\n    _crudClient.default.listen('connect', function (data) {\n      // self.getRequest()\n      self.__getRequest();\n    });\n  },\n  initElement: function (container) {\n    const requests = this.__getRequest(container);\n\n    if (requests) {\n      requests.forEach(req => {\n        _crudClient.default.readDocument({\n          collection: req['collection'],\n          document_id: req['document_id']\n        });\n      });\n    }\n  },\n  render: function (data) {\n    const collection = data['collection'];\n    const document_id = data['document_id'];\n\n    for (let name in data.data) {\n      const key = this.__makeKey(collection, document_id, name);\n\n      const value = data.data[name];\n\n      if (this.mainInfo[key]) {\n        this.mainInfo[key].forEach(item => {\n          item.el.setAttribute(item.attr, value); // if (item.attr == 'data-collection') {\n          // \trunInitModule('cocreate-text');\t\t\t\t\t\t\n          // } \n\n          item.el.dispatchEvent(new CustomEvent('CoCreateAttribute-run', {\n            eventType: 'rendered',\n            item: item.el\n          }));\n        });\n      }\n    }\n  },\n  setValue: function (element, data) {},\n  __getRequest: function (container) {\n    let fetch_container = container || document;\n    let elements = fetch_container.querySelectorAll('[fetch-for]');\n    let self = this;\n    let requestData = [];\n\n    if (elements.length === 0 && fetch_container != document && fetch_container.hasAttributes('fetch-for')) {\n      elements = [fetch_container];\n    }\n\n    elements.forEach(el => {\n      //. check\n      const el_collection = el.getAttribute('data-collection');\n      const el_documentId = el.getAttribute('data-document_id');\n      const el_name = el.getAttribute('name');\n      const el_value = el.getAttribute('value');\n      const attributes = el.attributes;\n\n      for (let i = 0; i < attributes.length; i++) {\n        let jsonInfo = self.__jsonParse(attributes[i].value);\n\n        if (jsonInfo) {\n          let collection = jsonInfo['collection'] || el_collection;\n          let document_id = jsonInfo['document_id'] || el_documentId;\n          let name = jsonInfo['name'] || el_name;\n          let value = jsonInfo['value'] || el_value;\n\n          if (jsonInfo['data-pass_id']) {\n            let pass_info = self.__checkPassId(jsonInfo['data-pass_id']);\n\n            if (pass_info) {\n              collection = pass_info.collection;\n              document_id = pass_info.document_id;\n              value = pass_info.value;\n            } else {\n              collection = null;\n              document_id = null;\n              value = null;\n            }\n          }\n\n          const key = self.__makeKey(collection, document_id, name);\n\n          if (collection && document_id && name) {\n            if (!self.mainInfo[key]) {\n              self.mainInfo[key] = [];\n            }\n\n            self.mainInfo[key].push({\n              el: el,\n              attr: attributes[i].name\n            });\n\n            if (!requestData.some(d => d['collection'] === collection && d['document_id'] === document_id)) {\n              requestData.push({\n                collection,\n                document_id\n              });\n            }\n          }\n        }\n      }\n    });\n    return requestData;\n  },\n  __jsonParse: function (str_data) {\n    try {\n      let json_data = JSON.parse(str_data);\n\n      if (typeof json_data === 'object' && json_data != null) {\n        return json_data;\n      } else {\n        return null;\n      }\n    } catch (e) {\n      return null;\n    }\n  },\n  __checkPassId: function (pass_id) {\n    var dataParams = localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return null;\n\n    for (var i = 0; i < dataParams.length; i++) {\n      if (dataParams[i].pass_to == pass_id) {\n        return {\n          collection: dataParams[i].collection,\n          document_id: dataParams[i].document_id,\n          value: dataParams[i].value\n        };\n      }\n    }\n\n    return null;\n  },\n  __makeKey: function (collection, document_id, name) {\n    return `${collection}_${document_id}_${name}`;\n  }\n};\nCoCreateAttributes.init();\n\n_observer.default.init({\n  name: 'CoCreateAttributes',\n  observe: ['subtree', 'childList'],\n  include: '[data-for]',\n  callback: function (mutation) {\n    CoCreateAttributes.initElement(mutation.target);\n  }\n});\n\nvar _default = CoCreateAttributes;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-logic/src/attributes.js\n")},"../CoCreate-logic/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ \"../CoCreate-action/src/index.js\"));\n\nvar _attributes = _interopRequireDefault(__webpack_require__(/*! ./attributes.js */ \"../CoCreate-logic/src/attributes.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateLogic = {\n  attributes: _attributes.default,\n  init: function () {\n    this.__initKeys();\n\n    this.__initPassSessionIds();\n\n    this.__initPassParams();\n\n    this.__initPassValueParams(); // this.__initValuePassBtns();\n\n\n    this.__initGetValueInput();\n\n    this.initAtagElement();\n  },\n  // getKeys\n  __initKeys: function () {\n    if (window.localStorage.getItem('apiKey')) {\n      config.apiKey = window.localStorage.getItem('apiKey');\n    }\n\n    if (window.localStorage.getItem('securityKey')) {\n      config.securityKey = window.localStorage.getItem('securityKey');\n    }\n\n    if (window.localStorage.getItem('organization_id')) {\n      config.organization_Id = window.localStorage.getItem('organization_id');\n    }\n  },\n  //. passSessionIds\n  __initPassSessionIds: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let user_id = window.localStorage.getItem('user_id');\n    let adminUI_id = window.localStorage.getItem('adminUI_id');\n    let builderUI_id = window.localStorage.getItem('builderUI_id');\n\n    this.__initPassItems(orgId, \".sessionOrg_Id\", true);\n\n    this.__initPassItems(user_id, \".sessionUser_Id\");\n\n    this.__initPassItems(adminUI_id, \".sessionAdminUI_Id\");\n\n    this.__initPassItems(builderUI_id, \".sessionBuilderUI_Id\");\n  },\n  initElement: function (container) {\n    const self = this;\n    let mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    let elements = mainContainer.querySelectorAll('[data-pass_id]');\n    elements = Array.from(elements);\n\n    if (mainContainer != document && mainContainer.hasAttribute('data-pass_id')) {\n      elements.push(mainContainer);\n    }\n\n    let dataParams = window.localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return;\n    elements.forEach(el => {\n      if (_observer.default.getInitialized(el)) {\n        return;\n      }\n\n      const pass_id = el.getAttribute('data-pass_id');\n      const paramObj = dataParams.find(x => x.pass_to == pass_id);\n      if (!paramObj) return;\n      const {\n        collection,\n        document_id,\n        pass_to,\n        prefix\n      } = paramObj;\n\n      _observer.default.setInitialized(el);\n\n      if (el.tagName === \"FORM\" && !el.getAttribute('data-colleciton') && collection) {\n        el.setAttribute('data-colleciton', collection);\n      }\n\n      self.__setPassAttributes(el, paramObj);\n    });\n  },\n  initAtagElement: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      const target = event.target.closest('a, button');\n      if (!target) return;\n\n      if (target.getAttribute('target') === 'modal' && target.getAttribute('data-pass_to')) {\n        event.preventDefault(); // event.stopImmediatePropagation()\n\n        self.setLinkProcess(target);\n        return;\n      }\n\n      const href = target.getAttribute('href');\n\n      if (target.getAttribute('target') !== 'modal') {\n        if (target.hasAttribute('data-actions')) return;\n        if (!self.passSubmitProcess(target)) return;\n        const pass_to = target.getAttribute('data-pass_to');\n\n        if (href) {\n          event.preventDefault();\n          self.storePassData(target);\n          self.openAnother(target);\n        } else {\n          self.storePassData(target);\n\n          if (pass_to) {\n            self.__initPassParams(pass_to);\n          }\n        }\n      }\n    });\n  },\n  //. passParams\n  __initPassParams: function (pass_to) {\n    var dataParams = window.localStorage.getItem('dataParams');\n    dataParams = JSON.parse(dataParams);\n    if (!dataParams || dataParams.length == 0) return;\n    let self = this;\n    dataParams.forEach(function (dataParam) {\n      var param_collection = dataParam.collection;\n      var param_document_id = dataParam.document_id;\n      var param_prefix = dataParam.prefix;\n      var param_pass_to = dataParam.pass_to;\n\n      if (pass_to && param_pass_to != pass_to) {\n        return;\n      }\n\n      var forms = document.querySelectorAll('form');\n      forms.forEach(form => {\n        var pass_id = form.getAttribute('data-pass_id');\n\n        if (pass_id && pass_id == param_pass_to && param_collection && param_collection != \"\") {\n          if (!form.getAttribute('data-collection')) {\n            form.setAttribute('data-collection', param_collection);\n          }\n        }\n      });\n      var allTags = document.querySelectorAll('[data-pass_id]');\n      allTags.forEach(tag => {\n        var pass_id = tag.getAttribute('data-pass_id');\n\n        if (pass_id && pass_id == param_pass_to) {\n          self.__setPassAttributes(tag, dataParam);\n        }\n      });\n    });\n  },\n  // passValueParams\n  __initPassValueParams: function (contianer) {\n    var valueParams = window.localStorage.getItem('valueParams');\n    valueParams = JSON.parse(valueParams);\n    if (!valueParams || valueParams.length == 0) return;\n    valueParams.forEach(function (valueParam) {\n      var pass_value_to = valueParam.pass_value_to; // var inputs = (contianer || document).querySelectorAll('input, textarea, select');\n\n      var inputs = (contianer || document).querySelectorAll('[data-pass_value_id]');\n      inputs.forEach(input => {\n        let pass_value_id = input.getAttribute('data-pass_value_id');\n\n        if (pass_value_id && pass_value_id == pass_value_to) {\n          if (['INPUT', 'TEXTAREA', 'SELECT'].includes(input.tagName)) {\n            input.value = valueParam.value;\n            if (CoCreate.floatingLabel) CoCreate.floatingLabel.update(input);\n          } else {\n            input.innerHTML = valueParam.value;\n          }\n        }\n      });\n    });\n  },\n  __getPassAttributes: function (element) {\n    return {\n      collection: element.getAttribute('data-pass_collection') || element.getAttribute('data-pass_fetch_collection'),\n      document_id: element.getAttribute('data-pass_document_id'),\n      name: element.getAttribute('data-pass_name'),\n      value: element.getAttribute('data-pass_value'),\n      pass_to: element.getAttribute('data-pass_to'),\n      filter_name: element.getAttribute('data-pass_filter_name'),\n      filter_value: element.getAttribute('data-pass_filter_value'),\n      prefix: element.getAttribute('data-pass_prefix') || \"\"\n    };\n  },\n  __setPassAttributes: function (el, param) {\n    const {\n      collection,\n      document_id,\n      name,\n      value,\n      pass_to,\n      filter_name,\n      filter_value,\n      prefix\n    } = param;\n    const pass_id = el.getAttribute('data-pass_id');\n    const isRefresh = el.hasAttribute('data-pass_refresh') ? true : false;\n    if (pass_id != pass_to) return;\n\n    if (collection) {\n      this.__setAttributeValueOfElement(el, 'data-collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_fetch_collection', collection, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_collection', collection, isRefresh);\n    }\n\n    if (document_id) {\n      this.__setAttributeValueOfElement(el, 'data-document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_fetch_document_id', document_id, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_document_id', document_id, isRefresh);\n    }\n\n    if (name) {\n      this.__setAttributeValueOfElement(el, 'name', name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_name', name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_name', name, isRefresh);\n    }\n\n    if (value) {\n      this.__setAttributeValueOfElement(el, 'value', value, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_value', value, isRefresh);\n    }\n\n    if (prefix) {\n      this.__setAttributeValueOfElement(el, 'name', prefix + el.getAttribute('name'), isRefresh, true);\n\n      this.__setAttributeValueOfElement(el, 'data-fetch_name', prefix + el.getAttribute('data-fetch_name'), isRefresh, true);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_prefix', prefix, isRefresh);\n    }\n\n    if (filter_name) {\n      this.__setAttributeValueOfElement(el, 'data-filter_name', filter_name, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_filter_name', filter_name, isRefresh);\n    }\n\n    if (filter_value) {\n      this.__setAttributeValueOfElement(el, 'data-filter_value', filter_value, isRefresh);\n\n      this.__setAttributeValueOfElement(el, 'data-pass_filter_value', filter_value, isRefresh);\n    }\n  },\n  __setAttributeValueOfElement: function (el, attrname, value, isRefresh, onlyHas) {\n    if (value) {\n      if (el.hasAttribute(attrname) && onlyHas) {\n        el.setAttribute(attrname, value);\n        return;\n      }\n\n      if (el.hasAttribute(attrname) && (!el.getAttribute(attrname) || isRefresh)) {\n        el.setAttribute(attrname, value);\n        return;\n      }\n    }\n  },\n  //. storePassData\n  storePassData: function (aTag) {\n    let dataParams = [];\n    const self = this;\n\n    let param = this.__getPassAttributes(aTag);\n\n    if (aTag.hasAttribute('data-actions')) {\n      return;\n    }\n\n    if (param.pass_to) {\n      dataParams.push(param);\n    }\n\n    let tags = aTag.querySelectorAll('[data-pass_to]');\n    tags.forEach(tag => {\n      let passParam = self.__getPassAttributes(tag);\n\n      if (passParam.pass_to) {\n        dataParams.push(passParam);\n      }\n    });\n    if (dataParams.length > 0) localStorage.setItem('dataParams', JSON.stringify(dataParams));\n  },\n  //. initValuePassBtns\n  __initValuePassBtns: function () {// let forms = document.getElementsByTagName('form');\n    // for (let i=0; i < forms.length; i++) {\n    // \tlet form = forms[i];\n    // \tlet valuePassBtn = form.querySelector('.passValueBtn');\n    // \tif (valuePassBtn) this.__registerValuePassBtnEvent(form, valuePassBtn);\n    // }\n  },\n  __initGetValueInput: function () {\n    var inputs = document.querySelectorAll('input, textarea');\n    let self = this;\n\n    for (var i = 0; i < inputs.length; i++) {\n      var input = inputs[i];\n\n      if (!input.id) {\n        continue;\n      }\n\n      input.addEventListener('input', function (e) {\n        self.__setGetValueProcess(this.id, this.value);\n      });\n      input.addEventListener('updated_by_fetch', function (e) {\n        self.__setGetValueProcess(this.id, this.value);\n      });\n    }\n  },\n  //. initValuePassBtn\n  __registerValuePassBtnEvent: function (form, valuePassBtn) {// let self = this;\n    // return;\n    // valuePassBtn.addEventListener('click', function(e) {\n    // \tlet inputs = form.querySelectorAll('input, textarea, select');\n    // \tif (valuePassBtn.hasAttribute('data-actions')) {\n    // \t\treturn;\n    // \t}\n    // \tlet valueParams = [];\n    // \tfor (let i = 0; i < inputs.length; i++) {\n    // \t\tlet input = inputs[i];\n    // \t\tlet pass_value_to = input.getAttribute('data-pass_value_to');\n    // \t\tlet value = input.value;\n    // \t\tif (pass_value_to) {\n    // \t\t\tvalueParams.push({\n    // \t\t\t\tpass_value_to: pass_value_to,\n    // \t\t\t\tvalue: value\n    // \t\t\t})\n    // \t\t}\n    // \t}\n    // \tif (valueParams.length > 0) localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    // \tself.__initPassValueParams();\n    // \tlet aTag = valuePassBtn.querySelector('a');\n    // \tif (aTag) self.setLinkProcess(aTag);\n    // })\n  },\n  passProcessAction: function (btn) {\n    let form = btn.closest('form');\n    if (!form) return;\n    let inputs = form.querySelectorAll('input, textarea, select');\n    let valueParams = [];\n    inputs.forEach(el => {\n      const pass_value_to = el.getAttribute('data-pass_value_to');\n      const value = el.value;\n\n      if (pass_value_to) {\n        valueParams.push({\n          pass_value_to: pass_value_to,\n          value: value\n        });\n      }\n    });\n\n    if (valueParams.length > 0) {\n      window.localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    }\n\n    this.__initPassValueParams(); // let aTag = btn.querySelector('a');\n    // if (aTag) this.setLinkProcess(aTag);\n    //. end event\n\n\n    document.dispatchEvent(new CustomEvent('passValueActionEnd', {\n      detail: {}\n    }));\n  },\n  setDataPassValues: function (values) {\n    const valueParams = [];\n\n    for (let key in values) {\n      valueParams.push({\n        pass_value_to: key,\n        value: values[key]\n      });\n    }\n\n    if (valueParams.length > 0) {\n      window.localStorage.setItem('valueParams', JSON.stringify(valueParams));\n    }\n  },\n  initDataPassValues: function () {\n    window.localStorage.removeItem('valueParams');\n  },\n  //. openAnother\n  openAnother: function (atag) {\n    var href = atag.getAttribute('href');\n    var target = atag.getAttribute('target');\n\n    if (target == \"_blank\") {\n      window.open(href, \"_blank\");\n    } else if (target == \"_window\") {\n      window.open(href, '_blank', 'location=yes,height=570,width=520,scrollbars=yes,status=yes');\n    } else {\n      window.open(href, \"_self\");\n    }\n  },\n  //. clickATaginButton\n  setLinkProcess: function (aTag) {\n    if (aTag.hasAttribute('data-actions')) {\n      return;\n    }\n\n    const pass_to = aTag.getAttribute('data-pass_to');\n    const href = aTag.getAttribute('href');\n    this.storePassData(aTag);\n\n    if (this.checkOpenCocreateModal(aTag)) {\n      if (typeof CoCreate.modal !== 'undefined') {\n        CoCreate.modal.open(aTag);\n      }\n    } else if (href) {\n      this.openAnother(aTag);\n    } else if (pass_to) {\n      this.__initPassParams(pass_to);\n    }\n  },\n  checkOpenCocreateModal: function (atag) {\n    if (atag.getAttribute('target') === \"modal\") {\n      return true;\n    }\n\n    return false;\n  },\n  passSubmitProcess: function (element) {\n    if (element.parentNode.classList.contains('submitBtn')) {\n      if (element.getAttribute('data-pass_to') && element.getAttribute('data-pass_document_id')) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return true;\n    }\n  },\n  __setGetValueProcess: function (id, value) {\n    if (!id) return;\n    var targets = document.querySelectorAll('[data-get_value=\"' + id + '\"]');\n    targets.forEach(target => {\n      // target.value = value;\n      if (typeof target.value != \"undefined\") {\n        target.value = value;\n      } else if (typeof target.textContent != \"undefined\") {\n        target.textContent = value;\n      }\n\n      if (CoCreate.floatingLabel) CoCreate.floatingLabel.update(target);\n      target.dispatchEvent(new Event(\"input\", {\n        \"bubbles\": true\n      }));\n\n      if (target.classList.contains('searchInput')) {\n        let evt = new KeyboardEvent('keydown', {\n          'keyCode': 13\n        });\n        target.dispatchEvent(evt);\n      }\n    });\n  },\n  __initPassItems: function (id, selector, noFetch) {\n    const self = this;\n\n    if (id) {\n      let elements = document.querySelectorAll(selector);\n      elements.forEach(el => {\n        self.__setAttributeValueOfElement(el, 'data-document_id', id); // self.__setAttributeValueOfElement(el, 'data-fetch_document_id', id);\n\n\n        self.__setAttributeValueOfElement(el, 'data-filter_value', id);\n      });\n    }\n  }\n};\nCoCreateLogic.init();\n\n_observer.default.init({\n  name: 'CoCreateAttributes',\n  observe: ['subtree', 'childList'],\n  include: '[data-for]',\n  callback: function (mutation) {\n    CoCreateLogic.attributes.initElement(mutation.target);\n  }\n});\n\n_observer.default.init({\n  name: 'CoCreateLogic',\n  observe: ['subtree', 'childList'],\n  include: '[data-pass_id]',\n  callback: function (mutation) {\n    CoCreateLogic.initElement(mutation.target);\n  }\n});\n\n_action.default.init({\n  action: \"passValueAction\",\n  endEvent: \"passValueActionEnd\",\n  callback: (btn, data) => {\n    CoCreateLogic.passProcessAction(btn);\n  }\n});\n\nvar _default = CoCreateLogic;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-logic/src/index.js\n")}}]);