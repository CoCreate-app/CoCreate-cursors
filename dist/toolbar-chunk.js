/*! For license information please see toolbar-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["toolbar-chunk"],{"../CoCreate-toolbar/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _utils = __webpack_require__(/*! @cocreate/utils */ "../CoCreate-utils/src/index.js");\n\n/**\n * returns the absolute position of an element regardless of position/float issues\n * @param {HTMLElement} el - element to return position for \n * @returns {object} { x: num, y: num }\n */\n\n/*global ResizeObserver*/\nfunction getPosition(el) {\n  let {\n    x,\n    y\n  } = el.getBoundingClientRect();\n  return {\n    left: x,\n    top: y\n  }; // var x = 0,\n  //     y = 0;\n  // while (el != null && (el.tagName || \'\').toLowerCase() != \'html\') {\n  //     x += el.offsetLeft || 0; \n  //     y += el.offsetTop || 0;\n  //     el = el.offsetParent;\n  // }\n  // return { left: parseInt(x, 10), top: parseInt(y, 10) };\n}\n\nlet toolbars = {};\n\nfunction CoCreateToolbar({\n  selector,\n  eventType,\n  document: sDoc,\n  config,\n  configKey\n}) {\n  let Window,\n      Document,\n      frameElement,\n      frame = sDoc.defaultView ? sDoc.defaultView.frameElement : sDoc.ccdefaultView.frameElement;\n\n  if (!frame) {\n    frameElement = frame.contentWindow.document.body;\n    Document = document;\n    Window = window;\n  } else {\n    frameElement = frame;\n    Window = frame.contentWindow;\n    Document = Window.document || Window.contentDocument;\n  }\n\n  let box = document.querySelector(selector);\n\n  if (box) {\n    toolbars[selector] = box;\n    let toolbar = box.querySelector(":scope .toolbar");\n    let tagName = box.querySelector(":scope [tagName]");\n    if (!toolbar) toolbar = {\n      offsetHeight: 0\n    };\n    let initiated = false;\n    let continer = {};\n    let watch;\n    Document.addEventListener(eventType, e => {\n      continer.lastElement = continer.element;\n      continer.element = e.target;\n      update();\n    });\n    Window.addEventListener("scroll", () => continer.element && update(continer.element));\n\n    function update(dontWatch) {\n      //  if (!initiated) {\n      //      initiated = true;\n      //      Window.addEventListener("scroll",\n      //          () =>\n      //          continer.element && update(continer.element)\n      //      );\n      //  }\n      if (!dontWatch) {\n        if (watch) watch.unobserve(continer.lastElement);\n        watch = new ResizeObserver(() => continer.element && update(true));\n        watch.observe(continer.element);\n      }\n\n      (0, _utils.configExecuter)(continer.element, configKey, (element, config, isSelector) => {\n        if (isSelector) {\n          let selector = config[configKey];\n\n          if (!toolbars[selector]) {\n            box = document.querySelector(selector);\n            toolbars[selector] = box;\n            toolbar = box.querySelector(":scope .toolbar");\n            tagName = box.querySelector(":scope [tagName]");\n          }\n        }\n\n        let elPosition = getPosition(element);\n        box.style.display = "block";\n        box.style.top = frameElement.offsetTop + elPosition.top - Window.scrollY - toolbar.offsetHeight + "px";\n        box.style.left = frameElement.offsetLeft + elPosition.left + Window.scrollX + "px";\n        box.style.width = element.offsetWidth + "px";\n        box.style.height = element.offsetHeight + "px";\n        if (element.offsetTop - toolbar.offsetHeight < 0) box.setAttribute("toolbar-overflow", "");else box.removeAttribute("toolbar-overflow");\n\n        if (tagName && tagName.innerHTML !== element.tagName) {\n          tagName.innerHTML = element.tagName; // for (let config of elementConfig) {\n          //   if (config.tagName && element.matches(config.selector)) {\n          //     if (tagName.innerHTML !== config.tagName)\n          //       tagName.innerHTML = config.tagName;\n          //     break;\n          //   }\n          // }\n\n          if (config.tagName && config.tagName !== tagName.innerHTML) {\n            tagName.innerHTML = config.tagName;\n          }\n        }\n      }, config);\n    }\n  }\n}\n\nvar _default = {\n  init: CoCreateToolbar\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-toolbar/src/index.js\n')}}]);