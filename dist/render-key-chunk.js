/*! For license information please see render-key-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["render-key-chunk"],{"../CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socketClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket-client */ "../CoCreate-socket-client/src/index.js"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ "../CoCreate-action/src/index.js"));\n\nvar _render = _interopRequireDefault(__webpack_require__(/*! @cocreate/render */ "../CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet socketApi = new _socketClient.default(\'api\');\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n      socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _action.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n    socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _render.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      socketApi.setGlobalScope(namespace);\n    } else {\n      socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-api/src/index.js\n')},"../CoCreate-render-key/src/index.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _api = _interopRequireDefault(__webpack_require__(/*! @cocreate/api */ \"../CoCreate-api/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateRenderKey = {\n  id: 'key',\n  actions: ['renderKey'],\n  action_renderKey: function (element) {\n    const container = element.closest(\"form\") || document;\n\n    let data = _api.default.getFormData(this.id, 'renderKey', container);\n\n    console.log(data);\n\n    _api.default.render('renderKey', {\n      data: data\n    });\n  }\n};\n\n_api.default.init({\n  name: CoCreateRenderKey.id,\n  module: CoCreateRenderKey\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLXJlbmRlci1rZXkvc3JjL2luZGV4LmpzPzg0ZTkiXSwibmFtZXMiOlsiQ29DcmVhdGVSZW5kZXJLZXkiLCJpZCIsImFjdGlvbnMiLCJhY3Rpb25fcmVuZGVyS2V5IiwiZWxlbWVudCIsImNvbnRhaW5lciIsImNsb3Nlc3QiLCJkb2N1bWVudCIsImRhdGEiLCJDb0NyZWF0ZUFwaSIsImdldEZvcm1EYXRhIiwiY29uc29sZSIsImxvZyIsInJlbmRlciIsImluaXQiLCJuYW1lIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBRUEsTUFBTUEsaUJBQWlCLEdBQUc7QUFDekJDLElBQUUsRUFBRSxLQURxQjtBQUV6QkMsU0FBTyxFQUFFLENBQ1IsV0FEUSxDQUZnQjtBQU16QkMsa0JBQWdCLEVBQUUsVUFBU0MsT0FBVCxFQUFrQjtBQUNuQyxVQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQ0UsT0FBUixDQUFnQixNQUFoQixLQUEyQkMsUUFBN0M7O0FBQ0EsUUFBSUMsSUFBSSxHQUFHQyxhQUFZQyxXQUFaLENBQXdCLEtBQUtULEVBQTdCLEVBQWlDLFdBQWpDLEVBQStDSSxTQUEvQyxDQUFYOztBQUNBTSxXQUFPLENBQUNDLEdBQVIsQ0FBWUosSUFBWjs7QUFDQUMsaUJBQVlJLE1BQVosQ0FBbUIsV0FBbkIsRUFBZ0M7QUFBQ0wsVUFBSSxFQUFFQTtBQUFQLEtBQWhDO0FBQ0E7QUFYd0IsQ0FBMUI7O0FBZUFDLGFBQVlLLElBQVosQ0FBaUI7QUFDaEJDLE1BQUksRUFBRWYsaUJBQWlCLENBQUNDLEVBRFI7QUFFaEJlLFFBQU0sRUFBRWhCO0FBRlEsQ0FBakIiLCJmaWxlIjoiLi4vQ29DcmVhdGUtcmVuZGVyLWtleS9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29DcmVhdGVBcGkgZnJvbSAnQGNvY3JlYXRlL2FwaSdcblxuY29uc3QgQ29DcmVhdGVSZW5kZXJLZXkgPSB7XG5cdGlkOiAna2V5Jyxcblx0YWN0aW9uczogW1xuXHRcdCdyZW5kZXJLZXknXG5cdF0sXG5cdFxuXHRhY3Rpb25fcmVuZGVyS2V5OiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0Y29uc3QgY29udGFpbmVyID0gZWxlbWVudC5jbG9zZXN0KFwiZm9ybVwiKSB8fCBkb2N1bWVudDtcblx0XHRsZXQgZGF0YSA9IENvQ3JlYXRlQXBpLmdldEZvcm1EYXRhKHRoaXMuaWQsICdyZW5kZXJLZXknLCAgY29udGFpbmVyKTtcblx0XHRjb25zb2xlLmxvZyhkYXRhKVxuXHRcdENvQ3JlYXRlQXBpLnJlbmRlcigncmVuZGVyS2V5Jywge2RhdGE6IGRhdGF9KTtcblx0fVxufVxuXG5cbkNvQ3JlYXRlQXBpLmluaXQoe1xuXHRuYW1lOiBDb0NyZWF0ZVJlbmRlcktleS5pZCxcblx0bW9kdWxlOiBDb0NyZWF0ZVJlbmRlcktleVxufSkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../CoCreate-render-key/src/index.js\n")}}]);