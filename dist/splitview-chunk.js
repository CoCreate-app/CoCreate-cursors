/*! For license information please see splitview-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["splitview-chunk"],{"../CoCreate-splitview/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n__webpack_require__(/*! ./CoCreate-splitview.css */ \"../CoCreate-splitview/src/CoCreate-splitview.css\");\n\nvar splitterHorizontalArray = document.getElementsByClassName(\"svSplitter svHorizontal\");\nvar splitterVerticalArray = document.getElementsByClassName(\"svSplitter svVertical\");\n\nfor (let i = 0; i < splitterHorizontalArray.length; i++) {\n  splitterHorizontalArray[i].addEventListener('mousedown', initDragHorizontal, false);\n  splitterHorizontalArray[i].addEventListener('touchstart', initDragHorizontal, false);\n}\n\nfor (let i = 0; i < splitterVerticalArray.length; i++) {\n  splitterVerticalArray[i].addEventListener('mousedown', initDragVertical, false);\n  splitterVerticalArray[i].addEventListener('touchstart', initDragVertical, false);\n}\n\nvar thisSplitter, myFamily, myPosition, myAboveDiv, myBelowDiv, myLeftDiv, myRightDiv, startMouseX, startTouchX, startMouseY, startTouchY, startHeightAbove, startHeightBelow, startWidthLeft, startWidthRight, startWindowWidth, beforeScreenResizeWidthLeft, beforeScreenResizeWidthRight, totalWidth, totalHeight, totalDiv, svColumnDivArr, svColumnDivWidthArray, svPanelDivArr, svPanelDivHeightArr, containerDiv, containerDivWidth, containerDivHeight, minMoveLimit, maxMoveLimit, mySplitterFamily, mySplitterPosition, restSplitterBelowHeight, restSplitterAboveHeight, restSplitterRightWidth, restSplitterleftWidth; //////////////////////////////// Horizontal Resizing ////////////////////////\n\nfunction initDragHorizontal(e) {\n  thisSplitter = e.target;\n  totalHeight = parseInt(document.defaultView.getComputedStyle(e.path[1]).height, 10);\n  /*myFamily: Above, Splitter, Below Divs*/\n\n  myFamily = [];\n\n  for (let i = 0; i < e.path[1].children.length; i++) {\n    myFamily.push(e.path[1].children[i]);\n  }\n\n  svPanelDivArr = [];\n  myFamily.forEach(family => {\n    if (family.classList.contains(\"svPanel\")) svPanelDivArr.push(family);\n  });\n  svPanelDivHeightArr = [];\n  svPanelDivArr.forEach(panel => {\n    svPanelDivHeightArr.push(parseInt(document.defaultView.getComputedStyle(panel).height, 10));\n  });\n  /*Dont allow other divs move together*/\n\n  for (let i = 0; i < svPanelDivArr.length; i++) {\n    svPanelDivArr[i].style.minHeight = svPanelDivHeightArr[i] * 100 / totalHeight + '%';\n    svPanelDivArr[i].style.pointerEvents = \"none\";\n  }\n\n  e.path.forEach(element => {\n    if (element.classList && element.classList.contains(\"container\")) containerDiv = element;\n  });\n  containerDivHeight = parseInt(document.defaultView.getComputedStyle(containerDiv).height, 10);\n  myPosition = myFamily.indexOf(thisSplitter);\n  myAboveDiv = myFamily[myPosition - 1];\n  myBelowDiv = myFamily[myPosition + 1];\n  /*My Splitter Group*/\n\n  mySplitterFamily = [];\n  myFamily.forEach(family => {\n    if (family.classList.contains(\"svSplitter\") && family.classList.contains(\"svHorizontal\")) mySplitterFamily.push(family);\n  });\n  mySplitterPosition = mySplitterFamily.indexOf(thisSplitter); // restSplitterBelowHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)*(mySplitterFamily.length-mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)/2;\n  // restSplitterAboveHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)*(mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).height,10)/2;\n\n  /*Splitter own heights*/\n\n  restSplitterBelowHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height, 10) * (mySplitterFamily.length - mySplitterPosition - 1);\n  restSplitterAboveHeight = parseInt(document.defaultView.getComputedStyle(thisSplitter).height, 10) * mySplitterPosition;\n  if (e.type == \"mousedown\") startMouseY = e.clientY;\n  if (e.type == \"touchstart\") startTouchY = e.touches[0].clientY;\n  startHeightAbove = parseInt(document.defaultView.getComputedStyle(myAboveDiv).height, 10);\n  startHeightBelow = parseInt(document.defaultView.getComputedStyle(myBelowDiv).height, 10);\n  minMoveLimit = startMouseY - startHeightAbove;\n  maxMoveLimit = startMouseY + startHeightBelow;\n  document.documentElement.addEventListener('mousemove', doDragHorizontal, false);\n  document.documentElement.addEventListener('mouseup', stopDragHorizontal, false);\n  document.documentElement.addEventListener('touchmove', doDragHorizontal, false);\n  document.documentElement.addEventListener('touchend', stopDragHorizontal, false);\n}\n\nfunction doDragHorizontal(e) {\n  if (e.type == \"mousemove\" && e.clientY > minMoveLimit && e.clientY < maxMoveLimit && e.clientY > restSplitterAboveHeight + 15 && e.clientY < containerDivHeight + 15 - restSplitterBelowHeight) {\n    myAboveDiv.style.minHeight = (startHeightAbove + e.clientY - startMouseY) * 100 / totalHeight + '%';\n    myBelowDiv.style.minHeight = (startHeightBelow - e.clientY + startMouseY) * 100 / totalHeight + '%';\n  }\n\n  if (e.type == \"touchmove\" && e.touches[0].clientY > startTouchY - startHeightAbove && e.touches[0].clientY < startTouchY + startHeightBelow && e.touches[0].clientY > restSplitterAboveHeight + 15 && e.touches[0].clientY < containerDivHeight + 15 - restSplitterBelowHeight) {\n    myAboveDiv.style.minHeight = (startHeightAbove + e.touches[0].clientY - startTouchY) * 100 / totalHeight + '%';\n    myBelowDiv.style.minHeight = (startHeightBelow - e.touches[0].clientY + startTouchY) * 100 / totalHeight + '%';\n  }\n}\n\nfunction stopDragHorizontal(e) {\n  for (let i = 0; i < svPanelDivArr.length; i++) {\n    svPanelDivArr[i].style.pointerEvents = \"auto\";\n  }\n\n  document.documentElement.removeEventListener('mousemove', doDragHorizontal, false);\n  document.documentElement.removeEventListener('mouseup', stopDragHorizontal, false);\n  document.documentElement.removeEventListener('touchmove', doDragHorizontal, false);\n  document.documentElement.removeEventListener('touchend', stopDragHorizontal, false);\n} //////////////////////////////// Vertical Resizing //////////////////////////\n\n\nfunction initDragVertical(e) {\n  thisSplitter = e.target;\n  totalDiv = e.path[1];\n  totalWidth = parseInt(document.defaultView.getComputedStyle(totalDiv).width, 10);\n  myFamily = [];\n\n  for (let i = 0; i < e.path[1].children.length; i++) {\n    myFamily.push(e.path[1].children[i]);\n  }\n\n  svColumnDivArr = [];\n  myFamily.forEach(family => {\n    if (family.classList.contains(\"svColumn\")) {\n      svColumnDivArr.push(family);\n    }\n  });\n  svColumnDivWidthArray = [];\n  svColumnDivArr.forEach(svColumnDiv => {\n    svColumnDivWidthArray.push(parseInt(document.defaultView.getComputedStyle(svColumnDiv).width, 10));\n  });\n\n  for (let i = 0; i < svColumnDivArr.length; i++) {\n    svColumnDivArr[i].style.minWidth = svColumnDivWidthArray[i] * 100 / totalWidth + '%';\n    svColumnDivArr[i].style.pointerEvents = \"none\";\n  }\n\n  e.path.forEach(element => {\n    if (element.classList && element.classList.contains(\"svColumn\")) containerDiv = element;\n  });\n  containerDivWidth = parseInt(document.defaultView.getComputedStyle(containerDiv).width, 10);\n  myPosition = myFamily.indexOf(thisSplitter);\n  myLeftDiv = myFamily[myPosition - 1];\n  myRightDiv = myFamily[myPosition + 1];\n  mySplitterFamily = [];\n  myFamily.forEach(family => {\n    if (family.classList.contains(\"svSplitter\") && family.classList.contains(\"svVertical\")) mySplitterFamily.push(family);\n  });\n  mySplitterPosition = mySplitterFamily.indexOf(thisSplitter); // restSplitterRightWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)*(mySplitterFamily.length-mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)/2;\n  // restSplitterleftWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)*(mySplitterPosition)+parseInt(document.defaultView.getComputedStyle(thisSplitter).width,10)/2;\n\n  restSplitterRightWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width, 10) * (mySplitterFamily.length - mySplitterPosition - 1);\n  restSplitterleftWidth = parseInt(document.defaultView.getComputedStyle(thisSplitter).width, 10) * mySplitterPosition;\n  if (e.type == \"mousedown\") startMouseX = e.clientX;\n  if (e.type == \"touchstart\") startTouchX = e.touches[0].clientX;\n  startWindowWidth = window.innerWidth;\n  startWidthLeft = parseInt(document.defaultView.getComputedStyle(myLeftDiv).width, 10);\n  startWidthRight = parseInt(document.defaultView.getComputedStyle(myRightDiv).width, 10);\n  minMoveLimit = startMouseX - startWidthLeft;\n  maxMoveLimit = startMouseX + startWidthRight;\n  document.documentElement.addEventListener('mousemove', doDragVertical, false);\n  document.documentElement.addEventListener('mouseup', stopDragVertical, false);\n  document.documentElement.addEventListener('touchmove', doDragVertical, false);\n  document.documentElement.addEventListener('touchend', stopDragVertical, false);\n  window.addEventListener('resize', doDragVertical, false);\n}\n\nfunction doDragVertical(e) {\n  if (e.type == \"mousemove\" && e.clientX > minMoveLimit && e.clientX < maxMoveLimit && e.clientX > restSplitterleftWidth + 15 && e.clientX < containerDivWidth + 15 - restSplitterRightWidth) {\n    myLeftDiv.style.minWidth = (startWidthLeft + e.clientX - startMouseX) * 100 / totalWidth + '%';\n    myRightDiv.style.minWidth = (startWidthRight - e.clientX + startMouseX) * 100 / totalWidth + '%';\n    beforeScreenResizeWidthLeft = parseInt(startWidthLeft + e.clientX - startMouseX, 10);\n    beforeScreenResizeWidthRight = parseInt(startWidthRight - e.clientX + startMouseX, 10);\n  }\n\n  if (e.type == \"touchmove\" && e.touches[0].clientX > startTouchX - startWidthLeft && e.touches[0].clientX < startTouchX + startWidthRight && e.touches[0].clientX > restSplitterleftWidth + 15 && e.touches[0].clientX < containerDivWidth + 15 - restSplitterRightWidth) {\n    myLeftDiv.style.minWidth = (startWidthLeft + e.touches[0].clientX - startTouchX) * 100 / totalWidth + '%';\n    myRightDiv.style.minWidth = (startWidthRight - e.touches[0].clientX + startTouchX) * 100 / totalWidth + '%';\n    beforeScreenResizeWidthLeft = parseInt(startWidthLeft + e.touches[0].clientX - startTouchX, 10);\n    beforeScreenResizeWidthRight = parseInt(startWidthRight - e.touches[0].clientX + startTouchX, 10);\n  }\n\n  if (e.type == \"resize\") {\n    if (window.innerWidth < startWindowWidth) myLeftDiv.style.width = (beforeScreenResizeWidthLeft - (startWindowWidth - window.innerWidth)) * 100 / totalWidth + '%';\n    if (window.innerWidth > startWindowWidth) myLeftDiv.style.width = (beforeScreenResizeWidthRight + (window.innerWidth - startWindowWidth)) * 100 / totalWidth + '%';\n  } // myLeftDiv.classList.remove(\"svPanel\")\n  // myRightDiv.classList.remove(\"svPanel\")\n\n}\n\nfunction stopDragVertical(e) {\n  for (let i = 0; i < svColumnDivArr.length; i++) {\n    svColumnDivArr[i].style.pointerEvents = \"auto\";\n  }\n\n  document.documentElement.removeEventListener('mousemove', doDragVertical, false);\n  document.documentElement.removeEventListener('mouseup', stopDragVertical, false);\n  document.documentElement.removeEventListener('touchmove', doDragVertical, false);\n  document.documentElement.removeEventListener('touchend', stopDragVertical, false);\n}\n\nvar _default = {\n  initDragHorizontal,\n  doDragHorizontal,\n  stopDragHorizontal,\n  initDragVertical,\n  doDragVertical,\n  stopDragVertical\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-splitview/src/index.js\n")},"../../node_modules/file-loader/dist/cjs.js!../CoCreate-splitview/src/CoCreate-splitview.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "b4c0477e8af30d652d64322bd11ab655.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLXNwbGl0dmlldy9zcmMvQ29DcmVhdGUtc3BsaXR2aWV3LmNzcz8yMWVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxxQkFBdUIseUNBQXlDIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy9maWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9Db0NyZWF0ZS1zcGxpdHZpZXcvc3JjL0NvQ3JlYXRlLXNwbGl0dmlldy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjRjMDQ3N2U4YWYzMGQ2NTJkNjQzMjJiZDExYWI2NTUuY3NzXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/file-loader/dist/cjs.js!../CoCreate-splitview/src/CoCreate-splitview.css\n')},"../CoCreate-splitview/src/CoCreate-splitview.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_CoCreate_splitview_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/file-loader/dist/cjs.js!./CoCreate-splitview.css */ "../../node_modules/file-loader/dist/cjs.js!../CoCreate-splitview/src/CoCreate-splitview.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_CoCreate_splitview_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLXNwbGl0dmlldy9zcmMvQ29DcmVhdGUtc3BsaXR2aWV3LmNzcz9jYzhkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEY7QUFDOUYsWUFBMkc7O0FBRTNHLGVBQWU7O0FBRWY7O0FBRUEsYUFBYSx5R0FBRyxDQUFDLGlHQUFPOzs7O0FBSXhCLGlFQUFlLEUiLCJmaWxlIjoiLi4vQ29DcmVhdGUtc3BsaXR2aWV3L3NyYy9Db0NyZWF0ZS1zcGxpdHZpZXcuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9MaW5rVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanMhLi9Db0NyZWF0ZS1zcGxpdHZpZXcuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge1wiaW5qZWN0VHlwZVwiOlwibGlua1RhZ1wifTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IHt9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-splitview/src/CoCreate-splitview.css\n')}}]);