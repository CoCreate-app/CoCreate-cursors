(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["cursors"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["cursors"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../CoCreate-components/CoCreate-cursors/src/CoCreate-cursors.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../CoCreate-components/CoCreate-cursors/src/CoCreate-cursors.js":
/*!***********************************************************************!*\
  !*** ../CoCreate-components/CoCreate-cursors/src/CoCreate-cursors.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ \"../node_modules/@babel/runtime/helpers/classCallCheck.js\");\n/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ \"../node_modules/@babel/runtime/helpers/createClass.js\");\n/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n/**Uso esta variable para mostrar errores en caso que no este en prod*/\nvar element_multicursors = document.querySelectorAll('input,textarea,[contenteditable]'); //console.log(element_multicursors)\n\nvar debug = false;\nvar enviroment_prod = true;\nvar properties = ['boxSizing', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing', 'textRendering', 'webkitWritingMode', 'textTransform', 'textIndent', 'overflowWrap'];\nvar length_uuid = 30;\n\nvar CocreateUtilsCursor = /*#__PURE__*/function () {\n  function CocreateUtilsCursor() {\n    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CocreateUtilsCursor);\n  }\n\n  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CocreateUtilsCursor, null, [{\n    key: \"print\",\n    value: function print(message, debug) {\n      debug = debug || false;\n      if (debug) console.log(message);\n    }\n  }, {\n    key: \"generateUUID\",\n    value: function generateUUID() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var d = new Date().getTime();\n      var d2 = performance && performance.now && performance.now() * 1000 || 0; //Time in microseconds since page-load or 0 if unsupported\n\n      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16;\n\n        if (d > 0) {\n          var r = (d + r) % 16 | 0;\n          d = Math.floor(d / 16);\n        } else {\n          var r = (d2 + r) % 16 | 0;\n          d2 = Math.floor(d2 / 16);\n        }\n\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n\n      if (length != null) {\n        uuid = uuid.substr(0, length);\n      }\n\n      return uuid;\n    }\n  }]);\n\n  return CocreateUtilsCursor;\n}();\n\nvar getParents = function getParents(elem, selector) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n          i = matches.length;\n\n      while (--i >= 0 && matches.item(i) !== this) {}\n\n      return i > -1;\n    };\n  }\n};\n\nvar mirrorDiv, computed, style, computedParentElement;\n\nvar getCaretCoordinates = function getCaretCoordinates(element, position_start, position_end) {\n  // mirrored div\n  var name = element.getAttribute('name');\n  var document_id = element.getAttribute('data-document_id') || '';\n\n  if (document_id == '') {\n    return false;\n  }\n\n  var ID_MIRROR = element.dataset['mirror_id']; //document_id + name +  '--mirror-div';\n\n  mirrorDiv = document.getElementById(ID_MIRROR);\n  var add_class_scroll = element.className.indexOf('floating-label') == -1 ? false : true;\n\n  if (!mirrorDiv) {\n    mirrorDiv = document.createElement('div');\n    mirrorDiv.id = ID_MIRROR; //document_id +name+ '--mirror-div';\n\n    mirrorDiv.className = enviroment_prod ? 'mirror_color mirror_scroll mirror-width-scroll' : 'mirror-width-scroll'; //document.body.appendChild(mirrorDiv);\n\n    element.insertAdjacentElement('afterend', mirrorDiv);\n  }\n\n  var scrollwidth = element.offsetWidth - element.scrollWidth;\n  style = mirrorDiv.style;\n  computed = getComputedStyle(element);\n  computedParentElement = getComputedStyle(element.parentElement);\n  var margin_top = parseInt(computed['marginTop']);\n  var margin_left = parseInt(computed['marginLeft']);\n\n  if (element.nodeName !== 'INPUT') {\n    style.wordWrap = 'break-word'; // only for textarea-s\n\n    style.whiteSpace = 'pre-wrap';\n  } else {\n    style.whiteSpace = 'pre';\n  } // position off-screen\n\n\n  style.position = 'absolute'; // required to return coordinates properly\n\n  var rect = element.getBoundingClientRect(); // get Position from element\n\n  var scrrollTop_browser = document.documentElement.scrollTop; //style.top = ((rect.top+scrrollTop_browser)-1) - (parseInt(computed['marginTop']) - parseInt(computed['borderTopWidth']) ) + 'px'//parseInt(computed.borderTopWidth) + 'px'; //  element.offsetTop + parseInt(computed.borderTopWidth) + 'px';\n  //style.top = computedParentElement['top'];\n\n  style.top = element.offsetTop + 'px'; //style.left = rect.left - (parseInt(computed['marginLeft']) -  parseInt(computed['borderLeftWidth']) ) + 'px'//parseInt(computed.borderLeftWidth) + 'px'   // margin_left+\"px\";//\"400px\";\n  //style.left =  computedParentElement['left'];\n\n  style.left = element.offsetLeft + 'px';\n  style.width = rect.width + 'px'; // - (parseInt(computed.borderLeftWidth) + parseInt(computed.borderRightWidth)) + 'px'   // margin_left+\"px\";//\"400px\";\n\n  style.height = rect.height + 'px'; // - (parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth)) + 'px'   // margin_left+\"px\";//\"400px\";\n\n  style.visibility = 'visible';\n  properties.forEach(function (prop) {\n    if (['left', 'top'].indexOf(prop.toLowerCase()) === -1) style[prop] = computed[prop];\n  });\n  style.overflowX = 'auto';\n  style.overflowY = 'hidden';\n  style.margin = '0px'; //style.padding = '0px'\n\n  style.border = computed['border'];\n  style.borderColor = 'transparent';\n  /* \n  if(element.nodeName.toLowerCase()=='input'){\n   style.overflowX ='auto';\n   style.overflowY ='hidden';\n  }else{\n   style.overflow=\"visible\"\n  }*/\n  // style.paddingRight = (parseInt(style.paddingRight) + scrollwidth - parseInt(computed.borderRightWidth)) +'px';\n\n  var cursor_container = mirrorDiv.querySelectorAll('.cursor-container');\n  var selectors_by_users = mirrorDiv.querySelectorAll('.selectors_by_users');\n  var value_element = ['TEXTAREA', 'INPUT'].indexOf(element.nodeName) == -1 ? element.innerHTML : element.value;\n  mirrorDiv.textContent = value_element.substring(0, position_start);\n  if (element.nodeName === 'INPUT') mirrorDiv.textContent = mirrorDiv.textContent.replace(/\\s/g, \"\\xA0\");\n  var span = document.createElement('span');\n  span.id = element.nodeName + 'span_selections';\n  var value_span = value_element.substring(position_start, position_end) || '';\n  span.textContent = value_span; // || because a completely empty faux span doesn't render at all\n  //span.style.backgroundColor = \"lightgrey\";\n\n  mirrorDiv.appendChild(span);\n\n  if (cursor_container) {\n    cursor_container.forEach(function (child_cursor, index, array) {\n      mirrorDiv.appendChild(child_cursor);\n    });\n  }\n\n  if (selectors_by_users) {\n    selectors_by_users.forEach(function (child_selection, index, array) {\n      mirrorDiv.appendChild(child_selection);\n    });\n  }\n\n  var value_end = value_element.substring(position_end) || '';\n  var span_end = document.createElement('span');\n  mirrorDiv.appendChild(span_end);\n  span_end.textContent = value_end;\n  var rect = element.getBoundingClientRect(); // get Position from element\n\n  var coordinates = {\n    start: {\n      top: span.offsetTop,\n      left: span.offsetLeft\n    },\n    end: {\n      top: span_end.offsetTop,\n      //+ parseInt(computed['borderTopWidth']),\n      left: span_end.offsetLeft // + parseInt(computed['borderLeftWidth'])\n\n    }\n  };\n  return coordinates;\n};\n\nfunction getStyle(el, styleProp) {\n  if (window.getComputedStyle) var y = document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  return y;\n}\n\nfunction getDocument(collection, module_id) {\n  CoCreate.crud.readDocument({\n    'collection': collection,\n    'document_id': module_id\n  });\n}\n\nCoCreate.socket.listen('readDocument', function (data) {\n  var cursor = document.querySelector('.cursor-flag[data-document_id=\"' + data['document_id'] + '\"]');\n  if (cursor) cursor.innerHTML = data.result[cursor.getAttribute('name')];\n});\n\nfunction draw_cursor(json) {\n  CocreateUtilsCursor.print([\"draw Cursor \", json], debug);\n  var element = json['element'];\n  var activate_cursor = element.dataset['cursors'] ? element.dataset['mirror_id'] : true;\n\n  if (activate_cursor) {\n    var start = json['startPosition'];\n    var end = json['endPositon'];\n    var socket_id = json['clientId'];\n    var document_id = element.getAttribute('data-document_id') || '';\n\n    if (document_id != '') {\n      CocreateUtilsCursor.print(\"action document_id \" + document_id, debug);\n      if (typeof element.dataset['mirror_id'] == 'undefined' || element.dataset['mirror_id'] == '') element.dataset['mirror_id'] = CocreateUtilsCursor.generateUUID(length_uuid);\n      var coordinates = getCaretCoordinates(element, start, end);\n      if (!coordinates) return false;\n\n      var _name = element.getAttribute('name');\n\n      var id_mirror = element.dataset['mirror_id']; //document_id+name+'--mirror-div'\n\n      var mi_mirror = document.getElementById(id_mirror);\n      var cursor = false;\n      var selection_user = false;\n      var identify = '_' + id_mirror;\n      var user = typeof json != 'undefined' && json.hasOwnProperty('user') ? json.user : false;\n      var user_id = typeof json != 'undefined' && json.hasOwnProperty('user_id') ? user.user_id : false;\n\n      if (socket_id) {\n        //if(data && data.hasOwnProperty('id_mirror')){\n        var cursores_other_elements = document.querySelectorAll('#socket_' + socket_id + identify);\n        cursores_other_elements.forEach(function (child_cursor, index, array) {\n          if (child_cursor.parentElement.getAttribute('id') != id_mirror) {\n            CocreateUtilsCursor.print(\"remove old cursor others elements\", debug);\n            child_cursor.remove();\n          }\n        }); //}\n\n        cursor = mi_mirror.querySelector('.cursor-container#socket_' + socket_id + identify);\n\n        if (!cursor && json.hasOwnProperty('user')) {\n          if (user) {\n            CocreateUtilsCursor.print(\"Create Cursor\", debug);\n            var cursor_template = '<div style=\"color:blue;\" class=\"cursor-container\" \\\n                                                  id=\"socket_' + socket_id + identify + '\" \\\n                                                  ><div class=\"cursor\" \\\n                                                  style=\"background-color:' + user.color + '\"></div>\\\n                                                  <div class=\"cursor-flag\" data-collection=\"users\" \\\n                                                  name=\"name\" \\\n                                                  data-user_name=\"' + user.name + '\" \\\n                                                  data-user_color=\"' + user.color + '\" \\\n                                                  data-socket_id=\"' + socket_id + '\" \\\n                                                  data-id_mirror=\"' + id_mirror + '\" \\\n                                                  data-document_id=\"' + user_id + '\" \\\n                                                  style=\"background-color:' + user.color + '\" \\\n                                                  flag>' + user.name + '</div></div>';\n            mi_mirror.innerHTML = cursor_template + mi_mirror.innerHTML;\n          }\n\n          if (user_id) {\n            // si tiene user_id actualiza el nombre del cursor usando crud\n            CoCreate.crud.readDocument({\n              'collection': 'users',\n              'document_id': user_id\n            });\n          }\n        }\n\n        cursor = mi_mirror.querySelector('.cursor-container#socket_' + socket_id + identify);\n      }\n\n      if (cursor) {\n        CocreateUtilsCursor.print([\"Update Cursor\", cursor, coordinates], debug);\n        var font_size = getStyle(element, 'font-size');\n        font_size = parseFloat(font_size.substring(0, font_size.length - 2));\n        var cursor_height = font_size * 112.5 / 100;\n        var my_cursor = cursor.querySelector('.cursor');\n        cursor.dataset.start = start;\n        cursor.dataset.end = end;\n        cursor.dataset.socket_id = socket_id;\n        /*cursor.dataset.user_name = user.name\n        cursor.dataset.user_color = user.color*/\n\n        cursor.style[\"top\"] = coordinates.end.top + \"px\";\n        cursor.style[\"width\"] = \"2px\"; //2px\n\n        my_cursor.style[\"height\"] = cursor_height + \"px\";\n        cursor.style[\"left\"] = coordinates.end.left + \"px\"; //add selections\n\n        selection_user = document.getElementById('sel-' + socket_id + identify);\n\n        if (start != end && user) {\n          selection_user = document.getElementById('sel-' + socket_id + identify);\n\n          if (selection_user) {\n            selection_user.remove();\n          }\n\n          var scrollwidth = element.offsetWidth - element.scrollWidth;\n          var padding_right = parseInt(getComputedStyle(element)[\"paddingRight\"]);\n          selection_user = document.createElement('span');\n          selection_user.id = 'sel-' + socket_id + identify;\n          selection_user.className = 'selectors_by_users';\n          var style_mirror = getComputedStyle(mi_mirror);\n          selection_user.style[\"position\"] = \"absolute\";\n          selection_user.style[\"top\"] = style_mirror.paddingTop;\n          selection_user.style[\"left\"] = style_mirror.paddingLeft;\n          selection_user.style[\"padding-right\"] = scrollwidth + padding_right + \"px\";\n          mi_mirror.insertBefore(selection_user, mi_mirror.firstChild);\n          var selection_span_by_user = document.createElement('span');\n          selection_span_by_user.id = 'selection-' + socket_id + identify;\n          selection_span_by_user.style.backgroundColor = user.color;\n          var value_element = ['TEXTAREA', 'INPUT'].indexOf(element.nodeName) == -1 ? element.innerHTML : element.value;\n          selection_user.textContent = value_element.substring(0, start);\n          var value_span_selection = value_element.substring(start, end) || '';\n          console.log(\"Selection \", value_span_selection, start, end); //selection_span_by_user.style.opacity = 0.5;\n\n          selection_span_by_user.textContent = value_span_selection;\n          selection_user.appendChild(selection_span_by_user);\n        } //end Selections\n        else {\n            if (selection_user) {\n              selection_user.remove();\n            }\n          }\n      }\n    } //end if document_id\n\n  } //end activate_cursors\n\n} //draw_cursor\n\n\nfunction refresh_mirror(element) {\n  var id_mirror = '';\n  var document_id = element.getAttribute('data-document_id') || '';\n\n  if (document_id != '') {\n    name = element.getAttribute('name');\n    if (element.dataset['mirror_id']) id_mirror = element.dataset['mirror_id'];else return; //console.log(\"Refresh \",id_mirror)\n\n    var mi_mirror = document.getElementById(id_mirror);\n    CocreateUtilsCursor.print([\"refresh_mirror \", mi_mirror], debug);\n    var selector_element = element.nodeName + \"[name='\" + name + \"'][data-document_id='\" + document_id + \"']\";\n    CocreateUtilsCursor.print([\"selector -> \" + selector_element], debug);\n\n    if (mi_mirror) {\n      computed = getComputedStyle(element);\n      style = mi_mirror.style;\n      style.width = element.offsetWidth - (parseInt(computed.borderLeftWidth) + parseInt(computed.borderRightWidth)) + 'px';\n      style.height = element.offsetHeight - (parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth)) + 'px';\n      var cursor_container = mi_mirror.querySelectorAll('.cursor-container');\n      cursor_container.forEach(function (child_cursor, index, array) {\n        //console.log(\"REdraw cursor\")\n        var child = child_cursor.querySelector('.cursor-flag');\n        var dataset_child = child.dataset;\n        var dataset = child_cursor.dataset;\n        draw_cursor({\n          element: element,\n          startPosition: dataset.start,\n          endPositon: dataset.end,\n          clientId: dataset.socket_id,\n          user: {\n            'color': dataset_child.user_color,\n            'name': dataset.user_name\n          }\n        });\n      });\n    }\n  } //end document\n\n} //end verify \n\n\nElement.prototype.remove = function () {\n  if (this.parentElement) {\n    this.parentElement.removeChild(this);\n  }\n};\n\nfunction recalculate_local_cursors(element, count) {\n  CocreateUtilsCursor.print(\"count \" + count, debug);\n  var my_start = !element.hasAttribute('contenteditable') ? element.selectionStart : parseInt(element.getAttribute(\"selection_start\")); //let my_start   = element.selectionStart\n\n  var name = element.getAttribute('name') || '';\n  var document_id = element.getAttribute('data-document_id') || '';\n  var collection = element.getAttribute('data-collection') || '';\n  var selector = '[data-collection=\"' + collection + '\"][data-document_id=\"' + document_id + '\"][name=\"' + name + '\"]';\n  var id_mirror = element.dataset['mirror_id']; //let id_mirror = document_id+name+'--mirror-div';\n\n  var mirrorDiv = document.getElementById(id_mirror);\n  var cursor_container = mirrorDiv ? mirrorDiv.querySelectorAll('.cursor-container') : null;\n\n  if (cursor_container) {\n    var containers_cursors = [];\n    cursor_container.forEach(function (child_cursor, index, array) {\n      var start = parseInt(child_cursor.getAttribute('data-start'));\n      var user_name = child_cursor.getAttribute('data-user_name');\n      CocreateUtilsCursor.print([\"my_start local\", my_start, 'start cursor ' + user_name + \" = \", start], debug);\n\n      if (start > my_start && containers_cursors.indexOf(user_name) == -1) {\n        CocreateUtilsCursor.print(\"Es mayor\", debug);\n        var end = parseInt(child_cursor.getAttribute('data-end'));\n        var pos_start = start + count;\n        var pos_end = end + count;\n        CocreateUtilsCursor.print(['pos_start', pos_start, 'pos_end', pos_end], debug);\n        var dataset = child_cursor.querySelector('.cursor-flag').dataset;\n        var clientId = dataset.socket_id;\n        var json = {\n          element: element,\n          startPosition: pos_start,\n          endPositon: pos_end,\n          clientId: clientId,\n          'user': {\n            'color': dataset.user_color,\n            'name': dataset.user_name\n          }\n        };\n        CocreateUtilsCursor.print([\"sent Draw Cursor \", json], debug);\n        draw_cursor(json);\n        containers_cursors.push(user_name);\n      } //mirrorDiv.appendChild(child_cursor);\n\n    });\n  }\n}\n\nfunction initCursorEl(element) {\n  var formulario = getParents(element, 'form');\n  var realtime = element.hasAttribute('data-realtime') ? element.getAttribute('data-realtime') : 'true';\n\n  if (realtime == 'true' || formulario && formulario.getAttribute('data-realtime') == 'true') {\n    //resize\n    var outputsize = function outputsize() {\n      element_multicursors.forEach(function (element_for, index, array) {\n        var name = element_for.getAttribute('name');\n        var id_mirror = element.dataset['mirror_id'];\n        CocreateUtilsCursor.print([\"Resize id_mirror -> \" + id_mirror], debug);\n        var mi_mirror = document.getElementById(id_mirror);\n\n        if (mi_mirror) {\n          mi_mirror.style[\"width\"] = element_for.offsetWidth + \"px\";\n          mi_mirror.style[\"height\"] = element_for.offsetHeight + \"px\"; //var isFocused = (document.activeElement === element_for);\n          //verify_cursor(element_for,isFocused)\n\n          var isFocused = document.activeElement === element;\n          if (isFocused) getCaretCoordinates(element, element.selectionStart, element.selectionEnd);\n          refresh_mirror(element);\n        }\n      });\n    };\n\n    if (realtime == 'false') return false;\n    CocreateUtilsCursor.print([\"Init Events \", element], debug);\n    /*\n    element.addEventListener('input',function(event){\n        let start = element.selectionStart;\n        let end = element.selectionEnd;\n        let coordinates = getCaretCoordinates(element,start,end);\n        let count = 0;\n        switch(event.inputType){\n          case 'insertText':\n            count = 1;\n          break;\n          case 'insertFromPaste':\n           // count = event.clipboardData.getData('Text').length\n          break;\n          case 'deleteContentBackward':\n          //case 'insertFromPaste':\n            count = -1;\n          break;\n        }\n        if(count)\n          recalculate_local_cursors(this,count)\n    },false)\n    */\n\n    element.addEventListener('scroll', function () {\n      CocreateUtilsCursor.print([\"Move Scroll \", element], true);\n      var name = element.getAttribute('name');\n      var document_id = element.getAttribute('data-document_id') || '';\n      var id_mirror = element.dataset['mirror_id'];\n      var mi_mirror = document.getElementById(id_mirror);\n\n      if (mi_mirror) {\n        mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n      }\n    }, false);\n    new ResizeObserver(outputsize).observe(element); //if (element.nodeName == 'INPUT'){\n\n    element.addEventListener('mousemove', function (event) {\n      var name = element.getAttribute('name');\n      var document_id = element.getAttribute('data-document_id');\n      var id_mirror = element.dataset['mirror_id'];\n      var mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    });\n    element.addEventListener('focusout', function (event) {\n      var name = element.getAttribute('name');\n      var document_id = element.getAttribute('data-document_id') || '';\n      var id_mirror = element.dataset['mirror_id'];\n      var mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    });\n    element.addEventListener('keydown', function (event) {\n      //console.log(\"keydown L,T => \",element.scrollLeft,element.scrollTop)\n      var name = element.getAttribute('name');\n      var id_mirror = element.dataset['mirror_id'];\n      var mi_mirror = document.getElementById(id_mirror);\n\n      if (mi_mirror) {\n        mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n        refresh_mirror(element);\n      }\n    });\n    element.addEventListener('keyup', function (event) {\n      //console.log(\"keyup L,T => \",element.scrollLeft,element.scrollTop)\n      var name = element.getAttribute('name');\n      var id_mirror = element.dataset['mirror_id'];\n      var mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    }); //}\n  } //end if realtime TRUE\n\n}\n\nvar initialize_multicursor = function initialize_multicursor(element_multicursors) {\n  element_multicursors.forEach(function (element, index, array) {\n    initCursorEl(element);\n  }); // element_multicursors.forEach\n}; //end initialize_multicursor \n\n\nwindow.addEventListener('resize', function (e) {\n  //console.log(\"resize windows\")\n  document.querySelectorAll('[data-mirror_id]').forEach(function (element, index, array) {\n    refresh_mirror(element);\n  }); // element_multicursors.forEach\n}, true);\ndocument.addEventListener('scroll', function (e) {\n  //console.log(\"Scroll \")\n  //console.log(\"scroll windows\",document.body.scrollLeft,document.body.scrollTop)\n  //element_multicursors.forEach(function (element, index, array) {\n  document.querySelectorAll('[data-mirror_id]').forEach(function (element, index, array) {\n    refresh_mirror(element);\n  }); // element_multicursors.forEach\n}, true);\n\nfunction initCursorElements(container) {\n  var mainContainer = container || window;\n\n  if (!mainContainer.querySelectorAll) {\n    return;\n  }\n\n  var elements = mainContainer.querySelectorAll('[data-realtime=true]');\n  elements.forEach(function (el) {\n    initCursorEl(el);\n  });\n}\n\nif (debug) console.log(\"elements to INIT -> \", element_multicursors);\ninitialize_multicursor(element_multicursors); // CoCreateInit.register_old('[data-realtime=true]',initCursorEl);\n// CoCreateInit.register('CoCreateCursor', window, initCursorElements);\n\nCoCreate.observer.init({\n  name: 'CoCreateCursor',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name][data-realtime=true]',\n  callback: function callback(mutation) {\n    initCursorElements(mutation.target);\n  }\n});\nvar CoCreateCursors = {\n  draw_cursor: draw_cursor,\n  refresh_mirror: refresh_mirror,\n  recalculate_local_cursors: recalculate_local_cursors\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (CoCreateCursors);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-cursors/src/CoCreate-cursors.js\n");

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!****************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzPzQ4MzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@babel/runtime/helpers/classCallCheck.js\n");

/***/ }),

/***/ "../node_modules/@babel/runtime/helpers/createClass.js":
/*!*************************************************************!*\
  !*** ../node_modules/@babel/runtime/helpers/createClass.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzPzM1M2EiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/@babel/runtime/helpers/createClass.js\n");

/***/ })

/******/ })["default"];
});