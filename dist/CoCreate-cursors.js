/*! For license information please see CoCreate-cursors.js.LICENSE.txt */
!function(t,I){"object"==typeof exports&&"object"==typeof module?module.exports=I():"function"==typeof define&&define.amd?define([],I):"object"==typeof exports?exports.CoCreate=I():(t.CoCreate=t.CoCreate||{},t.CoCreate.cursors=I())}(this,(function(){return(()=>{var __webpack_modules__={"./node_modules/@cocreate/crud-client/src/crud.js":function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// import {getCommonParams, getCommonParamsExtend, generateSocketClient} from \"@cocreate/socket-client/src/common-fun.js\"\n\n(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @cocreate/socket-client/src/common-fun.js */ \"./node_modules/@cocreate/socket-client/src/common-fun.js\"), __webpack_require__(/*! ./utils.crud.js */ \"./node_modules/@cocreate/crud-client/src/utils.crud.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(commonFunc, utilsCrud) {\n        \treturn factory(window, commonFunc, utilsCrud)\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof self !== 'undefined' ? self : this, function (wnd, commonFunc, utilsCrud) {\n  \n  const CoCreateCRUD = {\n    socket: null,\n    setSocket: function(socket) {\n      this.socket = socket;\n    },\n\n    readDocumentList(info){\n      if( !info ) return false;\n      let request_data = commonFunc.getCommonParams();\n      if (!info.collection) {\n        return false;\n      }\n      \n      request_data = {...request_data, ...info};\n      \n      this.socket.send('readDocumentList', request_data);\n      return true;\n    },\n    \n    createDocument: function(info) {\n      if (info === null) {\n        return false;\n      }\n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = {...info, ...commonData};\n  \n      let data = info.data || {};\n      \n      if (!data['organization_id']) {\n        data['organization_id'] = wnd.config.organization_Id\n      }\n      if (info['data']) {\n        data = {...data, ...info['data']}\n      }\n      \n      //. rebuild data\n      request_data['data'] = data;\n  \n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('createDocument', request_data, room);\n      return true;\n    },\n    \n    updateDocument: function(info) {\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) return false;\n      \n      let commonData = commonFunc.getCommonParamsExtend(info);\n      \n      let request_data = {...info, ...commonData};\n      \n      if( typeof info['data'] === 'object' ) {\n        request_data['set'] = info['data']\n      }\n      if( Array.isArray(info['delete_fields']) ) request_data['unset'] = info['delete_fields'];\n      \n      if(!request_data['set'] && !request_data['unset']) return false;\n      \n      if (info.broadcast === false) {\n        request_data['broadcast'] = false;\n      }\n      \n      /** socket parameters **/\n      if (info['broadcast_sender'] === undefined) {\n        request_data['broadcast_sender'] = true;\n      }\n      \n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('updateDocument', request_data, room);\n      \n      return true;\n    },\n    \n    readDocument: function(info) {\n      if (info === null) {\n        return false;\n      }\n      \n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) {\n        return false;\n      }\n      \n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = {...info, ...commonData};\n      console.log(\"crud.readDocument => \",request_data)\n      this.socket.send('readDocument', request_data);\n      return true;\n    },\n    \n    \n    deleteDocument: function(info) {\n      if (!info || !utilsCrud.checkDocumentId(info['document_id'])) {\n        return false;\n      }\n      \n      let commonData = commonFunc.getCommonParamsExtend(info);\n      let request_data = {...info, ...commonData};\n      \n      const room = commonFunc.generateSocketClient(info.namespace, info.room);\n      this.socket.send('deleteDocument', request_data, room);\n      return true;\n    },\n  \n  \n   /** export / import db functions **/\n    exportCollection: function(info) {\n      if (info === null) return;\n  \n      let request_data = commonFunc.getCommonParamsExtend(info);\n      request_data['collection'] = info['collection'];\n      request_data['export_type'] = info['export_type'];\n  \n      request_data['metadata'] = info['metadata']\n      this.socket.send('exportDB', request_data);\n    },\n    \n    importCollection: function(info) {\n      const {file} = info;\n      if (info === null || !(file instanceof wnd.File)) return;\n  \n      const extension = file.name.split(\".\").pop();\n      \n      if (!['json','csv'].some((item) => item === extension)) return;\n  \n      let request_data = commonFunc.getCommonParamsExtend(info)\n      request_data['collection'] = info['collection']\n      request_data['import_type'] = extension;\n      this.socket.send('importDB', request_data)\n      this.socket.sendFile(file);\n    },\n    \n    listen: function(message, fun) {\n      this.socket.listen(message, fun);\n    },\n    \n    listenAsync: function(eventname) {\n      return this.socket.listenAsync(eventname);\n    },\n  \n  \tcreateSocket: function(host, namespace) {\n  \t\tif (namespace) {\n  \t\t\tthis.socket.create({\n  \t\t\t\tnamespace: namespace, \n  \t\t\t\troom: null,\n  \t\t\t\thost: host\n  \t\t\t});\n  \t\t\tthis.socket.setGlobalScope(namespace);\n  \t\t} else {\n  \t\t\tthis.socket.create({\n  \t\t\t\tnamespace: null, \n  \t\t\t\troom: null,\n  \t\t\t\thost: host\n  \t\t\t});\n  \t\t}\n  \t},\n  \t\n  \t...utilsCrud\n  }\n  \n  return CoCreateCRUD;\n}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cocreate/crud-client/src/crud.js\n")},"./node_modules/@cocreate/crud-client/src/index.js":function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! @cocreate/socket-client */ \"./node_modules/@cocreate/socket-client/src/index.js\"), __webpack_require__(/*! ./crud.js */ \"./node_modules/@cocreate/crud-client/src/crud.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(CoCreateSocket, CoCreateCRUD) {\n        \treturn factory(true, CoCreateSocket, CoCreateCRUD)\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof self !== 'undefined' ? self : this, function (isBrowser, CoCreateSocket, CoCreateCRUD) {\n  if (isBrowser) {\n    \n    let crud_socket = window.CoCreateCrudSocket\n\n    if (!crud_socket) {\n      crud_socket = new CoCreateSocket('ws');\n      window.CoCreateCrudSocket = crud_socket;\n    }\n    \n    CoCreateCRUD.setSocket(crud_socket);\n    CoCreateCRUD.createSocket(window.config.host ? window.config.host : window.location.hostname, window.config.organization_Id)\n  } \n  return CoCreateCRUD;\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4vbm9kZV9tb2R1bGVzL0Bjb2NyZWF0ZS9jcnVkLWNsaWVudC9zcmMvaW5kZXguanM/NWViZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFFBQVEsSUFBMEM7QUFDbEQsUUFBUSxpQ0FBTyxDQUFDLHlHQUF5QixFQUFFLHdGQUFXLENBQUMsbUNBQUU7QUFDekQ7QUFDQSxTQUFTO0FBQUEsa0dBQUM7QUFDVixLQUFLLE1BQU0sRUFVUjtBQUNILENBQUM7QUFDRDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRztBQUNBO0FBQ0EsQ0FBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9AY29jcmVhdGUvY3J1ZC1jbGllbnQvc3JjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoW1wiQGNvY3JlYXRlL3NvY2tldC1jbGllbnRcIiwgXCIuL2NydWQuanNcIl0sIGZ1bmN0aW9uKENvQ3JlYXRlU29ja2V0LCBDb0NyZWF0ZUNSVUQpIHtcbiAgICAgICAgXHRyZXR1cm4gZmFjdG9yeSh0cnVlLCBDb0NyZWF0ZVNvY2tldCwgQ29DcmVhdGVDUlVEKVxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICBsZXQgd25kID0ge1xuICAgICAgICBjb25maWc6IHt9LFxuICAgICAgICBGaWxlOiB7fVxuICAgICAgfVxuICAgICAgY29uc3QgQ29DcmVhdGVDUlVEID0gcmVxdWlyZShcIi4vY3J1ZC5qc1wiKVxuICAgICAgY29uc3QgQ29DcmVhdGVTb2NrZXQgPSByZXF1aXJlKFwiQGNvY3JlYXRlL3NvY2tldC1jbGllbnRcIilcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShmYWxzZSwgQ29DcmVhdGVTb2NrZXQsIENvQ3JlYXRlQ1JVRCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSh0cnVlLCByb290W1wiQGNvY3JlYXRlL3NvY2tldC1jbGllbnRcIl0sIHJvb3RbXCIuL2NydWQuanNcIl0pO1xuICB9XG59KHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAoaXNCcm93c2VyLCBDb0NyZWF0ZVNvY2tldCwgQ29DcmVhdGVDUlVEKSB7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICBcbiAgICBsZXQgY3J1ZF9zb2NrZXQgPSB3aW5kb3cuQ29DcmVhdGVDcnVkU29ja2V0XG5cbiAgICBpZiAoIWNydWRfc29ja2V0KSB7XG4gICAgICBjcnVkX3NvY2tldCA9IG5ldyBDb0NyZWF0ZVNvY2tldCgnd3MnKTtcbiAgICAgIHdpbmRvdy5Db0NyZWF0ZUNydWRTb2NrZXQgPSBjcnVkX3NvY2tldDtcbiAgICB9XG4gICAgXG4gICAgQ29DcmVhdGVDUlVELnNldFNvY2tldChjcnVkX3NvY2tldCk7XG4gICAgQ29DcmVhdGVDUlVELmNyZWF0ZVNvY2tldCh3aW5kb3cuY29uZmlnLmhvc3QgPyB3aW5kb3cuY29uZmlnLmhvc3QgOiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUsIHdpbmRvdy5jb25maWcub3JnYW5pemF0aW9uX0lkKVxuICB9IFxuICByZXR1cm4gQ29DcmVhdGVDUlVEO1xufSkpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@cocreate/crud-client/src/index.js\n")},"./node_modules/@cocreate/crud-client/src/utils.crud.js":function(module,exports){eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        \treturn factory()\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof self !== 'undefined' ? self : this, function () {\n  \n  function \t__mergeObject(target, source) \n  {\n  \ttarget = target || {};\n  \tfor (let key of Object.keys(source)) {\n  \t\tif (source[key] instanceof Object) {\n  \t\t\tObject.assign(source[key], __mergeObject(target[key], source[key]))\n  \t\t}\n  \t}\n  \t\n  \tObject.assign(target || {}, source)\n  \treturn target\n  }\n  \n  function __createObject(data, path) \n  {\n  \tif (!path) return data;\n  \t\n  \tlet keys = path.split('.')\n  \tlet newObject = data;\n  \n  \tfor (var  i = keys.length - 1; i >= 0; i--) {\n  \t\tnewObject = {[keys[i]]: newObject}\t\t\t\t\n  \t}\n  \treturn newObject;\n  }\n  \n  function __createArray(key, data)\n  {\n    try {\n      let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key)\n      if (item && item.length == 3) {\n        let arrayKey = item[1];\n        let index = parseInt(item[2]);\n        \n        if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n          data[arrayKey] = [];\n        } \n        data[arrayKey][index] = data[key];\n        delete data[key];\n        key = arrayKey;\n      }\n    } catch {\n      console.log('create array error');\n    }\n    return key;\n  }\n  \n  function isObject(item) {\n    return (!!item) && (item.constructor === Object);\n  }\n  function isArray(item) {\n    return (!!item) && (item.constructor === Array);\n  }\n  \n  function decodeObject(data) {\n    let keys = Object.keys(data)\n    let objectData = {};\n    \n    keys.forEach((k) => {\n      k = __createArray(k, data);\n      if (k.split('.').length > 1) {\n        let newData = __createObject(data[k], k);\n        delete data[k];\n        \n        objectData = __mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    })\n    return objectData;\n  }\n  \n  function encodeObject(data) {\n    let keys = Object.keys(data);\n    let newData = {};\n    keys.forEach((k) => {\n      let data_value = data[k];\n      if (isObject(data[k])) {\n        let new_obj = encodeObject(data[k]);\n        \n        let newKeys = Object.keys(new_obj);\n        newKeys.forEach((newKey) => {\n          let value = new_obj[newKey];\n          newKey = k + \".\" + newKey;\n          newData[newKey] = value;\n        })\n        \n      } else if (isArray(data_value)){\n        data_value.forEach((v, index) => {\n          newData[`${k}[${index}]`] = v;\n        })\n      } else {\n        newData[k] = data[k];\n      }\n    })\n    return newData;\n  }\n  \n  function getAttr(el) {\n    if (!el) return\n  \n    let collection = el.getAttribute('data-collection')\n    let document_id = el.getAttribute('data-document_id')\n    let name = el.getAttribute('name')\n    return { collection, document_id, name }\n  }\n  \n  function getFlagAttr(el) {\n    if (!el) return {}\n    let is_realtime = isRealtimeAttr(el);\n    let is_save = isSaveAttr(el);\n    let is_read = isReadAttr(el);\n    let is_update = isUpdateAttr(el);\n    return { is_realtime, is_save, is_read, is_update }\n  }\n  \n  const isReadAttr = (el) => ( __isValueOfAttr(el, 'data-read_value'));\n  const isSaveAttr = (el) => ( __isValueOfAttr(el, 'data-save_value'));\n  const isUpdateAttr = (el) => ( __isValueOfAttr(el, 'data-update_value'));\n  // const isRealtimeAttr = (el) => ( __isValueOfAttr(el, 'data-realtime'));\n  const isRealtimeAttr = (el) => {\n    if (!el) return false\n    let flag = el.getAttribute('data-realtime') == \"false\" ? false : true;\n    return flag\n  };\n  \n  function __isValueOfAttr(el, attr) {\n    if (!el) return false;\n    let flag = el.getAttribute(attr) === \"false\" ? false : true;\n    return flag\n  }\n  \n  function checkValue(value) {\n    if (!value) return false;\n    if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n      return false;\n    }\n  \n    return true;\n  }\n  \n  function isJsonString(str_data) {\n    try {\n      let json_data = JSON.parse(str_data);\n      if (typeof json_data === \"object\" && json_data != null) {\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n    catch (e) {\n      return false;\n    }\n  }\n  \n  function isCRDT(input) {\n    const { collection, document_id, name } = getAttr(input)\n    \n    if (isJsonString(collection)) return false;\n    if (isJsonString(name)) return false;\n  \n    if ((input.tagName === \"INPUT\" && [\"text\", \"email\", \"tel\", \"url\"].includes(input.type)) || input.tagName === \"TEXTAREA\") {\n      \n      if (!name) return false;\n      if (!isRealtimeAttr(input)) return false;\n      if (input.getAttribute(\"data-unique\") === \"true\") return false;\n      if (input.type === 'password') return false;\n      if (!isReadAttr(input)) return false;\n      return true;\n      \n    }\n    return false;\n  }\n  \n  function checkDocumentId(document_id) {\n    try {\n      if (!document_id) return false;\n      if (document_id.toLowerCase() === \"null\") return false;\n      return true;\n    } catch(error) {\n      return false;\n    }\n  }\n  \n  \n  return {\n    decodeObject,\n    encodeObject,\n    getAttr,\n    getFlagAttr,\n    isRealtimeAttr,\n    isReadAttr,\n    isSaveAttr,\n    isUpdateAttr,\n    checkValue,\n    isCRDT,\n    checkDocumentId\n  }\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cocreate/crud-client/src/utils.crud.js\n")},"./node_modules/@cocreate/observer/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// window.addEventListener("load", () => {\n\n/*\nCoCreate.observer.init({ \n\tname: \'CoCreateFetchInit\', // no usage, just to provide for console debugging \n\tobserve: [\'subtree\', \'childList\',\'attributes\'], // the same parameters of options in #https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe\n\tattributes: [\'data-fetch_collection\'], // it doesn\'t count added nodes or remove nodes\n\tinclude: ".classname", // a selector to select only elements that matches\n\texclude: ".classname", // a selector to exclude elements from processing\n\tcallback: function(mutation) { // a function which gets a mutation object according to #https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord\n\t\tCoCreateFetch.initElement(mutation.target)\n\t}\n})\n*/\n\n\n/**\n * description\n * \n * @param {String} [name] - an optional name to provide for debugging console\n * @param {Array} observe - a list of mutation type to be observerd, a mix of possible `attributes`, `childList` or `subtree`\n * ... and other params can be here \n * \n * @return null\n */\nwindow.profiler = {}\nwindow.counter = 0;\nwindow.counter2 = 0;\nwindow.targets = {};\nwindow.attributeName = {};\nif (!Element.prototype.matches) {\n  Element.prototype.matches =\n    Element.prototype.matchesSelector ||\n    Element.prototype.mozMatchesSelector ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.oMatchesSelector ||\n    Element.prototype.webkitMatchesSelector ||\n    function(s) {\n      var matches = (this.document || this.ownerDocument).querySelectorAll(s),\n        i = matches.length;\n      while (--i >= 0 && matches.item(i) !== this) {}\n      return i > -1;\n    };\n}\n\nconst CoCreateObserver = {\n  initTasks: new Map(),\n  attrTasks: new Map(),\n  rules: new Map(),\n  rulesArray: [],\n\n  __init: function() {\n    const self = this;\n    const observer = new MutationObserver((mutationsList, observer) => self.__callback(mutationsList, observer));\n\n    // setTimeout(()=>{\n    observer.observe(document.body, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n      characterData: false,\n      attributeOldValue: true,\n      characterData: true,\n    });\n  },\n\n  // init: function(data) {\n  //   this.add(data);\n  // },\n\n  init: function({ observe, include, exclude, attributes, name, callback }) {\n    console.log(\' aaaaaaaaaaaaaa observer init \',name)\n\n    // if (name == \'ccAttribute\' || name == \'ccCss\') {\n      if (observe.some(x => x == "childList")) {\n        this.initTasks.set(callback, { observe, include, exclude, attributes, name });\n      }\n\n      if (observe.some(x => x == "attributes")) {\n        this.attrTasks.set(callback, { observe, include, exclude, attributes, name });\n      }\n    // }\n\n  },\n  remove: function(callback) {\n    this.initTasks.delete(callback)\n    this.attrTasks.delete(callback)\n  },\n\n  addRule: function({ include, exclude, name }) {\n    this.rules.set(name, { include, exclude });\n    this.rulesArray = Array.from(this.rules);\n  },\n\n  removeRule: function({ name }) {\n    this.rules.delete(name);\n    this.rulesArray = Array.from(this.rules);\n  },\n\n  __callback: function(mutationsList, observer) {\n    // console.log(this)\n    window.counter++;\n    for (let mutation of mutationsList) {\n      if (mutation.type == "childList" && mutation.addedNodes.length > 0) {\n        //. run init functions\n        this.__initCallback(mutation)\n      }\n\n      if (mutation.type == "attributes") {\n        //. run attributes functions\n        this.__attrCallback(mutation);\n      }\n    }\n  },\n\n  __initCallback: function(mutation) {\n    let addedNodes = Array.from(mutation.addedNodes);\n\n    this.initTasks.forEach(({ observe, include, exclude, attributes, name }, callback) => {\n\n      mutation.addedNodes.forEach((el) => {\n        if (!el.tagName) return;\n\n        if (include && !(el.matches(include) || el.querySelector(include))) {\n          return\n        }\n        if (exclude && (el.matches(exclude) || el.querySelector(exclude))) {\n          return;\n        }\n\n        // if (el.created) return;\n        // window.counter2++;\n        // window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n        // window.targets[mutation.target.id || mutation.target.tagName] =\n        //   window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n        //   window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n        //   0;\n\n        // window.attributeName[mutation.attributeName] =\n        //   window.attributeName[mutation.attributeName] != undefined ?\n        //   window.attributeName[mutation.attributeName] + 1 :\n        //   0;\n        callback.apply(null, [{ type: mutation.type, target: el }]);\n      })\n    });\n\n    // addedNodes.map(el => el.created = true);\n  },\n\n  __attrCallback: function(mutation) {\n    for (let [name, { include, exclude }] of this.rulesArray) {\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n    }\n    this.attrTasks.forEach(({ observe, include, exclude, attributes, name }, callback) => {\n      if (attributes && mutation.attributeName && !attributes.includes(mutation.attributeName)) {\n        return;\n      }\n      if (include && !mutation.target.matches(include)) return;\n      if (exclude && mutation.target.matches(exclude)) return;\n\n      if (mutation.attributeName) {\n        let newValue = mutation.target.getAttribute(mutation.attributeName);\n        if (newValue != mutation.oldValue) {\n          // window.counter2++;\n          // window.profiler[name] = window.profiler[name] != undefined ? window.profiler[name] + 1 : 0;\n          // window.targets[mutation.target.id || mutation.target.tagName] =\n          //   window.targets[mutation.target.id || mutation.target.tagName] != undefined ?\n          //   window.targets[mutation.target.id || mutation.target.tagName] + 1 :\n          //   0;\n\n          // window.attributeName[mutation.attributeName] =\n          //   window.attributeName[mutation.attributeName] != undefined ?\n          //   window.attributeName[mutation.attributeName] + 1 :\n          //   0;\n          callback.apply(null, [mutation]);\n        }\n      }\n\n    })\n  },\n\n  setInitialized: function(element, type) {\n    // element.setAttribute(`initialized_${type}`, "true");\n    type = type || "";\n    let key = "co_initialized_" + type;\n    element[key] = true;\n  },\n\n  getInitialized: function(element, type) {\n    type = type || "";\n    let key = "co_initialized_" + type;\n    if (!element[key]) {\n      return false;\n    }\n    else {\n      return true;\n    }\n  }\n}\n\nCoCreateObserver.__init();\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CoCreateObserver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cocreate/observer/src/index.js\n')},"./node_modules/@cocreate/socket-client/src/common-fun.js":function(module,exports){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n        \treturn factory(window)\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof self !== \'undefined\' ? self : this, function (wnd) {\n  function getCommonParams() \n  {\n    let config = {};\n    if (wnd && wnd.config) {\n      config = wnd.config\n    }\n    \n    return {\n      "apiKey":           config.apiKey,\n      "organization_id":  config.organization_Id,\n    }\n  }\n  \n  function getCommonParamsExtend(info) \n  {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config\n    \n    return {\n      "apiKey":           info.apiKey || config.apiKey,\n      "organization_id":  info.organization_id || config.organization_Id,\n    }\n  }\n  \n  function generateSocketClient (namespace, room) \n  {\n    let config = {};\n    if (wnd && wnd.config) config = wnd.config\n    \n    let ns = namespace || config.organization_Id\n    let rr = room || \'\';\n    if (rr) {\n      return `${ns}/${rr}`\n    } else {\n      return ns;\n    }\n  }\n  \n  function GenerateUUID(length = 36) {\n    let d = new Date().getTime();\n    let d2 = 0;\n    let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n  \n    if (length <= pattern.length) {\n      pattern = pattern.substr(0, length);\n    } else {\n      let add_len = length - pattern.length;\n      let sub_pattern = "-xxxyyxxx";\n  \n      let group_n = Math.floor(add_len / sub_pattern.length);\n  \n      for (let i = 0; i < group_n; i++) {\n        pattern += sub_pattern;\n      }\n  \n      group_n = add_len - group_n * sub_pattern.length;\n      pattern += sub_pattern.substr(0, group_n);\n    }\n  \n    let uuid = pattern.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16;\n      if (d > 0) {\n        var r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        var r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n      return (c == "x" ? r : (r & 0x7) | 0x8).toString(16);\n    });\n    return uuid;\n  }\n  \n  return {getCommonParams, getCommonParamsExtend, generateSocketClient, GenerateUUID};\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4vbm9kZV9tb2R1bGVzL0Bjb2NyZWF0ZS9zb2NrZXQtY2xpZW50L3NyYy9jb21tb24tZnVuLmpzPzY5MTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxRQUFRLElBQTBDO0FBQ2xEO0FBQ0EsUUFBUSxpQ0FBTyxFQUFFLG1DQUFFO0FBQ25CO0FBQ0EsU0FBUztBQUFBLGtHQUFDO0FBQ1YsS0FBSyxNQUFNLEVBUVI7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsR0FBRyxHQUFHLEdBQUc7QUFDekIsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUEscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLFVBQVU7QUFDVixDQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0Bjb2NyZWF0ZS9zb2NrZXQtY2xpZW50L3NyYy9jb21tb24tZnVuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIFx0cmV0dXJuIGZhY3Rvcnkod2luZG93KVxuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIC8vIE5vZGUuIERvZXMgbm90IHdvcmsgd2l0aCBzdHJpY3QgQ29tbW9uSlMsIGJ1dFxuICAgICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkobnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICAgICAgcm9vdC5yZXR1cm5FeHBvcnRzID0gZmFjdG9yeSh3aW5kb3cpO1xuICB9XG59KHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbiAod25kKSB7XG4gIGZ1bmN0aW9uIGdldENvbW1vblBhcmFtcygpIFxuICB7XG4gICAgbGV0IGNvbmZpZyA9IHt9O1xuICAgIGlmICh3bmQgJiYgd25kLmNvbmZpZykge1xuICAgICAgY29uZmlnID0gd25kLmNvbmZpZ1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgXCJhcGlLZXlcIjogICAgICAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgICBcIm9yZ2FuaXphdGlvbl9pZFwiOiAgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCxcbiAgICB9XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGdldENvbW1vblBhcmFtc0V4dGVuZChpbmZvKSBcbiAge1xuICAgIGxldCBjb25maWcgPSB7fTtcbiAgICBpZiAod25kICYmIHduZC5jb25maWcpIGNvbmZpZyA9IHduZC5jb25maWdcbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgXCJhcGlLZXlcIjogICAgICAgICAgIGluZm8uYXBpS2V5IHx8IGNvbmZpZy5hcGlLZXksXG4gICAgICBcIm9yZ2FuaXphdGlvbl9pZFwiOiAgaW5mby5vcmdhbml6YXRpb25faWQgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCxcbiAgICB9XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIGdlbmVyYXRlU29ja2V0Q2xpZW50IChuYW1lc3BhY2UsIHJvb20pIFxuICB7XG4gICAgbGV0IGNvbmZpZyA9IHt9O1xuICAgIGlmICh3bmQgJiYgd25kLmNvbmZpZykgY29uZmlnID0gd25kLmNvbmZpZ1xuICAgIFxuICAgIGxldCBucyA9IG5hbWVzcGFjZSB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkXG4gICAgbGV0IHJyID0gcm9vbSB8fCAnJztcbiAgICBpZiAocnIpIHtcbiAgICAgIHJldHVybiBgJHtuc30vJHtycn1gXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBucztcbiAgICB9XG4gIH1cbiAgXG4gIGZ1bmN0aW9uIEdlbmVyYXRlVVVJRChsZW5ndGggPSAzNikge1xuICAgIGxldCBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgbGV0IGQyID0gMDtcbiAgICBsZXQgcGF0dGVybiA9IFwidXh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCI7XG4gIFxuICAgIGlmIChsZW5ndGggPD0gcGF0dGVybi5sZW5ndGgpIHtcbiAgICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnN1YnN0cigwLCBsZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgYWRkX2xlbiA9IGxlbmd0aCAtIHBhdHRlcm4ubGVuZ3RoO1xuICAgICAgbGV0IHN1Yl9wYXR0ZXJuID0gXCIteHh4eXl4eHhcIjtcbiAgXG4gICAgICBsZXQgZ3JvdXBfbiA9IE1hdGguZmxvb3IoYWRkX2xlbiAvIHN1Yl9wYXR0ZXJuLmxlbmd0aCk7XG4gIFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cF9uOyBpKyspIHtcbiAgICAgICAgcGF0dGVybiArPSBzdWJfcGF0dGVybjtcbiAgICAgIH1cbiAgXG4gICAgICBncm91cF9uID0gYWRkX2xlbiAtIGdyb3VwX24gKiBzdWJfcGF0dGVybi5sZW5ndGg7XG4gICAgICBwYXR0ZXJuICs9IHN1Yl9wYXR0ZXJuLnN1YnN0cigwLCBncm91cF9uKTtcbiAgICB9XG4gIFxuICAgIGxldCB1dWlkID0gcGF0dGVybi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNjtcbiAgICAgIGlmIChkID4gMCkge1xuICAgICAgICB2YXIgciA9IChkICsgcikgJSAxNiB8IDA7XG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgciA9IChkMiArIHIpICUgMTYgfCAwO1xuICAgICAgICBkMiA9IE1hdGguZmxvb3IoZDIgLyAxNik7XG4gICAgICB9XG4gICAgICByZXR1cm4gKGMgPT0gXCJ4XCIgPyByIDogKHIgJiAweDcpIHwgMHg4KS50b1N0cmluZygxNik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHV1aWQ7XG4gIH1cbiAgXG4gIHJldHVybiB7Z2V0Q29tbW9uUGFyYW1zLCBnZXRDb21tb25QYXJhbXNFeHRlbmQsIGdlbmVyYXRlU29ja2V0Q2xpZW50LCBHZW5lcmF0ZVVVSUR9O1xufSkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@cocreate/socket-client/src/common-fun.js\n')},"./node_modules/@cocreate/socket-client/src/index.js":function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ./common-fun.js */ "./node_modules/@cocreate/socket-client/src/common-fun.js")], __WEBPACK_AMD_DEFINE_RESULT__ = (function(commonFunc) {\n        \treturn factory(commonFunc, window, WebSocket, Blob)\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof self !== \'undefined\' ? self : this, function (commonFunc, wnd, WebSocket, Blob) {\n\n    class CoCreateSocketClient\n\t{\n\t\tconstructor(prefix = "crud") {\n\t\t\tthis.prefix = prefix || "crud";\n\t\t\tthis.sockets = new Map();\n\t\t\tthis.listeners = new Map();\n\t\t\tthis.messageQueue =  new Map();\n\t\t\tthis.saveFileName =  \'\';\n\t\t\tthis.globalScope =  "";\n\t\t}\n\t\n\t\tsetGlobalScope(scope) {\n\t\t\tthis.globalScope = `${this.prefix}/${scope}`;\n\t\t}\n\t\t\n\t\tgetGlobalScope() {\n\t\t\treturn this.globalScope;\n\t\t}\n\t\t\n\t\t/**\n\t\t * config: {namespace, room, host}\n\t\t */\n\t\tcreate (config) {\n\t\t\t\n\t\t\tconst {namespace, room} = config;\n\t\t\tconst key = this.getKey(namespace, room);\n\t\t\tlet _this = this;\n\t\t\tif (namespace) {\n\t\t\t\tthis.setGlobalScope(namespace)\n\t\t\t}\n\t\t\t\n\t\t\tlet socket;\n\t\t\tif (this.sockets.get(key)) {\n\t\t\t\tsocket = this.sockets.get(key);\n\t\t\t\tconsole.log(\'SOcket already has been register\');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tlet w_protocol = wnd.location.protocol;\t\t\n\t\t\tif (wnd.location.protocol === "about:") {\n\t\t\t\tw_protocol = wnd.parent.location.protocol;\n\t\t\t\tif (!config.host) {\n\t\t\t\t\tconfig.host = wnd.parent.location.host;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet protocol = w_protocol === \'http:\' ? \'ws\' : \'wss\';\n\t\t\t\n\t\t\tconst port = config.port ? config.port : 8088;\n\t\t\t\n\t\t\tlet socket_url = `${protocol}://${wnd.location.host}:${port}/${key}`;\n\t\t\t\n\t\t\tif (config.host) {\n\t\t\t\tif (config.host.includes("://")) {\n\t\t\t\t\tsocket_url = `${config.host}/${key}`;\n\t\t\t\t} else {\n\t\t\t\t\tif (config.host.includes(":")) {\n\t\t\t\t\t\tsocket_url = `${protocol}://${config.host}/${key}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsocket_url = `${protocol}://${config.host}:${port}/${key}`;\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlet token = null;\n\t\t\t\tif (wnd.localStorage) {\n\t\t\t\t\ttoken = wnd.localStorage.getItem("token");\n\t\t\t\t}\n\t\t\t\tsocket = new WebSocket(socket_url, token);\n\t\t\t} catch(error) {\n\t\t\t\tconsole.log(error)\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsocket.onopen = function(event) {\n\t\t\t\tconst messages = _this.messageQueue.get(key) || [];\n\t\t\t\tmessages.forEach(msg => socket.send(JSON.stringify(msg)));\n\t\t\t\t\n\t\t\t\t_this.sockets.set(key, socket);\n\t\t\t\t_this.messageQueue.set(key, []);\n\t\t\t}\n\t\t\t\n\t\t\tsocket.onclose = function(event) {\n\t\t\t\tswitch(event.code) {\n\t\t\t\t\tcase 1000: // close normal\n\t\t\t\t\t\tconsole.log("websocket: closed");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault: \n\t\t\t\t\t\t_this.destroy(socket, key);\n\t\t\t\t\t\t_this.reconnect(socket, config);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tsocket.onerror = function(err) {\n\t\t\t\t_this.destroy(socket, key);\n\t\t\t\t_this.reconnect(socket, config);\n\t\t\t}\n\t\n\t\t\tsocket.onmessage = function(data) {\n\t\t\t\ttry {\n\t\t\t\t\tif (wnd.Blob) {\n\t\t\t\t\t\tif (data.data instanceof Blob) {\n\t\t\t\t\t\t\t_this.saveFile(data.data);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlet rev_data = JSON.parse(data.data);\n\t\t\t\t\tconsole.log("data = ",rev_data)\n\n\t\t\t\t\tif (rev_data.data.event) {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (wnd.CustomEvent) {\n\t\t\t\t\t\t\tvar event = new wnd.CustomEvent(rev_data.data.event, {\n\t\t\t\t\t\t\t\tdetail: rev_data.data\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\twnd.document.dispatchEvent(event);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprocess.emit(rev_data.data.event, rev_data.data)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tlet action = rev_data.action;\n\t\t\t\t\tconst listeners = _this.listeners.get(rev_data.action);\n\t\t\t\t\tif (!listeners) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlisteners.forEach(listener => {\n\t\t\t\t\t\tlistener(rev_data.data, key);\n\t\t\t\t\t})\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * \n\t\t */\n\t\tsend (action, data, room) {\n\t\t\tconst obj = {\n\t\t\t\taction: action,\n\t\t\t\tdata: {...data, uid: commonFunc.GenerateUUID()}\n\t\t\t}\n\t\t\tconst key = this.getKeyByRoom(room);\n\t\t\tconst socket = this.getByRoom(room);\n\n\t\t\tif (socket) {\n\t\t\t\tsocket.send(JSON.stringify(obj));\n\t\t\t} else {\n\t\t\t\tif (this.messageQueue.get(key)) {\n\t\t\t\t\tthis.messageQueue.get(key).push(obj);\n\t\t\t\t} else {\n\t\t\t\t\tthis.messageQueue.set(key, [obj]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tsendFile (file, room) {\n\t\t\tconst socket = this.getByRoom(room);\n\t\t\tif (socket) {\n\t\t\t\tsocket.send(file);\n\t\t\t}\n\t\t}\n\t\n\t\t/**\n\t\t * scope: ns/room\n\t\t */\n\t\tlisten(type, callback) {\n\t\t\tif (!this.listeners.get(type)) {\n\t\t\t\tthis.listeners.set(type, [callback]);\n\t\t\t} else {\n\t\t\t\tthis.listeners.get(type).push(callback);\n\t\t\t}\n\t\t}\n\t\t\n\t\treconnect(socket, config) {\n\t\t\tlet _this = this;\n\t\t\tsetTimeout(function() {\n\t\t\t\t_this.create(config);\n\t\t\t}, 1000)\n\t\t}\n\t\t\n\t\tdestroy(socket, key) {\n\t\t\tif (socket) {\n\t\t\t\tsocket.onerror = socket.onopen = socket.onclose = null;\n\t\t\t\tsocket.close();\n\t\t\t\tsocket = null;\n\t\t\t}\n\t\t\t\n\t\t\tif (this.sockets.get(key)) {\n\t\t\t\tthis.sockets.delete(key);\n\t\t\t}\n\t\t}\n\t\t\n\t\tdestroyByKey(key) {\n\t\t\tlet socket = this.sockets.get(key) \n\t\t\tif (socket) {\n\t\t\t\tthis.destroy(socket, key);\n\t\t\t}\n\t\t}\n\t\t\n\t\tgetKey(namespace, room) {\n\t\t\tlet key = `${this.prefix}`;\n\t\t\tif (namespace && namespace != \'\') {\n\t\t\t\tif (room &&  room != \'\') {\n\t\t\t\t\tkey += `/${namespace}/${room}`;\n\t\t\t\t} else {\n\t\t\t\t\tkey +=`/${namespace}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn key;\n\t\t}\n\t\t\n\t\tgetByRoom(room) {\n\t\t\tlet key = this.getKeyByRoom(room)\n\t\t\treturn this.sockets.get(key);\t\n\t\t}\n\t\t\n\t\tgetKeyByRoom(room) {\n\t\t\tlet key = this.globalScope;\n\t\t\tif (room) {\n\t\t\t\tkey = `${this.prefix}/${room}`;\n\t\t\t}\n\t\t\treturn key;\t\t\n\t\t}\n\t\t\n\t\t\n\t\tsaveFile(blob) {\n\t\t\tif (wnd.document) {\n\t\t\t\tconst file_name = this.saveFileName || \'downloadFile\';\n\t\t\t\tvar a = wnd.document.createElement("a");\n\t\t        wnd.document.body.appendChild(a);\n\t\t        a.style = "display: none";\n\t\t\n\t\t        let url = window.URL.createObjectURL(blob);\n\t\t        a.href = url;\n\t\t        a.download = file_name;\n\t\t        a.click();\n\t\t        wnd.URL.revokeObjectURL(url);\n\t\t\n\t\t        this.saveFileName = \'\'\n\t\t\t}\n\t\t}\n\t\t\n\t\tlistenAsync(eventname) {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tif (wnd.document) { //. browser case\n\t\t\t\t\twnd.document.addEventListener(eventname, function(event) {\n\t\t\t\t\t    resolve(event.detail);\n\t\t\t\t\t}, { once: true })\n\t\t\t\t} else { //. node case\n\t\t\t\t\tprocess.once(eventname, (data) => {\n\t\t\t\t\t\tresolve(data)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n    return CoCreateSocketClient\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@cocreate/socket-client/src/index.js\n')},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"./node_modules/@cocreate/observer/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"./node_modules/@cocreate/crud-client/src/index.js\"));\n\n__webpack_require__(/*! ./CoCreate-cursors.css */ \"./src/CoCreate-cursors.css\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global Element*/\n// import utils from '@cocreate/utils';\n// import input from '@cocreate/input'\n\n/**Uso esta variable para mostrar errores en caso que no este en prod*/\nvar element_multicursors = document.querySelectorAll('input,textarea,[contenteditable]'); //console.log(element_multicursors)\n\nvar debug = false;\nvar enviroment_prod = true;\nvar properties = ['boxSizing', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', 'letterSpacing', 'wordSpacing', 'textRendering', 'webkitWritingMode', 'textTransform', 'textIndent', 'overflowWrap'];\nvar length_uuid = 30;\n\nclass CocreateUtilsCursor {\n  static print(message, debug) {\n    debug = debug || false;\n    if (debug) console.log(message);\n  }\n\n  static generateUUID(length = null) {\n    var d = new Date().getTime();\n    var d2 = performance && performance.now && performance.now() * 1000 || 0; //Time in microseconds since page-load or 0 if unsupported\n\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16;\n\n      if (d > 0) {\n        var r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        var r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n\n      return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n    });\n\n    if (length != null) {\n      uuid = uuid.substr(0, length);\n    }\n\n    return uuid;\n  }\n\n}\n\nvar getParents = function (elem, selector) {// \tif (!Element.prototype.matches) {\n  // \t\tElement.prototype.matches =\n  // \t\t\tElement.prototype.matchesSelector ||\n  // \t\t\tElement.prototype.mozMatchesSelector ||\n  // \t\t\tElement.prototype.msMatchesSelector ||\n  // \t\t\tElement.prototype.oMatchesSelector ||\n  // \t\t\tElement.prototype.webkitMatchesSelector ||\n  // \t\t\tfunction(s) {\n  // \t\t\t\tvar matches = (this.document || this.ownerDocument).querySelectorAll(s),\n  // \t\t\t\t\ti = matches.length;\n  // \t\t\t\twhile (--i >= 0 && matches.item(i) !== this) {}\n  // \t\t\t\treturn i > -1;\n  // \t\t\t};\n  // \t}\n};\n\nvar mirrorDiv, computed, style, computedParentElement;\n\nvar getCaretCoordinates = function (element, position_start, position_end) {\n  // mirrored div\n  let name = element.getAttribute('name');\n  let document_id = element.getAttribute('data-document_id') || '';\n\n  if (document_id == '') {\n    return false;\n  }\n\n  var ID_MIRROR = element.dataset['mirror_id']; //document_id + name +  '--mirror-div';\n\n  mirrorDiv = document.getElementById(ID_MIRROR);\n  var add_class_scroll = element.className.indexOf('floating-label') == -1 ? false : true;\n\n  if (!mirrorDiv) {\n    mirrorDiv = document.createElement('div');\n    mirrorDiv.id = ID_MIRROR; //document_id +name+ '--mirror-div';\n\n    mirrorDiv.className = enviroment_prod ? 'mirror_color mirror_scroll mirror-width-scroll' : 'mirror-width-scroll'; //document.body.appendChild(mirrorDiv);\n\n    element.insertAdjacentElement('afterend', mirrorDiv);\n  }\n\n  var scrollwidth = element.offsetWidth - element.scrollWidth;\n  style = mirrorDiv.style;\n  computed = getComputedStyle(element);\n  computedParentElement = getComputedStyle(element.parentElement);\n  let margin_top = parseInt(computed['marginTop']);\n  let margin_left = parseInt(computed['marginLeft']);\n\n  if (element.nodeName !== 'INPUT') {\n    style.wordWrap = 'break-word'; // only for textarea-s\n\n    style.whiteSpace = 'pre-wrap';\n  } else {\n    style.whiteSpace = 'pre';\n  } // position off-screen\n\n\n  style.position = 'absolute'; // required to return coordinates properly\n\n  var rect = element.getBoundingClientRect(); // get Position from element\n\n  let scrrollTop_browser = document.documentElement.scrollTop; //style.top = ((rect.top+scrrollTop_browser)-1) - (parseInt(computed['marginTop']) - parseInt(computed['borderTopWidth']) ) + 'px'//parseInt(computed.borderTopWidth) + 'px'; //  element.offsetTop + parseInt(computed.borderTopWidth) + 'px';\n  //style.top = computedParentElement['top'];\n\n  style.top = element.offsetTop + 'px'; //style.left = rect.left - (parseInt(computed['marginLeft']) -  parseInt(computed['borderLeftWidth']) ) + 'px'//parseInt(computed.borderLeftWidth) + 'px'   // margin_left+\"px\";//\"400px\";\n  //style.left =  computedParentElement['left'];\n\n  style.left = element.offsetLeft + 'px';\n  style.width = rect.width + 'px'; // - (parseInt(computed.borderLeftWidth) + parseInt(computed.borderRightWidth)) + 'px'   // margin_left+\"px\";//\"400px\";\n\n  style.height = rect.height + 'px'; // - (parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth)) + 'px'   // margin_left+\"px\";//\"400px\";\n\n  style.visibility = 'visible';\n  properties.forEach(function (prop) {\n    if (['left', 'top'].indexOf(prop.toLowerCase()) === -1) style[prop] = computed[prop];\n  });\n  style.overflowX = 'auto';\n  style.overflowY = 'hidden';\n  style.margin = '0px'; //style.padding = '0px'\n\n  style.border = computed['border'];\n  style.borderColor = 'transparent';\n  /* \n  if(element.nodeName.toLowerCase()=='input'){\n    style.overflowX ='auto';\n    style.overflowY ='hidden';\n  }else{\n    style.overflow=\"visible\"\n  }*/\n  // style.paddingRight = (parseInt(style.paddingRight) + scrollwidth - parseInt(computed.borderRightWidth)) +'px';\n\n  let cursor_container = mirrorDiv.querySelectorAll('.cursor-container');\n  let selectors_by_users = mirrorDiv.querySelectorAll('.selectors_by_users');\n  let value_element = ['TEXTAREA', 'INPUT'].indexOf(element.nodeName) == -1 ? element.innerHTML : element.value;\n  mirrorDiv.textContent = value_element.substring(0, position_start);\n  if (element.nodeName === 'INPUT') mirrorDiv.textContent = mirrorDiv.textContent.replace(/\\s/g, \"\\u00a0\");\n  var span = document.createElement('span');\n  span.id = element.nodeName + 'span_selections';\n  let value_span = value_element.substring(position_start, position_end) || '';\n  span.textContent = value_span; // || because a completely empty faux span doesn't render at all\n  //span.style.backgroundColor = \"lightgrey\";\n\n  mirrorDiv.appendChild(span);\n\n  if (cursor_container) {\n    cursor_container.forEach(function (child_cursor, index, array) {\n      mirrorDiv.appendChild(child_cursor);\n    });\n  }\n\n  if (selectors_by_users) {\n    selectors_by_users.forEach(function (child_selection, index, array) {\n      mirrorDiv.appendChild(child_selection);\n    });\n  }\n\n  let value_end = value_element.substring(position_end) || '';\n  var span_end = document.createElement('span');\n  mirrorDiv.appendChild(span_end);\n  span_end.textContent = value_end;\n  var rect = element.getBoundingClientRect(); // get Position from element\n\n  var coordinates = {\n    start: {\n      top: span.offsetTop,\n      left: span.offsetLeft\n    },\n    end: {\n      top: span_end.offsetTop,\n      //+ parseInt(computed['borderTopWidth']),\n      left: span_end.offsetLeft // + parseInt(computed['borderLeftWidth'])\n\n    }\n  };\n  return coordinates;\n};\n\nfunction getStyle(el, styleProp) {\n  if (window.getComputedStyle) var y = document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  return y;\n}\n\nfunction getDocument(collection, module_id) {\n  _crudClient.default.readDocument({\n    'collection': collection,\n    'document_id': module_id\n  });\n}\n\n_crudClient.default.listen('readDocument', function (data) {\n  let cursor = document.querySelector('.cursor-flag[data-document_id=\"' + data['document_id'] + '\"]');\n  if (cursor) cursor.innerHTML = data.result[cursor.getAttribute('name')];\n});\n\nfunction draw_cursor(json) {\n  CocreateUtilsCursor.print([\"draw Cursor \", json], debug);\n  let element = json['element'];\n  let activate_cursor = element.dataset['cursors'] ? element.dataset['mirror_id'] : true;\n\n  if (activate_cursor) {\n    let start = json['startPosition'];\n    let end = json['endPositon'];\n    let socket_id = json['clientId'];\n    let document_id = element.getAttribute('data-document_id') || '';\n\n    if (document_id != '') {\n      CocreateUtilsCursor.print(\"action document_id \" + document_id, debug);\n      if (typeof element.dataset['mirror_id'] == 'undefined' || element.dataset['mirror_id'] == '') element.dataset['mirror_id'] = CocreateUtilsCursor.generateUUID(length_uuid);\n      let coordinates = getCaretCoordinates(element, start, end);\n      if (!coordinates) return false;\n      let name = element.getAttribute('name');\n      let id_mirror = element.dataset['mirror_id']; //document_id+name+'--mirror-div'\n\n      let mi_mirror = document.getElementById(id_mirror);\n      let cursor = false;\n      let selection_user = false;\n      let identify = '_' + id_mirror;\n      let user = typeof json != 'undefined' && json.hasOwnProperty('user') ? json.user : false;\n      let user_id = typeof json != 'undefined' && json.hasOwnProperty('user_id') ? user.user_id : false;\n\n      if (socket_id) {\n        //if(data && data.hasOwnProperty('id_mirror')){\n        var cursores_other_elements = document.querySelectorAll('#socket_' + socket_id + identify);\n        cursores_other_elements.forEach(function (child_cursor, index, array) {\n          if (child_cursor.parentElement.getAttribute('id') != id_mirror) {\n            CocreateUtilsCursor.print(\"remove old cursor others elements\", debug);\n            child_cursor.remove();\n          }\n        }); //}\n\n        cursor = mi_mirror.querySelector('.cursor-container#socket_' + socket_id + identify);\n\n        if (!cursor && json.hasOwnProperty('user')) {\n          if (user) {\n            CocreateUtilsCursor.print(\"Create Cursor\", debug);\n            let cursor_template = '<div style=\"color:blue;\" class=\"cursor-container\" \\\n                                                  id=\"socket_' + socket_id + identify + '\" \\\n                                                  ><div class=\"cursor\" \\\n                                                  style=\"background-color:' + user.color + '\"></div>\\\n                                                  <div class=\"cursor-flag\" data-collection=\"users\" \\\n                                                  name=\"name\" \\\n                                                  data-user_name=\"' + user.name + '\" \\\n                                                  data-user_color=\"' + user.color + '\" \\\n                                                  data-socket_id=\"' + socket_id + '\" \\\n                                                  data-id_mirror=\"' + id_mirror + '\" \\\n                                                  data-document_id=\"' + user_id + '\" \\\n                                                  style=\"background-color:' + user.color + '\" \\\n                                                  flag>' + user.name + '</div></div>';\n            mi_mirror.innerHTML = cursor_template + mi_mirror.innerHTML;\n          }\n\n          if (user_id) {\n            // si tiene user_id actualiza el nombre del cursor usando crud\n            _crudClient.default.readDocument({\n              'collection': 'users',\n              'document_id': user_id\n            });\n          }\n        }\n\n        cursor = mi_mirror.querySelector('.cursor-container#socket_' + socket_id + identify);\n      }\n\n      if (cursor) {\n        CocreateUtilsCursor.print([\"Update Cursor\", cursor, coordinates], debug);\n        let font_size = getStyle(element, 'font-size');\n        font_size = parseFloat(font_size.substring(0, font_size.length - 2));\n        let cursor_height = font_size * 112.5 / 100;\n        let my_cursor = cursor.querySelector('.cursor');\n        cursor.dataset.start = start;\n        cursor.dataset.end = end;\n        cursor.dataset.socket_id = socket_id;\n        /*cursor.dataset.user_name = user.name\n        cursor.dataset.user_color = user.color*/\n\n        cursor.style[\"top\"] = coordinates.end.top + \"px\";\n        cursor.style[\"width\"] = \"2px\"; //2px\n\n        my_cursor.style[\"height\"] = cursor_height + \"px\";\n        cursor.style[\"left\"] = coordinates.end.left + \"px\"; //add selections\n\n        selection_user = document.getElementById('sel-' + socket_id + identify);\n\n        if (start != end && user) {\n          selection_user = document.getElementById('sel-' + socket_id + identify);\n\n          if (selection_user) {\n            selection_user.remove();\n          }\n\n          var scrollwidth = element.offsetWidth - element.scrollWidth;\n          var padding_right = parseInt(getComputedStyle(element)[\"paddingRight\"]);\n          selection_user = document.createElement('span');\n          selection_user.id = 'sel-' + socket_id + identify;\n          selection_user.className = 'selectors_by_users';\n          let style_mirror = getComputedStyle(mi_mirror);\n          selection_user.style[\"position\"] = \"absolute\";\n          selection_user.style[\"top\"] = style_mirror.paddingTop;\n          selection_user.style[\"left\"] = style_mirror.paddingLeft;\n          selection_user.style[\"padding-right\"] = scrollwidth + padding_right + \"px\";\n          mi_mirror.insertBefore(selection_user, mi_mirror.firstChild);\n          let selection_span_by_user = document.createElement('span');\n          selection_span_by_user.id = 'selection-' + socket_id + identify;\n          selection_span_by_user.style.backgroundColor = user.color;\n          let value_element = ['TEXTAREA', 'INPUT'].indexOf(element.nodeName) == -1 ? element.innerHTML : element.value;\n          selection_user.textContent = value_element.substring(0, start);\n          let value_span_selection = value_element.substring(start, end) || '';\n          console.log(\"Selection \", value_span_selection, start, end); //selection_span_by_user.style.opacity = 0.5;\n\n          selection_span_by_user.textContent = value_span_selection;\n          selection_user.appendChild(selection_span_by_user);\n        } //end Selections\n        else {\n            if (selection_user) {\n              selection_user.remove();\n            }\n          }\n      }\n    } //end if document_id\n\n  } //end activate_cursors\n\n} //draw_cursor\n\n\nfunction refresh_mirror(element) {\n  var id_mirror = '';\n  let document_id = element.getAttribute('data-document_id') || '';\n\n  if (document_id != '') {\n    name = element.getAttribute('name');\n    if (element.dataset['mirror_id']) id_mirror = element.dataset['mirror_id'];else return; //console.log(\"Refresh \",id_mirror)\n\n    var mi_mirror = document.getElementById(id_mirror);\n    CocreateUtilsCursor.print([\"refresh_mirror \", mi_mirror], debug);\n    var selector_element = element.nodeName + \"[name='\" + name + \"'][data-document_id='\" + document_id + \"']\";\n    CocreateUtilsCursor.print([\"selector -> \" + selector_element], debug);\n\n    if (mi_mirror) {\n      computed = getComputedStyle(element);\n      style = mi_mirror.style;\n      style.width = element.offsetWidth - (parseInt(computed.borderLeftWidth) + parseInt(computed.borderRightWidth)) + 'px';\n      style.height = element.offsetHeight - (parseInt(computed.borderTopWidth) + parseInt(computed.borderBottomWidth)) + 'px';\n      var cursor_container = mi_mirror.querySelectorAll('.cursor-container');\n      cursor_container.forEach(function (child_cursor, index, array) {\n        //console.log(\"REdraw cursor\")\n        let child = child_cursor.querySelector('.cursor-flag');\n        let dataset_child = child.dataset;\n        let dataset = child_cursor.dataset;\n        draw_cursor({\n          element: element,\n          startPosition: dataset.start,\n          endPositon: dataset.end,\n          clientId: dataset.socket_id,\n          user: {\n            'color': dataset_child.user_color,\n            'name': dataset.user_name\n          }\n        });\n      });\n    }\n  } //end document\n\n} //end verify \n\n\nElement.prototype.remove = function () {\n  if (this.parentElement) {\n    this.parentElement.removeChild(this);\n  }\n};\n\nfunction recalculate_local_cursors(element, count) {\n  CocreateUtilsCursor.print(\"count \" + count, debug);\n  let my_start = !element.hasAttribute('contenteditable') ? element.selectionStart : parseInt(element.getAttribute(\"selection_start\")); //let my_start   = element.selectionStart\n\n  let name = element.getAttribute('name') || '';\n  let document_id = element.getAttribute('data-document_id') || '';\n  let collection = element.getAttribute('data-collection') || '';\n  let selector = '[data-collection=\"' + collection + '\"][data-document_id=\"' + document_id + '\"][name=\"' + name + '\"]';\n  let id_mirror = element.dataset['mirror_id']; //let id_mirror = document_id+name+'--mirror-div';\n\n  let mirrorDiv = document.getElementById(id_mirror);\n  let cursor_container = mirrorDiv ? mirrorDiv.querySelectorAll('.cursor-container') : null;\n\n  if (cursor_container) {\n    let containers_cursors = [];\n    cursor_container.forEach(function (child_cursor, index, array) {\n      let start = parseInt(child_cursor.getAttribute('data-start'));\n      let user_name = child_cursor.getAttribute('data-user_name');\n      CocreateUtilsCursor.print([\"my_start local\", my_start, 'start cursor ' + user_name + \" = \", start], debug);\n\n      if (start > my_start && containers_cursors.indexOf(user_name) == -1) {\n        CocreateUtilsCursor.print(\"Es mayor\", debug);\n        let end = parseInt(child_cursor.getAttribute('data-end'));\n        let pos_start = start + count;\n        let pos_end = end + count;\n        CocreateUtilsCursor.print(['pos_start', pos_start, 'pos_end', pos_end], debug);\n        let dataset = child_cursor.querySelector('.cursor-flag').dataset;\n        let clientId = dataset.socket_id;\n        let json = {\n          element: element,\n          startPosition: pos_start,\n          endPositon: pos_end,\n          clientId: clientId,\n          'user': {\n            'color': dataset.user_color,\n            'name': dataset.user_name\n          }\n        };\n        CocreateUtilsCursor.print([\"sent Draw Cursor \", json], debug);\n        draw_cursor(json);\n        containers_cursors.push(user_name);\n      } //mirrorDiv.appendChild(child_cursor);\n\n    });\n  }\n}\n\nfunction initCursorEl(element) {\n  let formulario = getParents(element, 'form');\n  let realtime = element.hasAttribute('data-realtime') ? element.getAttribute('data-realtime') : 'true';\n\n  if (realtime == 'true' || formulario && formulario.getAttribute('data-realtime') == 'true') {\n    if (realtime == 'false') return false;\n    CocreateUtilsCursor.print([\"Init Events \", element], debug);\n    /*\n    element.addEventListener('input',function(event){\n        let start = element.selectionStart;\n        let end = element.selectionEnd;\n        let coordinates = getCaretCoordinates(element,start,end);\n        let count = 0;\n        switch(event.inputType){\n          case 'insertText':\n            count = 1;\n          break;\n          case 'insertFromPaste':\n           // count = event.clipboardData.getData('Text').length\n          break;\n          case 'deleteContentBackward':\n          //case 'insertFromPaste':\n            count = -1;\n          break;\n        }\n        if(count)\n          recalculate_local_cursors(this,count)\n    },false)\n    */\n\n    element.addEventListener('scroll', function () {\n      CocreateUtilsCursor.print([\"Move Scroll \", element], true);\n      let name = element.getAttribute('name');\n      let document_id = element.getAttribute('data-document_id') || '';\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n\n      if (mi_mirror) {\n        mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n      }\n    }, false); //resize\n\n    function outputsize() {\n      element_multicursors.forEach(function (element_for, index, array) {\n        let name = element_for.getAttribute('name');\n        let id_mirror = element.dataset['mirror_id'];\n        CocreateUtilsCursor.print([\"Resize id_mirror -> \" + id_mirror], debug);\n        let mi_mirror = document.getElementById(id_mirror);\n\n        if (mi_mirror) {\n          mi_mirror.style[\"width\"] = element_for.offsetWidth + \"px\";\n          mi_mirror.style[\"height\"] = element_for.offsetHeight + \"px\"; //var isFocused = (document.activeElement === element_for);\n          //verify_cursor(element_for,isFocused)\n\n          var isFocused = document.activeElement === element;\n          if (isFocused) getCaretCoordinates(element, element.selectionStart, element.selectionEnd);\n          refresh_mirror(element);\n        }\n      });\n    }\n\n    new ResizeObserver(outputsize).observe(element); //if (element.nodeName == 'INPUT'){\n\n    element.addEventListener('mousemove', function (event) {\n      let name = element.getAttribute('name');\n      let document_id = element.getAttribute('data-document_id');\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    });\n    element.addEventListener('focusout', function (event) {\n      let name = element.getAttribute('name');\n      let document_id = element.getAttribute('data-document_id') || '';\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    });\n    element.addEventListener('keydown', function (event) {\n      //console.log(\"keydown L,T => \",element.scrollLeft,element.scrollTop)\n      let name = element.getAttribute('name');\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n\n      if (mi_mirror) {\n        mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n        refresh_mirror(element);\n      }\n    });\n    element.addEventListener('keyup', function (event) {\n      //console.log(\"keyup L,T => \",element.scrollLeft,element.scrollTop)\n      let name = element.getAttribute('name');\n      let id_mirror = element.dataset['mirror_id'];\n      let mi_mirror = document.getElementById(id_mirror);\n      if (mi_mirror) mi_mirror.scrollTo(element.scrollLeft, element.scrollTop);\n    }); //}\n  } //end if realtime TRUE\n\n}\n\nvar initialize_multicursor = function (element_multicursors) {\n  element_multicursors.forEach(function (element, index, array) {\n    initCursorEl(element);\n  }); // element_multicursors.forEach\n}; //end initialize_multicursor \n\n\nwindow.addEventListener('resize', function (e) {\n  //console.log(\"resize windows\")\n  document.querySelectorAll('[data-mirror_id]').forEach(function (element, index, array) {\n    refresh_mirror(element);\n  }); // element_multicursors.forEach\n}, true);\ndocument.addEventListener('scroll', function (e) {\n  //console.log(\"Scroll \")\n  //console.log(\"scroll windows\",document.body.scrollLeft,document.body.scrollTop)\n  //element_multicursors.forEach(function (element, index, array) {\n  document.querySelectorAll('[data-mirror_id]').forEach(function (element, index, array) {\n    refresh_mirror(element);\n  }); // element_multicursors.forEach\n}, true);\n\nfunction initCursorElements(container) {\n  let mainContainer = container || window;\n\n  if (!mainContainer.querySelectorAll) {\n    return;\n  }\n\n  let elements = mainContainer.querySelectorAll('[data-realtime=true]');\n  elements.forEach(el => {\n    initCursorEl(el);\n  });\n}\n\nif (debug) console.log(\"elements to INIT -> \", element_multicursors);\ninitialize_multicursor(element_multicursors); // CoCreateInit.register_old('[data-realtime=true]',initCursorEl);\n// CoCreateInit.register('CoCreateCursor', window, initCursorElements);\n\n_observer.default.init({\n  name: 'CoCreateCursor',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name][data-realtime=true]',\n  callback: function (mutation) {\n    initCursorElements(mutation.target);\n  }\n});\n\nconst CoCreateCursors = {\n  draw_cursor,\n  refresh_mirror,\n  recalculate_local_cursors\n};\nvar _default = CoCreateCursors;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n")},"./node_modules/file-loader/dist/cjs.js!./src/CoCreate-cursors.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "4bae7f440ab1de156d0d0d0d0a566858.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4vc3JjL0NvQ3JlYXRlLWN1cnNvcnMuY3NzPzc2YTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLHFCQUF1Qix5Q0FBeUMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanMhLi9zcmMvQ29DcmVhdGUtY3Vyc29ycy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNGJhZTdmNDQwYWIxZGUxNTZkMGQwZDBkMGE1NjY4NTguY3NzXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/file-loader/dist/cjs.js!./src/CoCreate-cursors.css\n')},"./src/CoCreate-cursors.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_CoCreate_cursors_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/file-loader/dist/cjs.js!./CoCreate-cursors.css */ "./node_modules/file-loader/dist/cjs.js!./src/CoCreate-cursors.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_CoCreate_cursors_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4vc3JjL0NvQ3JlYXRlLWN1cnNvcnMuY3NzP2NmYTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF3RjtBQUN4RixZQUFtRzs7QUFFbkcsZUFBZTs7QUFFZjs7QUFFQSxhQUFhLHlHQUFHLENBQUMsK0ZBQU87Ozs7QUFJeEIsaUVBQWUsRSIsImZpbGUiOiIuL3NyYy9Db0NyZWF0ZS1jdXJzb3JzLmNzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvTGlua1RhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2ZpbGUtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ29DcmVhdGUtY3Vyc29ycy5jc3NcIjtcblxudmFyIG9wdGlvbnMgPSB7XCJpbmplY3RUeXBlXCI6XCJsaW5rVGFnXCJ9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQge30iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/CoCreate-cursors.css\n')},"./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nmodule.exports = function (url, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {};\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  var link = document.createElement('link');\n  link.rel = 'stylesheet';\n  link.href = url;\n  Object.keys(options.attributes).forEach(function (key) {\n    link.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(link);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(link);\n  }\n\n  return function (newUrl) {\n    if (typeof newUrl === 'string') {\n      link.href = newUrl;\n    } else {\n      link.parentNode.removeChild(link);\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b0xpbmtUYWcuanM/Njc0ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixLQUF3QyxHQUFHLHNCQUFpQixHQUFHLENBQUk7O0FBRW5GO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b0xpbmtUYWcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuYXR0cmlidXRlcyA9IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICdvYmplY3QnID8gb3B0aW9ucy5hdHRyaWJ1dGVzIDoge307XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG4gIGxpbmsucmVsID0gJ3N0eWxlc2hlZXQnO1xuICBsaW5rLmhyZWYgPSB1cmw7XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRpb25zLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChsaW5rKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobGluayk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG5ld1VybCkge1xuICAgIGlmICh0eXBlb2YgbmV3VXJsID09PSAnc3RyaW5nJykge1xuICAgICAgbGluay5ocmVmID0gbmV3VXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgfVxuICB9O1xufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js\n")}},__webpack_module_cache__={};function __webpack_require__(t){var I=__webpack_module_cache__[t];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=t=>{var I=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(t,I)=>{for(var n in I)__webpack_require__.o(I,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:I[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,I)=>Object.prototype.hasOwnProperty.call(t,I),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;__webpack_require__.g.importScripts&&(t=__webpack_require__.g.location+"");var I=__webpack_require__.g.document;if(!t&&I&&(I.currentScript&&(t=I.currentScript.src),!t)){var n=I.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=t})();var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));