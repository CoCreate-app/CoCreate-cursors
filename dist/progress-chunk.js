/*! For license information please see progress-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["progress-chunk"],{"../CoCreate-progress/src/index.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\nvar CoCreateProgress = {\n  selector: \".progress-wrapper\",\n  mainObjects: [],\n  init: function () {\n    this.initElement();\n    this.initEvent();\n  },\n  initElement: function (container) {\n    const main_container = container ? container : document;\n    let elements = main_container.querySelectorAll(this.selector);\n\n    let _this = this;\n\n    elements.forEach(el => {\n      let filter = CoCreate.filter.setFilter(el, 'data-progress_id', 'progress');\n      if (!filter) return;\n      let obj = {\n        el: el,\n        filter: filter,\n        id: el.getAttribute('data-progress_id')\n      };\n\n      _this.mainObjects.push(obj);\n\n      _this.fetchProgess(el);\n    });\n  },\n  initEvent: function () {\n    let _this = this;\n\n    CoCreate.socket.listen('readDocumentList', function (data) {\n      if (data.metadata == \"progress-total\") {\n        _this.renderProgress(data, true);\n      } else if (data.metadata == \"progress-value\") {\n        _this.renderProgress(data, false);\n      }\n    });\n  },\n\n  renderProgress(data, isTotal) {\n    //.\n    if (!data) return;\n    const element_id = data.element;\n\n    if (!element_id) {\n      return;\n    }\n\n    const result_count = data['data'].length;\n\n    let _this = this;\n\n    let elements = [];\n    let selector = isTotal ? '.progressTotal' : '.progressValue';\n    selector = selector + `[data-progress_id=\"${element_id}\"]`;\n    elements = document.querySelectorAll(selector);\n    elements.forEach(el => {\n      el.textContent = result_count;\n    }); //. set progressbar\n\n    elements = document.querySelectorAll(`.progressbar[data-progress_id=\"${element_id}\"]`);\n    elements.forEach(el => {\n      if (el.tagName === \"PROGRESS\") {\n        if (isTotal) {\n          el.setAttribute('max', result_count);\n        } else {\n          el.setAttribute('value', result_count);\n        }\n      } else {\n        if (isTotal) {\n          el.setAttribute('data-total', result_count);\n        } else {\n          el.setAttribute('data-value', result_count);\n        }\n\n        _this.renderBar(el);\n      }\n    });\n  },\n\n  renderBar: function (el) {\n    const total = Number(el.getAttribute('data-total'));\n    const value = Number(el.getAttribute('data-value'));\n\n    if (!total || !value || total === 0) {\n      return;\n    }\n\n    const percent = value / total * 100;\n    el.innerHTML = `<div style=\"width: ${percent}%\"></div>`;\n  },\n  fetchProgess: function (el) {\n    let select_obj = null;\n\n    let _id = el.getAttribute('data-progress_id');\n\n    this.mainObjects.forEach(item => {\n      if (item.id == _id) {\n        select_obj = item;\n      }\n    });\n    if (!select_obj) return;\n    let filter = select_obj.filter;\n    console.log(filter);\n    let totalFilter = CoCreate.filter.makeFetchOptions(filter);\n    let valueFilter = CoCreate.filter.makeFetchOptions(filter);\n    let progressName = el.getAttribute('data-progress_name');\n    let progressValue = el.getAttribute('data-progress_value');\n    let valueOperator = el.getAttribute('data-progress_operator') || \"contain\";\n    totalFilter['metadata'] = 'progress-total';\n    valueFilter['metadata'] = 'progress-value';\n    let val_filter = [].concat(valueFilter['operator']['filters']);\n    val_filter.push({\n      name: progressName,\n      value: [progressValue],\n      operator: valueOperator\n    });\n    valueFilter['operator']['filters'] = val_filter;\n    CoCreate.crud.readDocumentList(totalFilter);\n    CoCreate.crud.readDocumentList(valueFilter);\n  }\n};\nCoCreateProgress.init();\nvar _default = CoCreateProgress;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLXByb2dyZXNzL3NyYy9pbmRleC5qcz9kYWQyIl0sIm5hbWVzIjpbIkNvQ3JlYXRlUHJvZ3Jlc3MiLCJzZWxlY3RvciIsIm1haW5PYmplY3RzIiwiaW5pdCIsImluaXRFbGVtZW50IiwiaW5pdEV2ZW50IiwiY29udGFpbmVyIiwibWFpbl9jb250YWluZXIiLCJkb2N1bWVudCIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIl90aGlzIiwiZm9yRWFjaCIsImVsIiwiZmlsdGVyIiwiQ29DcmVhdGUiLCJzZXRGaWx0ZXIiLCJvYmoiLCJpZCIsImdldEF0dHJpYnV0ZSIsInB1c2giLCJmZXRjaFByb2dlc3MiLCJzb2NrZXQiLCJsaXN0ZW4iLCJkYXRhIiwibWV0YWRhdGEiLCJyZW5kZXJQcm9ncmVzcyIsImlzVG90YWwiLCJlbGVtZW50X2lkIiwiZWxlbWVudCIsInJlc3VsdF9jb3VudCIsImxlbmd0aCIsInRleHRDb250ZW50IiwidGFnTmFtZSIsInNldEF0dHJpYnV0ZSIsInJlbmRlckJhciIsInRvdGFsIiwiTnVtYmVyIiwidmFsdWUiLCJwZXJjZW50IiwiaW5uZXJIVE1MIiwic2VsZWN0X29iaiIsIl9pZCIsIml0ZW0iLCJjb25zb2xlIiwibG9nIiwidG90YWxGaWx0ZXIiLCJtYWtlRmV0Y2hPcHRpb25zIiwidmFsdWVGaWx0ZXIiLCJwcm9ncmVzc05hbWUiLCJwcm9ncmVzc1ZhbHVlIiwidmFsdWVPcGVyYXRvciIsInZhbF9maWx0ZXIiLCJjb25jYXQiLCJuYW1lIiwib3BlcmF0b3IiLCJjcnVkIiwicmVhZERvY3VtZW50TGlzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBSUEsZ0JBQWdCLEdBQUc7QUFFdEJDLFVBQVEsRUFBRSxtQkFGWTtBQUl0QkMsYUFBVyxFQUFFLEVBSlM7QUFNdEJDLE1BQUksRUFBRSxZQUFXO0FBQ2hCLFNBQUtDLFdBQUw7QUFDQSxTQUFLQyxT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QUFJZ0MsV0FBVyxHQUFHL0IsUUFBUSxDQUFDRCxNQUFULENBQWdCaUMsZ0JBQWhCLENBQWlDakMsTUFBakMsQ0FBbEI7QUFDQSxRQUFJa0MsV0FBVyxHQUFHakMsUUFBUSxDQUFDRCxNQUFULENBQWdCaUMsZ0JBQWhCLENBQWlDakMsTUFBakMsQ0FBbEI7QUFFQSxRQUFJbUMsWUFBWSxHQUFHcEMsRUFBRSxDQUFDTSxZQUFILENBQWdCLG9CQUFoQixDQUFuQjtBQUNBLFFBQUkrQixhQUFhLEdBQUdyQyxFQUFFLENBQUNNLFlBQUgsQ0FBZ0IscUJBQWhCLENBQXBCO0FBRUEsUUFBSWdDLGFBQWEsR0FBR3RDLEVBQUUsQ0FBQ00sWUFBSCxDQUFnQix3QkFBaEIsS0FBNkMsU0FBakU7QUFFQTJCLGVBQVcsQ0FBQyxVQUFELENBQVgsR0FBMEIsZ0JBQTFCO0FBQ0FFLGVBQVcsQ0FBQyxVQUFELENBQVgsR0FBMEIsZ0JBQTFCO0FBRUEsUUFBSUksVUFBVSxHQUFHLEdBQUdDLE1BQUgsQ0FBVUwsV0FBVyxDQUFDLFVBQUQsQ0FBWCxDQUF3QixTQUF4QixDQUFWLENBQWpCO0FBQ0FJLGNBQVUsQ0FBQ2hDLElBQVgsQ0FBZ0I7QUFBQ2tDLFVBQUksRUFBRUwsWUFBUDtBQUFxQlgsV0FBSyxFQUFFLENBQUNZLGFBQUQsQ0FBNUI7QUFBNkNLLGNBQVEsRUFBRUo7QUFBdkQsS0FBaEI7QUFDQUgsZUFBVyxDQUFDLFVBQUQsQ0FBWCxDQUF3QixTQUF4QixJQUFxQ0ksVUFBckM7QUFFQXJDLFlBQVEsQ0FBQ3lDLElBQVQsQ0FBY0MsZ0JBQWQsQ0FBK0JYLFdBQS9CO0FBQ0EvQixZQUFRLENBQUN5QyxJQUFULENBQWNDLGdCQUFkLENBQStCVCxXQUEvQjtBQUNBO0FBaklxQixDQUF2QjtBQW9JQWhELGdCQUFnQixDQUFDRyxJQUFqQjtlQUVlSCxnQiIsImZpbGUiOiIuLi9Db0NyZWF0ZS1wcm9ncmVzcy9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQ29DcmVhdGVQcm9ncmVzcyA9IHtcblx0XG5cdHNlbGVjdG9yOiBcIi5wcm9ncmVzcy13cmFwcGVyXCIsXG5cdFxuXHRtYWluT2JqZWN0czogW10sXG5cdFxuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmluaXRFbGVtZW50KClcblx0XHR0aGlzLmluaXRFdmVudCgpXG5cdH0sXG5cdFxuXHRpbml0RWxlbWVudDogZnVuY3Rpb24oY29udGFpbmVyKSB7XG5cdFx0Y29uc3QgbWFpbl9jb250YWluZXIgPSBjb250YWluZXIgPyBjb250YWluZXIgOiBkb2N1bWVudDtcblx0XHRcblx0XHRsZXQgZWxlbWVudHMgPSBtYWluX2NvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuc2VsZWN0b3IpO1xuXHRcdGxldCBfdGhpcyA9IHRoaXM7XG5cdFx0ZWxlbWVudHMuZm9yRWFjaCgoZWwpID0+IHtcblx0XHRcdGxldCBmaWx0ZXIgPSBDb0NyZWF0ZS5maWx0ZXIuc2V0RmlsdGVyKGVsLCAnZGF0YS1wcm9ncmVzc19pZCcsICdwcm9ncmVzcycpXG5cdFx0XHRcblx0XHRcdGlmICghZmlsdGVyKSByZXR1cm47XG5cdFx0XHRcblx0XHRcdGxldCBvYmogPSB7XG5cdFx0XHRcdGVsOiBlbCxcblx0XHRcdFx0ZmlsdGVyOiBmaWx0ZXIsXG5cdFx0XHRcdGlkOiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZ3Jlc3NfaWQnKVxuXHRcdFx0fVxuXHRcdFx0X3RoaXMubWFpbk9iamVjdHMucHVzaChvYmopO1xuXHRcdFx0X3RoaXMuZmV0Y2hQcm9nZXNzKGVsKVxuXG5cdFx0fSlcblx0fSxcblx0XG5cdGluaXRFdmVudDogZnVuY3Rpb24oKSB7XG5cdFx0bGV0IF90aGlzID0gdGhpcztcblx0XHRDb0NyZWF0ZS5zb2NrZXQubGlzdGVuKCdyZWFkRG9jdW1lbnRMaXN0JywgZnVuY3Rpb24oZGF0YSkge1xuXG5cdFx0XHRpZiAoZGF0YS5tZXRhZGF0YSA9PSBcInByb2dyZXNzLXRvdGFsXCIpIHtcblx0XHRcdFx0X3RoaXMucmVuZGVyUHJvZ3Jlc3MoZGF0YSwgdHJ1ZSk7XG5cdFx0XHR9IGVsc2UgaWYgKGRhdGEubWV0YWRhdGEgPT0gXCJwcm9ncmVzcy12YWx1ZVwiKSB7XG5cdFx0XHRcdF90aGlzLnJlbmRlclByb2dyZXNzKGRhdGEsIGZhbHNlKVxuXHRcdFx0fVxuXHRcdH0pXG5cdH0sXG5cdFxuXHRyZW5kZXJQcm9ncmVzcyhkYXRhLCBpc1RvdGFsKSB7XG5cdFx0Ly8uXG5cdFx0aWYgKCFkYXRhKSByZXR1cm47XG5cdFx0Y29uc3QgZWxlbWVudF9pZCA9IGRhdGEuZWxlbWVudDtcblx0XHRpZiAoIWVsZW1lbnRfaWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCByZXN1bHRfY291bnQgPSBkYXRhWydkYXRhJ10ubGVuZ3RoXG5cdFx0bGV0IF90aGlzID0gdGhpcztcdFx0XG5cdFx0bGV0IGVsZW1lbnRzID0gW107XG5cdFx0bGV0IHNlbGVjdG9yICA9IGlzVG90YWwgPyAnLnByb2dyZXNzVG90YWwnIDogJy5wcm9ncmVzc1ZhbHVlJztcblx0XHRzZWxlY3RvciA9IHNlbGVjdG9yICsgYFtkYXRhLXByb2dyZXNzX2lkPVwiJHtlbGVtZW50X2lkfVwiXWA7XG5cdFx0XG5cdFx0ZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKVxuXG5cdFx0ZWxlbWVudHMuZm9yRWFjaCgoZWwpID0+IHtcblx0XHRcdGVsLnRleHRDb250ZW50ID0gcmVzdWx0X2NvdW50O1xuXHRcdH0pXG5cdFx0XG5cdFx0Ly8uIHNldCBwcm9ncmVzc2JhclxuXHRcdFxuXHRcdGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgLnByb2dyZXNzYmFyW2RhdGEtcHJvZ3Jlc3NfaWQ9XCIke2VsZW1lbnRfaWR9XCJdYClcblx0XHRcblx0XHRlbGVtZW50cy5mb3JFYWNoKChlbCkgPT4ge1xuXHRcdFx0XG5cdFx0XHRpZiAoZWwudGFnTmFtZSA9PT0gXCJQUk9HUkVTU1wiKSB7XG5cdFx0XHRcdGlmIChpc1RvdGFsKSB7XG5cdFx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKCdtYXgnLCByZXN1bHRfY291bnQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgndmFsdWUnLCByZXN1bHRfY291bnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoaXNUb3RhbCkge1xuXHRcdFx0XHRcdGVsLnNldEF0dHJpYnV0ZSgnZGF0YS10b3RhbCcsIHJlc3VsdF9jb3VudCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJywgcmVzdWx0X2NvdW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfdGhpcy5yZW5kZXJCYXIoZWwpXG5cdFx0XHR9XG5cdFx0fSlcblx0fSxcblx0XG5cdHJlbmRlckJhcjogZnVuY3Rpb24oZWwpIHtcblx0XHRjb25zdCB0b3RhbCA9IE51bWJlcihlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdG90YWwnKSk7XG5cdFx0Y29uc3QgdmFsdWUgPSBOdW1iZXIoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykpO1xuXHRcdFxuXHRcdGlmICghdG90YWwgfHwgIXZhbHVlIHx8IHRvdGFsID09PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnN0IHBlcmNlbnQgPSAodmFsdWUgLyB0b3RhbCkgKiAxMDA7XG5cdFx0ZWwuaW5uZXJIVE1MID0gYDxkaXYgc3R5bGU9XCJ3aWR0aDogJHtwZXJjZW50fSVcIj48L2Rpdj5gO1xuXHR9LFxuXHRcblx0ZmV0Y2hQcm9nZXNzOiBmdW5jdGlvbihlbCkge1xuXHRcdGxldCBzZWxlY3Rfb2JqID0gbnVsbFxuXHRcdGxldCBfaWQgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZ3Jlc3NfaWQnKVxuXHRcdFxuXHRcdHRoaXMubWFpbk9iamVjdHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0aWYgKGl0ZW0uaWQgPT0gX2lkKSB7XG5cdFx0XHRcdHNlbGVjdF9vYmogPSBpdGVtO1xuXHRcdFx0fVxuXHRcdH0pXG5cdFx0aWYgKCFzZWxlY3Rfb2JqKSByZXR1cm47XG5cdFx0XG5cdFx0bGV0IGZpbHRlciA9IHNlbGVjdF9vYmouZmlsdGVyO1xuXHRcdGNvbnNvbGUubG9nKGZpbHRlcilcblx0XHRsZXQgdG90YWxGaWx0ZXIgPSBDb0NyZWF0ZS5maWx0ZXIubWFrZUZldGNoT3B0aW9ucyhmaWx0ZXIpO1xuXHRcdGxldCB2YWx1ZUZpbHRlciA9IENvQ3JlYXRlLmZpbHRlci5tYWtlRmV0Y2hPcHRpb25zKGZpbHRlcilcblxuXHRcdGxldCBwcm9ncmVzc05hbWUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZ3Jlc3NfbmFtZScpXG5cdFx0bGV0IHByb2dyZXNzVmFsdWUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJvZ3Jlc3NfdmFsdWUnKVxuXHRcdFxuXHRcdGxldCB2YWx1ZU9wZXJhdG9yID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXByb2dyZXNzX29wZXJhdG9yJykgfHwgXCJjb250YWluXCJcblx0XHRcblx0XHR0b3RhbEZpbHRlclsnbWV0YWRhdGEnXSA9ICdwcm9ncmVzcy10b3RhbCc7XG5cdFx0dmFsdWVGaWx0ZXJbJ21ldGFkYXRhJ10gPSAncHJvZ3Jlc3MtdmFsdWUnXG5cdFx0XG5cdFx0bGV0IHZhbF9maWx0ZXIgPSBbXS5jb25jYXQodmFsdWVGaWx0ZXJbJ29wZXJhdG9yJ11bJ2ZpbHRlcnMnXSk7XG5cdFx0dmFsX2ZpbHRlci5wdXNoKHtuYW1lOiBwcm9ncmVzc05hbWUsIHZhbHVlOiBbcHJvZ3Jlc3NWYWx1ZV0sIG9wZXJhdG9yOiB2YWx1ZU9wZXJhdG9yfSk7XG5cdFx0dmFsdWVGaWx0ZXJbJ29wZXJhdG9yJ11bJ2ZpbHRlcnMnXSA9IHZhbF9maWx0ZXI7XG5cblx0XHRDb0NyZWF0ZS5jcnVkLnJlYWREb2N1bWVudExpc3QodG90YWxGaWx0ZXIpXG5cdFx0Q29DcmVhdGUuY3J1ZC5yZWFkRG9jdW1lbnRMaXN0KHZhbHVlRmlsdGVyKVxuXHR9XG59XG5cbkNvQ3JlYXRlUHJvZ3Jlc3MuaW5pdCgpO1xuXG5leHBvcnQgZGVmYXVsdCBDb0NyZWF0ZVByb2dyZXNzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-progress/src/index.js\n")}}]);