/*! For license information please see dnd-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["dnd-chunk"],{"../CoCreate-dnd/src/collaboration.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ "../CoCreate-utils/src/index.js"));\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! @cocreate/message */ "../CoCreate-message/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global dom*/\n\n/*global CoCreate*/\n\n/*global elementConfig*/\n\n/*global DOMParser*/\n\n/*global domEditor*/\n\n/*global CoCreate.socket*/\nfunction wrapper() {\n  if (window.parent !== window) return;\n  window.addEventListener("load", () => {\n    _message.default.listen(\'domEditor\', function (data) {\n      console.log(\'raw object recieved: \', data.target, data.value[1], window.location.pathname); // resolving the element_id to real element in the clinet\n\n      if (data.target) {\n        data.target = document.querySelector(`[data-element_id="${data.target}"]`);\n      }\n\n      if (data.value[1]) {\n        data.value[1] = document.querySelector(`[data-element_id="${data.value[1]}"]`);\n      }\n\n      if (!data.target) return console.log(\'dnd error: draggble is null\');\n      if (!data.value[1]) return console.log(\'dnd error: droppable is null\'); // passing it to domEditor\n\n      let [position, el] = data.value;\n      data.target.insertAdjacentElement(position, el);\n    });\n\n    _message.default.listen("dndNewElement", function (data) {\n      console.log("raw object recieved: ", data.target, data.value[1], window.location.pathname);\n\n      try {\n        if (data.path.length) {\n          let iframe = document.querySelector(data.path[0]);\n          let context = iframe.contentWindow.document || iframe.contentDocument;\n          data.target = context.querySelector(`[data-element_id=${data.target}]`);\n        } else {\n          data.target = document.querySelector(`[data-element_id=${data.target}]`);\n        }\n\n        data.value[1] = _utils.default.parseTextToHtml(data.value[1]);\n\n        if (data.hiddenAttribute) {\n          for (let [key, value] of Object.entries(data.hiddenAttribute)) {\n            data.value[1].setHiddenAttribute(key, value);\n          }\n        } // console.log("with object: ", data, window.location.pathname);\n        // passing it to domEditor\n\n\n        let [position, el] = data.value;\n        data.target.insertAdjacentElement(position, el); // domEditor(data);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  });\n  window.addEventListener("dndsuccess", e => {\n    let {\n      dropedEl,\n      dragedEl,\n      position,\n      dropType,\n      path\n    } = e.detail;\n    let CoCreate = dragedEl.ownerDocument !== dropedEl.ownerDocument ? window.iframes.guests.canvas.window.CoCreate : window.CoCreate;\n    if (!dropedEl.getAttribute("data-element_id")) dropedEl.setAttribute("data-element_id", _utils.default.UUID());\n    dropedEl = dropedEl.getAttribute("data-element_id");\n\n    if (dropType === "data-cloneable") {\n      let hiddenAttribute = dragedEl.getAllHiddenAttribute();\n      dragedEl = dragedEl.outerHTML;\n\n      _message.default.send({\n        broadcast_sender: false,\n        rooms: "",\n        emit: {\n          message: "dndNewElement",\n          data: {\n            target: dropedEl,\n            method: "insertAdjacentElement",\n            value: [position, dragedEl],\n            path,\n            hiddenAttribute\n          }\n        }\n      });\n    } else {\n      if (!dragedEl.getAttribute("data-element_id")) dragedEl.setAttribute("data-element_id", _utils.default.UUID());\n      dragedEl = dragedEl.getAttribute("data-element_id");\n\n      _message.default.send({\n        broadcast_sender: true,\n        rooms: "",\n        emit: {\n          message: "domEditor",\n          data: {\n            target: dropedEl,\n            method: "insertAdjacentElement",\n            value: [position, dragedEl]\n          }\n        }\n      });\n    }\n  });\n}\n\nwrapper();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/collaboration.js\n')},"../CoCreate-dnd/src/dnd-config.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = dndConfigs;\n\nvar _index = __webpack_require__(/*! ./index.js */ "../CoCreate-dnd/src/index.js");\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ "../CoCreate-observer/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global initContainer*/\nfunction dndConfigs() {\n  _observer.default.init({\n    name: "dnd-config",\n    observe: ["childList"],\n    include: \'.sortable, .cloneable\',\n    callback: mutation => {\n      if (mutation.target.classList.contains(\'sortable\')) (0, _index.initContainer)({\n        target: mutation.target\n      });else (0, _index.initContainer)({\n        target: mutation.target,\n        cloneable: true\n      }); // let sortables = document.querySelectorAll(".sortable");\n      // sortables.forEach((sortable) => {\n      //   initContainer({ target: sortable });\n      // });\n      // let cloneables = document.querySelectorAll(".cloneable");\n      // cloneables.forEach((cloneable) => {\n      //   initContainer({ target: cloneable, cloneable: true });\n      // });\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvZG5kLWNvbmZpZy5qcz9kMjBmIl0sIm5hbWVzIjpbImRuZENvbmZpZ3MiLCJvYnNlcnZlciIsImluaXQiLCJuYW1lIiwib2JzZXJ2ZSIsImluY2x1ZGUiLCJjYWxsYmFjayIsIm11dGF0aW9uIiwidGFyZ2V0IiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJjbG9uZWFibGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFFQTs7OztBQUhBO0FBSWUsU0FBU0EsVUFBVCxHQUFzQjtBQUluQ0Msb0JBQVNDLElBQVQsQ0FBYztBQUNaQyxRQUFJLEVBQUUsWUFETTtBQUVaQyxXQUFPLEVBQUUsQ0FBQyxXQUFELENBRkc7QUFHWkMsV0FBTyxFQUFDLHVCQUhJO0FBSVpDLFlBQVEsRUFBRUMsUUFBUSxJQUFJO0FBQ3BCLFVBQUdBLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQkMsU0FBaEIsQ0FBMEJDLFFBQTFCLENBQW1DLFVBQW5DLENBQUgsRUFDRywwQkFBYztBQUFFRixjQUFNLEVBQUVELFFBQVEsQ0FBQ0M7QUFBbkIsT0FBZCxFQURILEtBR0csMEJBQWM7QUFBRUEsY0FBTSxFQUFFRCxRQUFRLENBQUNDLE1BQW5CO0FBQTJCRyxpQkFBUyxFQUFFO0FBQXRDLE9BQWQsRUFKaUIsQ0FLcEI7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNEO0FBcEJXLEdBQWQ7QUF3QkQiLCJmaWxlIjoiLi4vQ29DcmVhdGUtZG5kL3NyYy9kbmQtY29uZmlnLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWwgaW5pdENvbnRhaW5lciovXG5pbXBvcnQgeyBpbml0Q29udGFpbmVyIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuaW1wb3J0IG9ic2VydmVyIGZyb20gJ0Bjb2NyZWF0ZS9vYnNlcnZlcic7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkbmRDb25maWdzKCkge1xuXG5cblxuICBvYnNlcnZlci5pbml0KHtcbiAgICBuYW1lOiBcImRuZC1jb25maWdcIixcbiAgICBvYnNlcnZlOiBbXCJjaGlsZExpc3RcIl0sXG4gICAgaW5jbHVkZTonLnNvcnRhYmxlLCAuY2xvbmVhYmxlJyxcbiAgICBjYWxsYmFjazogbXV0YXRpb24gPT4ge1xuICAgICAgaWYobXV0YXRpb24udGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc29ydGFibGUnKSlcbiAgICAgICAgIGluaXRDb250YWluZXIoeyB0YXJnZXQ6IG11dGF0aW9uLnRhcmdldCB9KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgaW5pdENvbnRhaW5lcih7IHRhcmdldDogbXV0YXRpb24udGFyZ2V0LCBjbG9uZWFibGU6IHRydWUgfSk7XG4gICAgICAvLyBsZXQgc29ydGFibGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zb3J0YWJsZVwiKTtcbiAgICBcbiAgICAgIC8vIHNvcnRhYmxlcy5mb3JFYWNoKChzb3J0YWJsZSkgPT4ge1xuICAgICAgLy8gICBpbml0Q29udGFpbmVyKHsgdGFyZ2V0OiBzb3J0YWJsZSB9KTtcbiAgICAgIC8vIH0pO1xuICAgIFxuICAgICAgLy8gbGV0IGNsb25lYWJsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNsb25lYWJsZVwiKTtcbiAgICBcbiAgICAgIC8vIGNsb25lYWJsZXMuZm9yRWFjaCgoY2xvbmVhYmxlKSA9PiB7XG4gICAgICAvLyAgIGluaXRDb250YWluZXIoeyB0YXJnZXQ6IGNsb25lYWJsZSwgY2xvbmVhYmxlOiB0cnVlIH0pO1xuICAgICAgLy8gfSk7XG4gICAgfSxcbiAgfSk7XG5cblxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/dnd-config.js\n')},"../CoCreate-dnd/src/eventUtil.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = eventUtil;\n\n// create a javascript-like event to be used in other classes\nfunction eventUtil() {\n  this.listener = {}; // register event, like addEventListener\n\n  this.on = function (type, callback) {\n    if (!Object.hasOwnProperty(type)) {\n      this.listener[type] = [];\n    }\n\n    this.listener[type].push(callback);\n  }; // dispatch an event\n\n\n  this.dispatch = function (type, data) {\n    if (this.listener.hasOwnProperty(type)) {\n      this.listener[type].forEach(callback => callback(data));\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvZXZlbnRVdGlsLmpzPzA4OGQiXSwibmFtZXMiOlsiZXZlbnRVdGlsIiwibGlzdGVuZXIiLCJvbiIsInR5cGUiLCJjYWxsYmFjayIsIk9iamVjdCIsImhhc093blByb3BlcnR5IiwicHVzaCIsImRpc3BhdGNoIiwiZGF0YSIsImZvckVhY2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUdlLFNBQVNBLFNBQVQsR0FBcUI7QUFDbEMsT0FBS0MsUUFBTCxHQUFnQixFQUFoQixDQURrQyxDQUdsQzs7QUFDQSxPQUFLQyxFQUFMLEdBQVUsVUFBU0MsSUFBVCxFQUFlQyxRQUFmLEVBQXlCO0FBQ2pDLFFBQUksQ0FBQ0MsTUFBTSxDQUFDQyxjQUFQLENBQXNCSCxJQUF0QixDQUFMLEVBQWtDO0FBQ2hDLFdBQUtGLFFBQUwsQ0FBY0UsSUFBZCxJQUFzQixFQUF0QjtBQUNEOztBQUNELFNBQUtGLFFBQUwsQ0FBY0UsSUFBZCxFQUFvQkksSUFBcEIsQ0FBeUJILFFBQXpCO0FBQ0QsR0FMRCxDQUprQyxDQVdsQzs7O0FBQ0EsT0FBS0ksUUFBTCxHQUFnQixVQUFTTCxJQUFULEVBQWVNLElBQWYsRUFBcUI7QUFDbkMsUUFBSSxLQUFLUixRQUFMLENBQWNLLGNBQWQsQ0FBNkJILElBQTdCLENBQUosRUFBd0M7QUFDdEMsV0FBS0YsUUFBTCxDQUFjRSxJQUFkLEVBQW9CTyxPQUFwQixDQUE0Qk4sUUFBUSxJQUFJQSxRQUFRLENBQUNLLElBQUQsQ0FBaEQ7QUFDRDtBQUNGLEdBSkQ7QUFNRCIsImZpbGUiOiIuLi9Db0NyZWF0ZS1kbmQvc3JjL2V2ZW50VXRpbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNyZWF0ZSBhIGphdmFzY3JpcHQtbGlrZSBldmVudCB0byBiZSB1c2VkIGluIG90aGVyIGNsYXNzZXNcblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBldmVudFV0aWwoKSB7XG4gIHRoaXMubGlzdGVuZXIgPSB7fVxuXG4gIC8vIHJlZ2lzdGVyIGV2ZW50LCBsaWtlIGFkZEV2ZW50TGlzdGVuZXJcbiAgdGhpcy5vbiA9IGZ1bmN0aW9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFPYmplY3QuaGFzT3duUHJvcGVydHkodHlwZSkpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJbdHlwZV0gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5saXN0ZW5lclt0eXBlXS5wdXNoKGNhbGxiYWNrKVxuICB9XG5cbiAgLy8gZGlzcGF0Y2ggYW4gZXZlbnRcbiAgdGhpcy5kaXNwYXRjaCA9IGZ1bmN0aW9uKHR5cGUsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lci5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkge1xuICAgICAgdGhpcy5saXN0ZW5lclt0eXBlXS5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGRhdGEpKVxuICAgIH1cbiAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/eventUtil.js\n')},"../CoCreate-dnd/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = exports.initIframe = exports.initFunction = exports.initElement = exports.initContainer = void 0;\n\n__webpack_require__(/*! ./collaboration.js */ "../CoCreate-dnd/src/collaboration.js");\n\nvar _dndConfig = _interopRequireDefault(__webpack_require__(/*! ./dnd-config.js */ "../CoCreate-dnd/src/dnd-config.js"));\n\n__webpack_require__(/*! ./util/iframe */ "../CoCreate-dnd/src/util/iframe.js");\n\nvar _common = __webpack_require__(/*! ./util/common */ "../CoCreate-dnd/src/util/common.js");\n\nvar _virtualDnd = _interopRequireDefault(__webpack_require__(/*! ./virtualDnd */ "../CoCreate-dnd/src/virtualDnd.js"));\n\n__webpack_require__(/*! ./util/onClickLeftEvent */ "../CoCreate-dnd/src/util/onClickLeftEvent.js");\n\nvar vars = _interopRequireWildcard(__webpack_require__(/*! ./util/variables.js */ "../CoCreate-dnd/src/util/variables.js"));\n\n__webpack_require__(/*! ./CoCreate-dnd.css */ "../CoCreate-dnd/src/CoCreate-dnd.css");\n\n__webpack_require__(/*! ./util/domReader */ "../CoCreate-dnd/src/util/domReader.js");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global HTMLElement*/\n\n/*global DOMException*/\nlet touchTimeout;\nlet beforeDndSuccessCallback;\n\nfunction beforeDndSuccess() {\n  if (beforeDndSuccessCallback) return beforeDndSuccessCallback.apply(null, arguments);\n  return {};\n}\n\nlet mousemove, mouseup, mousedown, touchstart, touchend, touchmove; // export default function dndf(window, document, options) {\n// }\n\nlet options = {\n  scroller: new _common.autoScroller({\n    speed: 4,\n    threshold: 3\n  }),\n  myDropMarker: new _common.dropMarker()\n}; //// defining events\n\nlet {\n  myDropMarker,\n  scroller\n} = options;\nlet dnd = new _virtualDnd.default(beforeDndSuccess);\nlet ghost;\ndnd.on("dragStart", data => {\n  myDropMarker.hide();\n  ghost = new _common.ghostEffect(data.e, data.el, {\n    window,\n    document\n  });\n  ghost.start();\n});\ndnd.on("dragEnd", data => {\n  myDropMarker.hide();\n  if (ghost) ghost.hide(data.ref);\n});\ndnd.on("dragOver", data => {\n  // it will always run when mouse or touch moves\n  myDropMarker.draw(data.el, data.closestEl, data.orientation, !!data.hasChild, data.ref);\n});\nlet startGroup;\nlet isDraging = false;\nlet consolePrintedEl = null; // dev only\n\nfunction start(e, ref) {\n  let r = (0, _common.getCocs)(e.target, [vars.draggable, vars.cloneable, vars.handleable]);\n  if (!Array.isArray(r)) return;\n  let [el, att] = r;\n\n  switch (att) {\n    case vars.cloneable:\n      let html = el.getAttribute(vars.data_insert_html);\n\n      if (html) {\n        el = (0, _common.parse)(html);\n        if (!el) return;\n      } else el = el.cloneNode(true);\n\n      break;\n\n    case vars.draggable:\n      let hasHandle = el.getAnyAttribute(vars.handleable);\n      if (hasHandle) return;\n      break;\n\n    default:\n      el = (0, _common.getCoc)(el, vars.draggable);\n  } // get group\n\n\n  let groupResult = (0, _common.getGroupName)(el);\n  startGroup = groupResult[1];\n  ref.document.body.style.cursor = "crosshair !important";\n  isDraging = true;\n  dnd.dragStart(e, el, null, ref, att);\n}\n\nfunction end(e, ref) {\n  ref.document.body.style.cursor = "";\n  isDraging = false;\n  dnd.dragEnd(e);\n  myDropMarker.hide();\n  scroller.deactivateScroll();\n}\n\nfunction move({\n  x,\n  y,\n  target,\n  isTouch\n}, ref, stopScroll) {\n  if (!isDraging) return;\n  if (ghost) ghost.draw({\n    x,\n    y\n  }, ref);\n  scroller.update(x, y);\n\n  if (isDraging) {\n    // skip group names\n    let [groupEl, groupname] = (0, _common.getGroupName)(target);\n\n    if (startGroup && groupname) {\n      if (startGroup !== groupname) {\n        do {\n          let groupResult = (0, _common.getGroupName)(groupEl);\n          if (!groupResult[0]) return; // or return\n\n          groupEl = groupResult[0].parentElement;\n          groupname = groupResult[1];\n\n          if (startGroup === groupname) {\n            target = groupResult[0];\n            break;\n          }\n        } while (true);\n      }\n    } else if (startGroup !== groupname) return;\n  } else {\n    if (ghost) ghost.hide();\n  }\n\n  if (!target) return; // it\'s out of iframe if this is multi frame\n\n  let el = (0, _common.getCoc)(target, vars.droppable); // let onEl = target; // dev\n  // if (consolePrintedEl != target) { // dev\n  //   // dev\n  //   console.log("you are on: \\n", onEl, "\\nDroping in: \\n", el);\n  //   consolePrintedEl = el;\n  // }\n  // if()\n\n  if (!el) return;\n\n  if (!stopScroll) {\n    scroller.calculateScroll({\n      x,\n      y,\n      element: el.parentElement,\n      onMouseScrollMove: e => move(e, ref, true)\n    });\n  } // todo:\n\n\n  dnd.dragOver({\n    x,\n    y,\n    target: el\n  }, el, ref);\n}\n\nmousedown = (e, ref) => {\n  // console.log("mouse down", e);\n  if (e.which != 1) return;\n  start(e, ref);\n};\n\nmouseup = (e, ref) => {\n  // console.log("mouse up", e);\n  // todo: why would we check for hoverable and what do we do whith this?\n  // let el = getCoc(e.target, hoverable)\n  // if (!el) return;\n  //\n  if (e.which != 1) return;\n  end(e, ref);\n};\n\nmousemove = (e, ref) => {\n  move(e, ref);\n}; // let CoCreateClickLeft = (e) => {\n//   // todo: not working!?\n//   let el = getCoc(e.target, selectable);\n//   if (!el) return;\n// };\n\n\nlet refs = new Map();\n\nconst initIframe = ({\n  isIframe,\n  frame,\n  document,\n  window\n}) => {\n  let ref;\n\n  if (isIframe) {\n    let frameWindow = frame.contentWindow;\n    let frameDocument = frameWindow.document || frame.contentDocument;\n    let rect = frame.getBoundingClientRect();\n    ref = {\n      x: rect.left,\n      y: rect.top,\n      frame,\n      window: frameWindow,\n      document: frameDocument,\n      isIframe: true\n    };\n  } else {\n    ref = {\n      x: 0,\n      y: 0,\n      window,\n      document,\n      isIframe: false\n    };\n  }\n\n  if (ref.window.CoCreateDnd && ref.window.CoCreateDnd.hasInit) return;\n\n  if (!ref.document.querySelector("#dnd-style")) {\n    let dndStyle = ref.document.createElement("style");\n    dndStyle.id = "dnd-style";\n    dndStyle.innerHTML = `    /* dnd specic */\n      [data-draggable="true"], [data-cloneable="true"]  {\n        touch-action: none;\n      }\n      /* dnd specic */`;\n    ref.document.head.append(dndStyle);\n  }\n\n  ref.document.addEventListener("dragstart", e => {\n    e.preventDefault();\n    return false;\n  }); // disable selection\n\n  ref.document.addEventListener("selectstart", e => {\n    let r = (0, _common.getCocs)(e.target, [vars.draggable, vars.cloneable]);\n    if (!Array.isArray(r)) return;\n    e.preventDefault();\n  }, {\n    passive: false\n  }); // touch\n\n  let mousemovee, mouseupe, mousedowne, touchmovee, touchheade, touchstarte;\n\n  if (!refs.has(ref.window)) {\n    touchstarte = function (e) {\n      // console.log()\n      if (touchTimeout) clearTimeout(touchTimeout);\n      touchTimeout = setTimeout(() => {\n        console.log(\'touch start\');\n        ref.document.body.style.touchAction = "none";\n        e.preventDefault();\n        start(e, ref);\n      }, 1000);\n    };\n\n    touchheade = function (e) {\n      ref.document.body.style.touchAction = "auto";\n\n      if (!isDraging) {\n        if (touchTimeout) clearTimeout(touchTimeout);\n        return;\n      }\n\n      e.preventDefault();\n      end(e, ref);\n    };\n\n    touchmovee = function (e) {\n      if (!isDraging) {\n        if (touchTimeout) clearTimeout(touchTimeout);\n        console.log(\'touch scroll\');\n        return;\n      }\n\n      console.log(\'touch dnd\');\n      e.preventDefault(); // console.log("host touch move");\n\n      let touch = e.touches[0];\n      let x = touch.clientX;\n      let y = touch.clientY;\n      let el = ref.document.elementFromPoint(x, y);\n      if (!el) return; // it\'s out of iframe\n      // sending object representing an event data\n\n      move({\n        x,\n        y,\n        target: el,\n        isTouch: true\n      }, ref);\n    };\n\n    mousedowne = function (e) {\n      mousedown.apply(this, [e, ref]);\n    };\n\n    mouseupe = function (e) {\n      mouseup.apply(this, [e, ref]);\n    };\n\n    mousemovee = function (e) {\n      mousemove.apply(this, [e, ref]);\n    };\n\n    refs.set(ref.window, {\n      mousemovee,\n      mouseupe,\n      mousedowne,\n      touchmovee,\n      touchheade,\n      touchstarte\n    });\n  } else {\n    ({\n      mousemovee,\n      mouseupe,\n      mousedowne,\n      touchmovee,\n      touchheade,\n      touchstarte\n    } = refs.get(ref.window));\n  }\n\n  ref.document.removeEventListener("touchstart", touchstarte);\n  ref.document.addEventListener("touchstart", touchstarte);\n  ref.document.removeEventListener("touchend", touchheade, {\n    passive: false\n  });\n  ref.document.addEventListener("touchend", touchheade, {\n    passive: false\n  });\n  ref.document.removeEventListener("touchmove", touchmovee, {\n    passive: false\n  });\n  ref.document.addEventListener("touchmove", touchmovee, {\n    passive: false\n  }); // touch\n  // mouse\n\n  ref.document.removeEventListener("mousedown", mousedowne);\n  ref.document.addEventListener("mousedown", mousedowne);\n  ref.document.removeEventListener("mouseup", mouseupe);\n  ref.document.addEventListener("mouseup", mouseupe);\n  ref.document.removeEventListener("mousemove", mousemovee);\n  ref.document.addEventListener("mousemove", mousemovee); // mouse\n}; // const init = () => {\n//   dnd(window, document);\n//   // console.log("dnd is loaded", window.location.pathname);\n//   // function parse(text) {\n//   //   let doc = new DOMParser().parseFromString(text, "text/html");\n//   //   if (doc.head.children[0]) return doc.head.children[0];\n//   //   else return doc.body.children[0];\n//   // }\n// };\n\n\nexports.initIframe = initIframe;\nwindow.addEventListener("load", () => {\n  if (window.parent !== window) return;\n  initIframe({\n    document,\n    window\n  });\n  (0, _dndConfig.default)();\n});\n\nconst initFunction = function ({\n  target,\n  onDnd,\n  onDndSuccess\n}) {\n  if (typeof onDndSuccess == "function") beforeDndSuccessCallback = onDndSuccess;\n\n  _common.initFunctionState.push({\n    target,\n    onDnd\n  });\n};\n\nexports.initFunction = initFunction;\n\nconst initElement = function ({\n  target,\n  dropable,\n  draggable,\n  cloneable,\n  handle,\n  group,\n  exclude,\n  beforeDndSuccess\n}) {\n  try {\n    if (typeof beforeDndSuccess == "function") beforeDndSuccessCallback = beforeDndSuccess;\n    if (group) target.setHiddenAttribute(vars.group_name, group);\n\n    if (exclude) {\n      try {\n        let excludeEls = target.querySelectorAll(exclude);\n        excludeEls.forEach(el => {\n          el.setHiddenAttribute(vars.exclude, "true");\n        });\n      } catch (err) {\n        if (err instanceof HTMLElement) {\n          let error = "Dnd Sortable: exclude must be valid selector";\n          console.error(error);\n        }\n\n        throw err;\n      }\n    }\n\n    if (dropable) target.querySelectorAll(dropable).forEach(el => {\n      el.setHiddenAttribute(vars.droppable, "true");\n    });\n    if (draggable) target.querySelectorAll(draggable).forEach(el => {\n      // el.style.touchAction = \'none\'\n      el.setHiddenAttribute(vars.draggable, "true");\n    });\n    if (cloneable) target.querySelectorAll(cloneable).forEach(el => {\n      // el.style.touchAction = \'none\'\n      el.setHiddenAttribute(vars.cloneable, "true");\n    });\n  } catch (err) {\n    if (err instanceof DOMException) {\n      let error = "Dnd Sortable: handle must be a valid selector";\n      console.error(error);\n      throw err;\n    } else throw err;\n  }\n};\n\nexports.initElement = initElement;\n\nfunction addNestedAttribute(el, cloneable) {\n  if (!el.children.length) return;\n  Array.from(el.children).forEach(el => {\n    addNestedAttribute(el);\n    el.setHiddenAttribute(vars.exclude, "true"); // el.style.touchAction = \'none\'\n\n    el.setHiddenAttribute(vars.draggable, "true");\n    if (cloneable) el.setHiddenAttribute(vars.cloneable, "true");\n  });\n}\n\nconst initContainer = function ({\n  target,\n  cloneable = false,\n  nested = false,\n  handle,\n  group,\n  exclude\n}) {\n  if (group) target.setHiddenAttribute(vars.group_name, group);\n\n  if (exclude) {\n    try {\n      let excludeEls = target.querySelectorAll(exclude);\n      excludeEls.forEach(el => {\n        el.setHiddenAttribute(vars.exclude, "true");\n      });\n    } catch (err) {\n      if (err instanceof DOMException) {\n        let error = "Dnd Sortable: exclude must be valid selector";\n        console.error(error);\n        throw error;\n      } else throw err;\n    }\n  }\n\n  if (!target.tagName) {\n    let error = "Dnd Sortable: Please provide a valid element";\n    console.error(error);\n    throw error;\n  }\n\n  if (typeof cloneable != "boolean") {\n    let error = "Dnd Sortable: please provide valid data type for cloneable";\n    console.error(error);\n    throw error;\n  }\n\n  if (typeof nested != "boolean") {\n    let error = "Dnd Sortable: please provide valid data type for nested";\n    console.error(error);\n    throw error;\n  }\n\n  if (nested) {\n    addNestedAttribute(target, cloneable);\n  } else {\n    target.setHiddenAttribute(vars.droppable, "true");\n    if (target.children.length) Array.from(target.children).forEach(el => {\n      if (cloneable) {\n        // el.style.touchAction = \'none\'\n        el.setHiddenAttribute(vars.cloneable, "true");\n      } else {\n        // el.style.touchAction = \'none\'\n        el.setHiddenAttribute(vars.draggable, "true");\n      }\n\n      try {\n        let handleEls = el.querySelectorAll(handle);\n\n        if (handle && handleEls.length) {\n          // el.style.touchAction = \'none\'\n          el.setHiddenAttribute(vars.draggable, "true");\n          handleEls.forEach(el => {\n            // el.style.touchAction = \'none\'\n            el.setHiddenAttribute(vars.draggable, "true");\n          });\n        }\n      } catch (err) {\n        if (err instanceof DOMException) {\n          let error = "Dnd Sortable: handle must be a valid selector";\n          console.error(error);\n          throw error;\n        } else throw err;\n      }\n    });\n  }\n};\n\nexports.initContainer = initContainer;\nlet exp = {\n  initContainer,\n  initElement,\n  initFunction\n};\n\nfunction init(params) {\n  let {\n    mode\n  } = params;\n  delete params.mode;\n  if (![\'function\', \'element\', \'container\'].includes(mode)) throw new Error(\'invalid mode provided\');\n  let funcName = \'init\' + mode.charAt(0).toUpperCase() + mode.slice(1);\n  exp[funcName].apply(null, [params]);\n}\n\nvar _default = {\n  initIframe,\n  init\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/index.js\n')},"../CoCreate-dnd/src/util/common.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCoc = getCoc;\nexports.getCocs = getCocs;\nexports.getGroupName = getGroupName;\nexports.computeStyles = computeStyles;\nexports.randomId = randomId;\nexports.dropMarker = dropMarker;\nexports.parse = parse;\nexports.ghostEffect = ghostEffect;\nexports.pDistance = pDistance;\nexports.closestChild = closestChild;\nexports.distanceToChild = distanceToChild;\nexports.distanceToChildLeftRight = distanceToChildLeftRight;\nexports.distanceToChildTopBottom = distanceToChildTopBottom;\nexports.autoScroller = autoScroller;\nObject.defineProperty(exports, "initFunctionState", ({\n  enumerable: true,\n  get: function () {\n    return _domContext.initFunctionState;\n  }\n}));\nexports.dndContext = void 0;\n\nvar _variables = __webpack_require__(/*! ./variables */ "../CoCreate-dnd/src/util/variables.js");\n\nvar _domContext = _interopRequireWildcard(__webpack_require__(/*! ./domContext2 */ "../CoCreate-dnd/src/util/domContext2.js"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n//find the global context\nlet parentWindow = window;\n\nwhile (parentWindow !== window.parent) parentWindow = window.parent;\n\nlet dndContext;\nexports.dndContext = dndContext;\n\nif (!parentWindow.dndContext) {\n  exports.dndContext = dndContext = new _domContext.default();\n  parentWindow.dndContext = dndContext;\n} else exports.dndContext = dndContext = parentWindow.dndContext;\n\nfunction getCoc(el, att) {\n  if (!el.tagName) el = el.parentElement;\n  return dndContext.getContext(el, att);\n}\n\nfunction getCocs(el, attList) {\n  if (!el.tagName) el = el.parentElement;\n  return dndContext.getContexts(el, attList);\n}\n\nfunction getGroupName(el) {\n  if (!el.tagName) el = el.parentElement;\n\n  do {\n    let groupName = el.getAttribute(_variables.group_name);\n    if (groupName) return [el, groupName];\n    el = el.parentElement;\n    if (!el) return [null, undefined];\n  } while (true);\n}\n\nfunction computeStyles(el, properties) {\n  let computed = window.getComputedStyle(el);\n  let result = {};\n  properties.forEach(property => {\n    result[property] = parseInt(computed[property]);\n  });\n  return result;\n}\n\nfunction randomId() {\n  const uint32 = window.crypto.getRandomValues(new Uint32Array(1))[0];\n  return uint32.toString(16);\n}\n\nlet lasttransition = "none";\n\nfunction dropMarker(options) {\n  options = Object.assign({\n    borderSize: 2,\n    dropMarkerMargin: 5\n  }, options);\n  let marker = document.createElement("div");\n  marker.id = "dropMarker"; // marker.style.backgroundColor = "green";\n  // marker.style.position = "absolute";\n  // marker.style.display = "none";\n\n  marker.style.pointerEvents = "none";\n  this.lastOrigntaion = undefined;\n  document.body.append(marker);\n  this.obj = marker;\n\n  this.draw = function (parent, el, orientation, isInside, ref) {\n    marker.style.display = "block";\n    let rect = el.getBoundingClientRect();\n\n    if (!rect.width && !rect.height) {\n      rect = parent.getBoundingClientRect();\n      orientation = "top";\n    }\n\n    switch (orientation) {\n      case "top":\n      case "bottom":\n        // order is important to fix rectangle bug\n        marker.style.height = options.borderSize + "px";\n        marker.style.width = rect.width + "px";\n        break;\n\n      case "left":\n      case "right":\n        marker.style.width = options.borderSize + "px";\n        marker.style.height = rect.height + "px";\n        break;\n\n      default:\n        throw new Error("one type of orientation must be specified");\n    }\n\n    if (parent != el) {\n      let prect = parent.getBoundingClientRect();\n      let parentSize = prect[orientation];\n      let childSize = rect[orientation];\n      if (Math.abs(parentSize - childSize) < options.dropMarkerMargin * 2) isInside = true;\n    }\n\n    let frameRect;\n    if (ref.frame) frameRect = ref.frame.getBoundingClientRect();else frameRect = {\n      top: 0,\n      left: 0\n    };\n    marker.style.transition = "top,left 0.2s ease-in-out";\n\n    switch (orientation) {\n      case "top":\n        marker.style.top = frameRect.top + rect.top - options.borderSize / 2 + window.scrollY + (isInside ? options.dropMarkerMargin : -options.dropMarkerMargin) + "px";\n        marker.style.left = frameRect.left + rect.left - options.borderSize / 2 + window.scrollX + "px";\n        break;\n\n      case "bottom":\n        marker.style.top = frameRect.top + rect.bottom - options.borderSize / 2 + window.scrollY + (isInside ? -options.dropMarkerMargin : options.dropMarkerMargin) + "px";\n        marker.style.left = frameRect.left + rect.left - options.borderSize / 2 + window.scrollX + "px";\n        break;\n\n      case "left":\n        marker.style.top = frameRect.top + rect.top - options.borderSize / 2 + window.scrollY + "px";\n        marker.style.left = frameRect.left + rect.left - options.borderSize / 2 + window.scrollX + (isInside ? options.dropMarkerMargin : -options.dropMarkerMargin) + "px";\n        break;\n\n      case "right":\n        marker.style.top = frameRect.top + rect.top - options.borderSize / 2 + window.scrollY + "px";\n        marker.style.left = frameRect.left + rect.right - options.borderSize / 2 + window.scrollX + (isInside ? -options.dropMarkerMargin : options.dropMarkerMargin) + "px";\n        break;\n\n      default:\n        throw new Error("one type of orientation must be specified");\n    } // marker.style.transition = "all 0.2s ease-in-out";\n\n\n    this.lastOrigntaion = orientation;\n  };\n\n  this.hide = function (el) {\n    marker.style.display = "none";\n  };\n}\n\nfunction parse(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction ghostEffect(elementEvent, el, ref) {\n  this.effectCb;\n  el.removeAttribute("CoC-dragging");\n\n  this.start = () => {\n    this.cloneEl = el.cloneNode(true);\n    let {\n      width,\n      height\n    } = ref.window.getComputedStyle(el);\n    let cloneElStyle = window.getComputedStyle(this.cloneEl);\n    this.wrapper = document.createElement("div");\n    this.wrapper.style.height = height;\n    this.wrapper.style.width = width;\n    this.wrapper.append(this.cloneEl);\n    this.wrapper.style.display = "none";\n    ref.document.body.append(this.wrapper);\n    this.wrapper.style.pointerEvents = "none"; // this.wrapper.style.overflow = "hidden";\n    // this.wrapper.style.textOverflow = "ellipsis";\n    // this.wrapper.style.whiteSpace = "nowrap";\n    // this.wrapper.style.opacity = "0.5";\n    // this.wrapper.style.position = "fixed";\n    // this.wrapper.style.Zindex = "20000";\n\n    this.wrapper.id = "ghostEffect";\n  };\n\n  this.draw = (e, ref) => {\n    this.wrapper.style.display = "block";\n    let rect = this.wrapper.getBoundingClientRect();\n    let {\n      marginTop,\n      marginBottom,\n      marginLeft,\n      marginRight,\n      width,\n      height\n    } = computeStyles(this.cloneEl, ["marginTop", "marginBottom", "marginLeft", "marginRight", "width", "height"]);\n    let frameRect;\n    if (ref.frame) frameRect = ref.frame.getBoundingClientRect();else frameRect = {\n      top: 0,\n      left: 0\n    };\n    this.wrapper.style.top = frameRect.top + e.y - elementEvent.offsetY + "px";\n    this.wrapper.style.left = frameRect.left + e.x - elementEvent.offsetX + "px";\n  };\n\n  this.hide = () => {\n    this.wrapper.remove();\n  };\n}\n\nfunction pDistance(x, y, x1, y1, x2, y2) {\n  var A = x - x1;\n  var B = y - y1;\n  var C = x2 - x1;\n  var D = y2 - y1;\n  var dot = A * C + B * D;\n  var len_sq = C * C + D * D;\n  var param = -1;\n  if (len_sq != 0) //in case of 0 length line\n    param = dot / len_sq;\n  var xx, yy;\n\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  var dx = x - xx;\n  var dy = y - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction closestChild(p, children) {\n  let closestDistance = Infinity;\n  let closestchild;\n  let topOrientation;\n\n  for (let child of children) {\n    if (child.classList.contains("hidden")) continue;\n    let [orientation, distance] = distanceToChild(p, child);\n\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      closestchild = child;\n      topOrientation = orientation;\n    }\n  }\n\n  return [topOrientation, closestchild];\n}\n\nlet orientations = ["left", "top", "right", "bottom"];\n/**\n *  p [x,y]\n *  child element\n */\n\nfunction distanceToChild(p, child) {\n  let rect = child.getBoundingClientRect();\n  let line1 = {\n    p1: [rect.top, rect.left],\n    p2: [rect.bottom, rect.left]\n  };\n  let line2 = {\n    p1: [rect.top, rect.left],\n    p2: [rect.top, rect.right]\n  };\n  let line3 = {\n    p1: [rect.top, rect.right],\n    p2: [rect.bottom, rect.right]\n  };\n  let line4 = {\n    p1: [rect.bottom, rect.left],\n    p2: [rect.bottom, rect.right]\n  };\n  let distances = [pDistance(p[0], p[1], line1.p1[1], line1.p1[0], line1.p2[1], line1.p2[0]), pDistance(p[0], p[1], line2.p1[1], line2.p1[0], line2.p2[1], line2.p2[0]), pDistance(p[0], p[1], line3.p1[1], line3.p1[0], line3.p2[1], line3.p2[0]), pDistance(p[0], p[1], line4.p1[1], line4.p1[0], line4.p2[1], line4.p2[0])];\n  let orientation;\n  let closestDistance = Infinity;\n  distances.forEach((distance, i) => {\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      orientation = orientations[i];\n    }\n  });\n  return [orientation, closestDistance];\n}\n\nfunction distanceToChildLeftRight(p, child) {\n  let rect = child.getBoundingClientRect();\n  let line1 = {\n    p1: [rect.top, 0],\n    p2: [rect.bottom, 0]\n  };\n  let line3 = {\n    p1: [rect.top, child.clientWidth],\n    p2: [rect.bottom, child.clientWidth]\n  };\n  let distances = [pDistance(p[0], p[1], line1.p1[1], line1.p1[0], line1.p2[1], line1.p2[0]), pDistance(p[0], p[1], line3.p1[1], line3.p1[0], line3.p2[1], line3.p2[0])];\n  let orientation;\n  let closestDistance = Infinity;\n  distances.forEach((distance, i) => {\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      orientation = ["left", "right"][i];\n    }\n  });\n  return [orientation, closestDistance];\n}\n\nfunction distanceToChildTopBottom(p, child) {\n  let rect = child.getBoundingClientRect();\n  let line2 = {\n    p1: [0, rect.left],\n    p2: [0, rect.right]\n  };\n  let line4 = {\n    p1: [child.clientHeight, rect.left],\n    p2: [child.clientHeight, rect.right]\n  };\n  let distances = [pDistance(p[0], p[1], line2.p1[1], line2.p1[0], line2.p2[1], line2.p2[0]), pDistance(p[0], p[1], line4.p1[1], line4.p1[0], line4.p2[1], line4.p2[0])];\n  let orientation;\n  let closestDistance = Infinity;\n  distances.forEach((distance, i) => {\n    if (distance < closestDistance) {\n      closestDistance = distance;\n      orientation = ["top", "bottom"][i];\n    }\n  });\n  return [orientation, closestDistance];\n}\n\nfunction autoScroller({\n  speed,\n  threshold\n}) {\n  this.lastScrollingElement;\n  this.onElement;\n  this.mouse;\n  this.speed;\n  this.interval;\n  this.isActive;\n\n  this.update = function (x, y) {\n    this.mouse = {\n      x,\n      y\n    };\n  };\n\n  this.calculateScroll = function ({\n    x,\n    y,\n    element,\n    onMouseScrollMove\n  }) {\n    while (true) {\n      if (element && element.tagName && (element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth)) {\n        break;\n      } else if (element.parentElement) element = element.parentElement;else break;\n    }\n\n    let hasHorizontalScrollbar = element.scrollWidth > element.clientWidth;\n    let hasVerticalScrollbar = element.scrollHeight > element.clientHeight;\n    let horScrollThreshold = element.clientWidth / threshold;\n    let verScrollThreshold = element.clientHeight / threshold;\n    let [orientation, closestDistance] = [];\n    if (hasVerticalScrollbar) [orientation, closestDistance] = distanceToChildTopBottom([x, y], element);else if (hasHorizontalScrollbar) [orientation, closestDistance] = distanceToChildLeftRight([x, y], element);\n\n    if (orientation) {\n      let condition;\n\n      switch (orientation) {\n        case "top":\n        case "bottom":\n          this.speed = verScrollThreshold / (closestDistance + 1) * speed;\n          condition = closestDistance < verScrollThreshold;\n          break;\n\n        case "left":\n        case "right":\n          this.speed = horScrollThreshold / (closestDistance + 1) * speed;\n          condition = closestDistance < horScrollThreshold;\n          break;\n      }\n\n      if (condition) {\n        if (!this.isActive) {\n          this.isActive = true;\n\n          this.__activateScroll(element, orientation, onMouseScrollMove);\n        } else if (this.isActive && this.lastScrollingElement !== element) {\n          this.deactivateScroll(element);\n\n          this.__activateScroll(element, orientation, onMouseScrollMove);\n        }\n      } else if (this.isActive) {\n        console.log("no", orientation, element);\n        this.isActive = false;\n        this.deactivateScroll(element);\n      }\n    }\n  }; // this.__scroll = function(element, s1 = 0, s2 = 0)\n  // {\n  //   for(let i = 0 ; i <= this.speed; i++)\n  //   {\n  //     element.scrollBy(s1, s2)\n  //   }\n  // }\n\n\n  this.__activateScroll = function (element, orientation, callback) {\n    // todo: when interval timeout is low and speed is hight scrollBy doesn\'t act\n    // retodo: give time to scrollBy equal to speed * 0.25 * timeout\n    element.style.scrollBehavior = "auto";\n    this.lastScrollingElement = element;\n    this.interval = setInterval(() => {\n      switch (orientation) {\n        case "top":\n          element.scrollBy(0, -this.speed);\n          break;\n\n        case "bottom":\n          element.scrollBy(0, this.speed);\n          break;\n\n        case "left":\n          element.scrollBy(-this.speed, 0);\n          break;\n\n        case "right":\n          element.scrollBy(this.speed, 0);\n          break;\n\n        default:\n      } // this.onElement = document.elementFromPoint(this.mouse.x, this.mouse.y);\n      // if (this.onElement) {\n      //   callback({ x: this.mouse.x, y: this.mouse.y, target: this.onElement });\n      // }\n\n    }, 10);\n  };\n\n  this.deactivateScroll = function (element) {\n    if (element) element.style.scrollBehavior = "";\n    clearInterval(this.interval);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/util/common.js\n')},"../CoCreate-dnd/src/util/domContext2.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = context;\nexports.initFunctionState = void 0;\n// todo: jest support import/export\nlet initFunctionState = [];\nexports.initFunctionState = initFunctionState;\n\nfunction context(html) {\n  this.map = new Map();\n\n  this.checkInitFunction = function checkInitFunction(element, request) {\n    for (let state of initFunctionState) {\n      if (state.target.contains(element)) {\n        let r = state.onDnd(element, request);\n        if (Array.isArray(r)) return r;\n      }\n    }\n  };\n  /**\n   * @param el the element look for context\n   *\n   * @returns attribute value or false if not found\n   */\n\n\n  this.getContext = function (el, attributeName) {\n    do {\n      if (el.getAnyAttribute(attributeName) == "true") return el;else {\n        if (this.checkInitFunction(el, [attributeName])) return el;\n      }\n      el = el.parentElement;\n    } while (el);\n\n    return undefined;\n  };\n  /**\n   * @param el the element look for context\n   */\n\n\n  this.getContexts = function (el, attributeNames) {\n    do {\n      for (let attributeName of attributeNames) {\n        if (el.getAnyAttribute(attributeName) == "true") return [el, attributeName];else {\n          let r2 = this.checkInitFunction(el, attributeNames);\n          if (Array.isArray(r2) && attributeNames.includes(r2[1])) return r2;\n        }\n      }\n\n      el = el.parentElement;\n    } while (el);\n\n    return undefined;\n  };\n\n  this.setContext = function (el, att, value) {\n    el.setHiddenAttribute(att, value);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvdXRpbC9kb21Db250ZXh0Mi5qcz84MGY4Il0sIm5hbWVzIjpbImluaXRGdW5jdGlvblN0YXRlIiwiY29udGV4dCIsImh0bWwiLCJtYXAiLCJNYXAiLCJjaGVja0luaXRGdW5jdGlvbiIsImVsZW1lbnQiLCJyZXF1ZXN0Iiwic3RhdGUiLCJ0YXJnZXQiLCJjb250YWlucyIsInIiLCJvbkRuZCIsIkFycmF5IiwiaXNBcnJheSIsImdldENvbnRleHQiLCJlbCIsImF0dHJpYnV0ZU5hbWUiLCJnZXRBbnlBdHRyaWJ1dGUiLCJwYXJlbnRFbGVtZW50IiwidW5kZWZpbmVkIiwiZ2V0Q29udGV4dHMiLCJhdHRyaWJ1dGVOYW1lcyIsInIyIiwiaW5jbHVkZXMiLCJzZXRDb250ZXh0IiwiYXR0IiwidmFsdWUiLCJzZXRIaWRkZW5BdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUVBLElBQUlBLGlCQUFpQixHQUFHLEVBQXhCOzs7QUFFZSxTQUFTQyxPQUFULENBQWlCQyxJQUFqQixFQUF1QjtBQUNwQyxPQUFLQyxHQUFMLEdBQVcsSUFBSUMsR0FBSixFQUFYOztBQUVBLE9BQUtDLGlCQUFMLEdBQXlCLFNBQVNBLGlCQUFULENBQTJCQyxPQUEzQixFQUFvQ0MsT0FBcEMsRUFBNkM7QUFDcEUsU0FBSyxJQUFJQyxLQUFULElBQWtCUixpQkFBbEIsRUFBcUM7QUFDbkMsVUFBSVEsS0FBSyxDQUFDQyxNQUFOLENBQWFDLFFBQWIsQ0FBc0JKLE9BQXRCLENBQUosRUFBb0M7QUFDbEMsWUFBSUssQ0FBQyxHQUFHSCxLQUFLLENBQUNJLEtBQU4sQ0FBWU4sT0FBWixFQUFxQkMsT0FBckIsQ0FBUjtBQUNBLFlBQUlNLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxDQUFkLENBQUosRUFBc0IsT0FBT0EsQ0FBUDtBQUN2QjtBQUNGO0FBQ0YsR0FQRDtBQVFBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7OztBQUNFLE9BQUtJLFVBQUwsR0FBa0IsVUFBVUMsRUFBVixFQUFjQyxhQUFkLEVBQTZCO0FBQzdDLE9BQUc7QUFDRCxVQUFJRCxFQUFFLENBQUNFLGVBQUgsQ0FBbUJELGFBQW5CLEtBQXFDLE1BQXpDLEVBQWlELE9BQU9ELEVBQVAsQ0FBakQsS0FDSztBQUNILFlBQUksS0FBS1gsaUJBQUwsQ0FBdUJXLEVBQXZCLEVBQTJCLENBQUNDLGFBQUQsQ0FBM0IsQ0FBSixFQUFpRCxPQUFPRCxFQUFQO0FBQ2xEO0FBQ0RBLFFBQUUsR0FBR0EsRUFBRSxDQUFDRyxhQUFSO0FBQ0QsS0FORCxRQU1TSCxFQU5UOztBQVFBLFdBQU9JLFNBQVA7QUFDRCxHQVZEO0FBWUE7QUFDRjtBQUNBOzs7QUFDRSxPQUFLQyxXQUFMLEdBQW1CLFVBQVVMLEVBQVYsRUFBY00sY0FBZCxFQUE4QjtBQUMvQyxPQUFHO0FBQ0QsV0FBSyxJQUFJTCxhQUFULElBQTBCSyxjQUExQixFQUEwQztBQUN4QyxZQUFJTixFQUFFLENBQUNFLGVBQUgsQ0FBbUJELGFBQW5CLEtBQXFDLE1BQXpDLEVBQ0UsT0FBTyxDQUFDRCxFQUFELEVBQUtDLGFBQUwsQ0FBUCxDQURGLEtBRUs7QUFDSCxjQUFJTSxFQUFFLEdBQUcsS0FBS2xCLGlCQUFMLENBQXVCVyxFQUF2QixFQUEyQk0sY0FBM0IsQ0FBVDtBQUNBLGNBQUlULEtBQUssQ0FBQ0MsT0FBTixDQUFjUyxFQUFkLEtBQXFCRCxjQUFjLENBQUNFLFFBQWYsQ0FBd0JELEVBQUUsQ0FBQyxDQUFELENBQTFCLENBQXpCLEVBQXlELE9BQU9BLEVBQVA7QUFDMUQ7QUFDRjs7QUFFRFAsUUFBRSxHQUFHQSxFQUFFLENBQUNHLGFBQVI7QUFDRCxLQVhELFFBV1NILEVBWFQ7O0FBYUEsV0FBT0ksU0FBUDtBQUNELEdBZkQ7O0FBaUJBLE9BQUtLLFVBQUwsR0FBa0IsVUFBVVQsRUFBVixFQUFjVSxHQUFkLEVBQW1CQyxLQUFuQixFQUEwQjtBQUMxQ1gsTUFBRSxDQUFDWSxrQkFBSCxDQUFzQkYsR0FBdEIsRUFBMkJDLEtBQTNCO0FBQ0QsR0FGRDtBQUdEIiwiZmlsZSI6Ii4uL0NvQ3JlYXRlLWRuZC9zcmMvdXRpbC9kb21Db250ZXh0Mi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRvZG86IGplc3Qgc3VwcG9ydCBpbXBvcnQvZXhwb3J0XG5cbmxldCBpbml0RnVuY3Rpb25TdGF0ZSA9IFtdO1xuZXhwb3J0IHsgaW5pdEZ1bmN0aW9uU3RhdGUgfTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnRleHQoaHRtbCkge1xuICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcblxuICB0aGlzLmNoZWNrSW5pdEZ1bmN0aW9uID0gZnVuY3Rpb24gY2hlY2tJbml0RnVuY3Rpb24oZWxlbWVudCwgcmVxdWVzdCkge1xuICAgIGZvciAobGV0IHN0YXRlIG9mIGluaXRGdW5jdGlvblN0YXRlKSB7XG4gICAgICBpZiAoc3RhdGUudGFyZ2V0LmNvbnRhaW5zKGVsZW1lbnQpKSB7XG4gICAgICAgIGxldCByID0gc3RhdGUub25EbmQoZWxlbWVudCwgcmVxdWVzdCk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHIpKSByZXR1cm4gcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBAcGFyYW0gZWwgdGhlIGVsZW1lbnQgbG9vayBmb3IgY29udGV4dFxuICAgKlxuICAgKiBAcmV0dXJucyBhdHRyaWJ1dGUgdmFsdWUgb3IgZmFsc2UgaWYgbm90IGZvdW5kXG4gICAqL1xuICB0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoZWwsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICBkbyB7XG4gICAgICBpZiAoZWwuZ2V0QW55QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpID09IFwidHJ1ZVwiKSByZXR1cm4gZWw7XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJbml0RnVuY3Rpb24oZWwsIFthdHRyaWJ1dGVOYW1lXSkpIHJldHVybiBlbDtcbiAgICAgIH1cbiAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9IHdoaWxlIChlbCk7XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gZWwgdGhlIGVsZW1lbnQgbG9vayBmb3IgY29udGV4dFxuICAgKi9cbiAgdGhpcy5nZXRDb250ZXh0cyA9IGZ1bmN0aW9uIChlbCwgYXR0cmlidXRlTmFtZXMpIHtcbiAgICBkbyB7XG4gICAgICBmb3IgKGxldCBhdHRyaWJ1dGVOYW1lIG9mIGF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgICAgIGlmIChlbC5nZXRBbnlBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkgPT0gXCJ0cnVlXCIpXG4gICAgICAgICAgcmV0dXJuIFtlbCwgYXR0cmlidXRlTmFtZV07XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGxldCByMiA9IHRoaXMuY2hlY2tJbml0RnVuY3Rpb24oZWwsIGF0dHJpYnV0ZU5hbWVzKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyMikgJiYgYXR0cmlidXRlTmFtZXMuaW5jbHVkZXMocjJbMV0pKSByZXR1cm4gcjI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICAgIH0gd2hpbGUgKGVsKTtcblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgdGhpcy5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKGVsLCBhdHQsIHZhbHVlKSB7XG4gICAgZWwuc2V0SGlkZGVuQXR0cmlidXRlKGF0dCwgdmFsdWUpO1xuICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/util/domContext2.js\n')},"../CoCreate-dnd/src/util/domReader.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\n/*global Element*/\n\n/*global HTMLElement*/\nfunction context(state) {\n  this.state = state;\n\n  this.removeAttribute = (element, attName) => {\n    if (this.state.has(element)) delete this.state.get(element)["attributes"][attName];\n  };\n\n  this.hasAttribute = (element, attName) => {\n    if (this.state.has(element)) return this.state.get(element)["attributes"][attName] ? true : false;\n  };\n\n  this.getAttribute = (element, attName) => {\n    if (this.state.has(element)) return this.state.get(element)["attributes"][attName];\n  };\n\n  this.setAttribute = (element, attName, value) => {\n    if (this.state.has(element)) this.state.get(element).attributes[attName] = value;else this.state.set(element, {\n      element,\n      attributes: {\n        [attName]: value\n      }\n    });\n  };\n\n  this.getAllAttributes = element => {\n    if (this.state.has(element)) return this.state.get(element)["attributes"];\n  };\n\n  this.getDataset = element => {\n    let dataset = {};\n\n    for (let [key, value] of Object.entries(this.state.get(element)["attributes"])) if (key.beginsWith("data-")) dataset[key.substr(5)] = value;\n\n    return dataset;\n  };\n}\n\nlet state = new Map();\nlet domContext = new context(state);\n\nfunction init() {\n  const domReader = {\n    splitBydelimiter: (str, delimiter) => {\n      return str.split(delimiter).map(s => s.trim());\n    },\n    joinBydelimiter: (str, delimiter) => {\n      return str.map(s => s.trim()).join(delimiter);\n    }\n  }; // console.log(\'aaaaaaaaaa\', window.frames)\n\n  let allFrames = Array.from(window.frames); // console.log(\'aaaaaaaaaa\', allFrames)\n\n  allFrames.unshift(window);\n\n  for (let frame of allFrames) {\n    register(frame.window);\n  }\n}\n\nfunction register(window, context = domContext) {\n  // console.log(\'registering domReader for \', frame)\n  let htmlPrototype = window.HTMLElement.prototype;\n  if (htmlPrototype.setHiddenAttribute) return; // let nativeSetAttribute = htmlPrototype.setAttribute;\n  // htmlPrototype.setAttribute = function (attName, value) {\n  //   if(this.getAttribute(attName) !== value)\n  //   nativeSetAttribute.apply(this, [attName,value])\n  // };\n\n  let nativeSetAttribute = htmlPrototype.setAttribute;\n\n  htmlPrototype.setAttribute = function (attName, value) {\n    nativeSetAttribute.apply(this, [attName, value]);\n  };\n\n  htmlPrototype.setHiddenAttribute = function (attName, value) {\n    context.setAttribute(this, attName, value);\n  };\n\n  htmlPrototype.getHiddenAttribute = function (attName) {\n    return context.getAttribute(this, attName);\n  };\n\n  htmlPrototype.getAllHiddenAttribute = function (attName) {\n    return context.getAllAttributes(this);\n  };\n\n  htmlPrototype.getAnyAttribute = function (attName) {\n    if (this.hasAttribute(attName)) return this.getAttribute(attName);else if (context.hasAttribute(this, attName)) return context.getAttribute(this, attName);\n  };\n\n  htmlPrototype.setAnyAttribute = function (attName, value) {\n    this.setAttribute(attName, value);\n    context.setAttribute(this, attName, value);\n  };\n\n  htmlPrototype.removeAnyAttribute = function (attName) {\n    this.removeAnyAttribute(attName);\n    context.removeAttribute(this, attName);\n  };\n\n  htmlPrototype.hasAnyAttribute = function (attName, value) {\n    return this.hasAttribute(attName) || context.hasAttribute(this, attName);\n  }; // todo: should this cause mutation\n\n\n  htmlPrototype.hideAttribute = function (attName) {\n    if (this.hasAttribute(attName)) {\n      if (context.hasAttribute(this, attName)) return false;\n      context.setAttribute(this, attName, this.getAttribute(attName));\n      this.removeAttribute(attName);\n    }\n  };\n\n  htmlPrototype.unhideAttribute = function (attName) {\n    if (context.hasAttribute(this, attName)) {\n      if (this.hasAttribute(attName)) return false;\n      this.setAttribute(attName, context.getAttribute(this, attName));\n      context.removeAttribute(this, attName);\n    }\n  };\n}\n\ninit();\nconst domReader = {\n  register,\n  domContext\n};\nvar _default = domReader;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/util/domReader.js\n')},"../CoCreate-dnd/src/util/iframe.js":()=>{"use strict";eval("\n\n// always loaded in host no iframes\nwindow.addEventListener('load', () => {\n  let iframes = {\n    host: {\n      document,\n      window\n    },\n    guests: {}\n  };\n  window.iframes = iframes;\n  let allFrames = document.getElementsByTagName('iframe');\n  let i = 1;\n\n  for (let frame of allFrames) {\n    let id = frame.id || `iframe${i++}`;\n    iframes.guests[id] = {\n      frame,\n      document: frame.contentDocument,\n      window: frame.contentWindow\n    };\n    frame.contentWindow.iframes = iframes;\n  }\n\n  const callback = function (mutationsList, observer) {\n    for (let mutation of mutationsList) {\n      if (mutation.type === 'childList') {\n        for (let added of mutation.addedNodes) {\n          if (added.tagName === 'IFRAME') {\n            let id = added.id || `iframe${i++}`;\n            iframes.guests[id] = {\n              frame: added,\n              document: added.contentDocument,\n              window: added.contentWindow\n            };\n            added.contentWindow.iframes = iframes;\n          }\n        }\n      }\n    }\n  };\n\n  const observer = new MutationObserver(callback);\n  const config = {\n    attributes: true,\n    childList: true,\n    subtree: true\n  };\n  observer.observe(document.body, config);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvdXRpbC9pZnJhbWUuanM/MjUyMSJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiaWZyYW1lcyIsImhvc3QiLCJkb2N1bWVudCIsImd1ZXN0cyIsImFsbEZyYW1lcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaSIsImZyYW1lIiwiaWQiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50V2luZG93IiwiY2FsbGJhY2siLCJtdXRhdGlvbnNMaXN0Iiwib2JzZXJ2ZXIiLCJtdXRhdGlvbiIsInR5cGUiLCJhZGRlZCIsImFkZGVkTm9kZXMiLCJ0YWdOYW1lIiwiTXV0YXRpb25PYnNlcnZlciIsImNvbmZpZyIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwib2JzZXJ2ZSIsImJvZHkiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFFQUEsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQyxNQUFNO0FBR3BDLE1BQUlDLE9BQU8sR0FBRztBQUNaQyxRQUFJLEVBQUU7QUFDSkMsY0FESTtBQUVKSjtBQUZJLEtBRE07QUFLWkssVUFBTSxFQUFFO0FBTEksR0FBZDtBQU9BTCxRQUFNLENBQUNFLE9BQVAsR0FBaUJBLE9BQWpCO0FBR0EsTUFBSUksU0FBUyxHQUFHRixRQUFRLENBQUNHLG9CQUFULENBQThCLFFBQTlCLENBQWhCO0FBRUEsTUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsT0FBSyxJQUFJQyxLQUFULElBQWtCSCxTQUFsQixFQUE2QjtBQUMzQixRQUFJSSxFQUFFLEdBQUdELEtBQUssQ0FBQ0MsRUFBTixJQUFhLFNBQVFGLENBQUMsRUFBRyxFQUFsQztBQUNBTixXQUFPLENBQUNHLE1BQVIsQ0FBZUssRUFBZixJQUFzQjtBQUNwQkQsV0FEb0I7QUFFcEJMLGNBQVEsRUFBRUssS0FBSyxDQUFDRSxlQUZJO0FBR3BCWCxZQUFNLEVBQUVTLEtBQUssQ0FBQ0c7QUFITSxLQUF0QjtBQUtBSCxTQUFLLENBQUNHLGFBQU4sQ0FBb0JWLE9BQXBCLEdBQThCQSxPQUE5QjtBQUNEOztBQUtELFFBQU1XLFFBQVEsR0FBRyxVQUFTQyxhQUFULEVBQXdCQyxRQUF4QixFQUFrQztBQUVqRCxTQUFLLElBQUlDLFFBQVQsSUFBcUJGLGFBQXJCLEVBQW9DO0FBQ2xDLFVBQUlFLFFBQVEsQ0FBQ0MsSUFBVCxLQUFrQixXQUF0QixFQUFtQztBQUNqQyxhQUFLLElBQUlDLEtBQVQsSUFBa0JGLFFBQVEsQ0FBQ0csVUFBM0IsRUFBdUM7QUFDckMsY0FBSUQsS0FBSyxDQUFDRSxPQUFOLEtBQWtCLFFBQXRCLEVBQWdDO0FBQzlCLGdCQUFJVixFQUFFLEdBQUdRLEtBQUssQ0FBQ1IsRUFBTixJQUFhLFNBQVFGLENBQUMsRUFBRyxFQUFsQztBQUNBTixtQkFBTyxDQUFDRyxNQUFSLENBQWVLLEVBQWYsSUFBc0I7QUFDcEJELG1CQUFLLEVBQUVTLEtBRGE7QUFFcEJkLHNCQUFRLEVBQUVjLEtBQUssQ0FBQ1AsZUFGSTtBQUdwQlgsb0JBQU0sRUFBRWtCLEtBQUssQ0FBQ047QUFITSxhQUF0QjtBQUtBTSxpQkFBSyxDQUFDTixhQUFOLENBQW9CVixPQUFwQixHQUE4QkEsT0FBOUI7QUFDRDtBQUNGO0FBQ0Y7QUFFRjtBQUNGLEdBbEJEOztBQW9CQSxRQUFNYSxRQUFRLEdBQUcsSUFBSU0sZ0JBQUosQ0FBcUJSLFFBQXJCLENBQWpCO0FBRUEsUUFBTVMsTUFBTSxHQUFHO0FBQUVDLGNBQVUsRUFBRSxJQUFkO0FBQW9CQyxhQUFTLEVBQUUsSUFBL0I7QUFBcUNDLFdBQU8sRUFBRTtBQUE5QyxHQUFmO0FBRUFWLFVBQVEsQ0FBQ1csT0FBVCxDQUFpQnRCLFFBQVEsQ0FBQ3VCLElBQTFCLEVBQWdDTCxNQUFoQztBQUdELENBeEREIiwiZmlsZSI6Ii4uL0NvQ3JlYXRlLWRuZC9zcmMvdXRpbC9pZnJhbWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbHdheXMgbG9hZGVkIGluIGhvc3Qgbm8gaWZyYW1lc1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcblxuXG4gIGxldCBpZnJhbWVzID0ge1xuICAgIGhvc3Q6IHtcbiAgICAgIGRvY3VtZW50LFxuICAgICAgd2luZG93XG4gICAgfSxcbiAgICBndWVzdHM6IHt9XG4gIH07XG4gIHdpbmRvdy5pZnJhbWVzID0gaWZyYW1lc1xuXG5cbiAgbGV0IGFsbEZyYW1lcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpZnJhbWUnKVxuXG4gIGxldCBpID0gMTtcbiAgZm9yIChsZXQgZnJhbWUgb2YgYWxsRnJhbWVzKSB7XG4gICAgbGV0IGlkID0gZnJhbWUuaWQgfHwgYGlmcmFtZSR7aSsrfWBcbiAgICBpZnJhbWVzLmd1ZXN0c1tpZF0gPSAoe1xuICAgICAgZnJhbWUsXG4gICAgICBkb2N1bWVudDogZnJhbWUuY29udGVudERvY3VtZW50LFxuICAgICAgd2luZG93OiBmcmFtZS5jb250ZW50V2luZG93XG4gICAgfSlcbiAgICBmcmFtZS5jb250ZW50V2luZG93LmlmcmFtZXMgPSBpZnJhbWVzO1xuICB9XG5cblxuXG5cbiAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbihtdXRhdGlvbnNMaXN0LCBvYnNlcnZlcikge1xuXG4gICAgZm9yIChsZXQgbXV0YXRpb24gb2YgbXV0YXRpb25zTGlzdCkge1xuICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgIGZvciAobGV0IGFkZGVkIG9mIG11dGF0aW9uLmFkZGVkTm9kZXMpIHtcbiAgICAgICAgICBpZiAoYWRkZWQudGFnTmFtZSA9PT0gJ0lGUkFNRScpIHtcbiAgICAgICAgICAgIGxldCBpZCA9IGFkZGVkLmlkIHx8IGBpZnJhbWUke2krK31gXG4gICAgICAgICAgICBpZnJhbWVzLmd1ZXN0c1tpZF0gPSAoe1xuICAgICAgICAgICAgICBmcmFtZTogYWRkZWQsXG4gICAgICAgICAgICAgIGRvY3VtZW50OiBhZGRlZC5jb250ZW50RG9jdW1lbnQsXG4gICAgICAgICAgICAgIHdpbmRvdzogYWRkZWQuY29udGVudFdpbmRvd1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGFkZGVkLmNvbnRlbnRXaW5kb3cuaWZyYW1lcyA9IGlmcmFtZXM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjayk7XG5cbiAgY29uc3QgY29uZmlnID0geyBhdHRyaWJ1dGVzOiB0cnVlLCBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfTtcblxuICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIGNvbmZpZyk7XG5cblxufSlcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/util/iframe.js\n")},"../CoCreate-dnd/src/util/onClickLeftEvent.js":()=>{"use strict";eval("\n\n// synthesize custom event \"CoCreateClickLeft\" that only trigger when\n// mousedown and up happen in 500ms witin the same element\nlet lastEl = null;\nlet time = null;\ndocument.addEventListener('mousedown', e => {\n  if (e.which === 1) {\n    lastEl = e.target;\n    time = new Date().getTime();\n  }\n});\ndocument.addEventListener('mouseup', e => {\n  let newTime = new Date().getTime();\n\n  if (lastEl == e.target && newTime < time + 500) {\n    const event = new CustomEvent('CoCreateClickLeft', {\n      bubbles: true\n    });\n    e.target.dispatchEvent(event);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvdXRpbC9vbkNsaWNrTGVmdEV2ZW50LmpzPzc5NzEiXSwibmFtZXMiOlsibGFzdEVsIiwidGltZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJ3aGljaCIsInRhcmdldCIsIkRhdGUiLCJnZXRUaW1lIiwibmV3VGltZSIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiZGlzcGF0Y2hFdmVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBRUEsSUFBSUEsTUFBTSxHQUFHLElBQWI7QUFDQSxJQUFJQyxJQUFJLEdBQUcsSUFBWDtBQUVBQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLFdBQTFCLEVBQXVDQyxDQUFDLElBQUk7QUFDMUMsTUFBSUEsQ0FBQyxDQUFDQyxLQUFGLEtBQVksQ0FBaEIsRUFBbUI7QUFDakJMLFVBQU0sR0FBR0ksQ0FBQyxDQUFDRSxNQUFYO0FBQ0FMLFFBQUksR0FBRyxJQUFJTSxJQUFKLEdBQVdDLE9BQVgsRUFBUDtBQUNEO0FBQ0YsQ0FMRDtBQU9BTixRQUFRLENBQUNDLGdCQUFULENBQTBCLFNBQTFCLEVBQXFDQyxDQUFDLElBQUk7QUFDeEMsTUFBSUssT0FBTyxHQUFHLElBQUlGLElBQUosR0FBV0MsT0FBWCxFQUFkOztBQUNBLE1BQUlSLE1BQU0sSUFBSUksQ0FBQyxDQUFDRSxNQUFaLElBQXNCRyxPQUFPLEdBQUdSLElBQUksR0FBRyxHQUEzQyxFQUFnRDtBQUM5QyxVQUFNUyxLQUFLLEdBQUcsSUFBSUMsV0FBSixDQUFnQixtQkFBaEIsRUFBcUM7QUFDakRDLGFBQU8sRUFBRTtBQUR3QyxLQUFyQyxDQUFkO0FBR0FSLEtBQUMsQ0FBQ0UsTUFBRixDQUFTTyxhQUFULENBQXVCSCxLQUF2QjtBQUNEO0FBRUYsQ0FURCIsImZpbGUiOiIuLi9Db0NyZWF0ZS1kbmQvc3JjL3V0aWwvb25DbGlja0xlZnRFdmVudC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN5bnRoZXNpemUgY3VzdG9tIGV2ZW50IFwiQ29DcmVhdGVDbGlja0xlZnRcIiB0aGF0IG9ubHkgdHJpZ2dlciB3aGVuXG4vLyBtb3VzZWRvd24gYW5kIHVwIGhhcHBlbiBpbiA1MDBtcyB3aXRpbiB0aGUgc2FtZSBlbGVtZW50XG5cbmxldCBsYXN0RWwgPSBudWxsO1xubGV0IHRpbWUgPSBudWxsO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBlID0+IHtcbiAgaWYgKGUud2hpY2ggPT09IDEpIHtcbiAgICBsYXN0RWwgPSBlLnRhcmdldDtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgfVxufSlcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGUgPT4ge1xuICBsZXQgbmV3VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICBpZiAobGFzdEVsID09IGUudGFyZ2V0ICYmIG5ld1RpbWUgPCB0aW1lICsgNTAwKSB7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ0NvQ3JlYXRlQ2xpY2tMZWZ0Jywge1xuICAgICAgYnViYmxlczogdHJ1ZVxuICAgIH0pO1xuICAgIGUudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpXG4gIH1cblxufSlcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/util/onClickLeftEvent.js\n")},"../CoCreate-dnd/src/util/variables.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.data_insert_html = exports.group_name = exports.dndname = exports.handleable = exports.hoverable = exports.editable = exports.selectable = exports.cloneable = exports.draggable = exports.exclude = exports.droppable = void 0;\nconst droppable = "data-droppable";\nexports.droppable = droppable;\nconst exclude = "data-exclude";\nexports.exclude = exclude;\nconst draggable = "data-draggable";\nexports.draggable = draggable;\nconst cloneable = "data-cloneable";\nexports.cloneable = cloneable;\nconst selectable = "data-selectable";\nexports.selectable = selectable;\nconst editable = "data-editable";\nexports.editable = editable;\nconst hoverable = "data-hoverable";\nexports.hoverable = hoverable;\nconst handleable = "data-handle";\nexports.handleable = handleable;\nconst dndname = "data-name";\nexports.dndname = dndname;\nconst group_name = "data-group_name";\nexports.group_name = group_name;\nconst data_insert_html = "data-insert-html";\nexports.data_insert_html = data_insert_html;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvdXRpbC92YXJpYWJsZXMuanM/NjFiNCJdLCJuYW1lcyI6WyJkcm9wcGFibGUiLCJleGNsdWRlIiwiZHJhZ2dhYmxlIiwiY2xvbmVhYmxlIiwic2VsZWN0YWJsZSIsImVkaXRhYmxlIiwiaG92ZXJhYmxlIiwiaGFuZGxlYWJsZSIsImRuZG5hbWUiLCJncm91cF9uYW1lIiwiZGF0YV9pbnNlcnRfaHRtbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sTUFBTUEsU0FBUyxHQUFHLGdCQUFsQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUcsY0FBaEI7O0FBQ0EsTUFBTUMsU0FBUyxHQUFHLGdCQUFsQjs7QUFDQSxNQUFNQyxTQUFTLEdBQUcsZ0JBQWxCOztBQUNBLE1BQU1DLFVBQVUsR0FBRyxpQkFBbkI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHLGVBQWpCOztBQUNBLE1BQU1DLFNBQVMsR0FBRyxnQkFBbEI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHLGFBQW5COztBQUNBLE1BQU1DLE9BQU8sR0FBRyxXQUFoQjs7QUFDQSxNQUFNQyxVQUFVLEdBQUcsaUJBQW5COztBQUNBLE1BQU1DLGdCQUFnQixHQUFHLGtCQUF6QiIsImZpbGUiOiIuLi9Db0NyZWF0ZS1kbmQvc3JjL3V0aWwvdmFyaWFibGVzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRyb3BwYWJsZSA9IFwiZGF0YS1kcm9wcGFibGVcIjtcbmV4cG9ydCBjb25zdCBleGNsdWRlID0gXCJkYXRhLWV4Y2x1ZGVcIjtcbmV4cG9ydCBjb25zdCBkcmFnZ2FibGUgPSBcImRhdGEtZHJhZ2dhYmxlXCI7XG5leHBvcnQgY29uc3QgY2xvbmVhYmxlID0gXCJkYXRhLWNsb25lYWJsZVwiO1xuZXhwb3J0IGNvbnN0IHNlbGVjdGFibGUgPSBcImRhdGEtc2VsZWN0YWJsZVwiO1xuZXhwb3J0IGNvbnN0IGVkaXRhYmxlID0gXCJkYXRhLWVkaXRhYmxlXCI7XG5leHBvcnQgY29uc3QgaG92ZXJhYmxlID0gXCJkYXRhLWhvdmVyYWJsZVwiO1xuZXhwb3J0IGNvbnN0IGhhbmRsZWFibGUgPSBcImRhdGEtaGFuZGxlXCI7XG5leHBvcnQgY29uc3QgZG5kbmFtZSA9IFwiZGF0YS1uYW1lXCI7XG5leHBvcnQgY29uc3QgZ3JvdXBfbmFtZSA9IFwiZGF0YS1ncm91cF9uYW1lXCI7XG5leHBvcnQgY29uc3QgZGF0YV9pbnNlcnRfaHRtbCA9IFwiZGF0YS1pbnNlcnQtaHRtbFwiO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/util/variables.js\n')},"../CoCreate-dnd/src/virtualDnd.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = virtualDnd;\n\nvar _eventUtil = _interopRequireDefault(__webpack_require__(/*! ./eventUtil */ "../CoCreate-dnd/src/eventUtil.js"));\n\nvar _common = __webpack_require__(/*! ./util/common */ "../CoCreate-dnd/src/util/common.js");\n\nvar _variables = __webpack_require__(/*! ./util/variables */ "../CoCreate-dnd/src/util/variables.js");\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ "../CoCreate-utils/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nlet topleft = ["left", "top"];\n\nfunction virtualDnd(beforeDndSuccess) {\n  this.dragedEl;\n  this.dropedEl;\n  this.position;\n  this.id;\n  this.type;\n  let evnt = new _eventUtil.default();\n\n  this.on = function () {\n    evnt.on.apply(evnt, arguments);\n  };\n\n  this.dragStart = (e, el, id, ref, dropType) => {\n    // #broadcast\n    // domEditor({\n    //   obj: selectorUtil.cssPath( this.dropedEl),\n    //   method: \'insertAdjacentElement\',\n    //   value: { param1: [this.position, selectorUtil.cssPath(this.dragedEl)] }\n    // });\n    this.id = id;\n    this.dropType = dropType;\n    console.log({\n      comment: "dragStart"\n    }); // dfonclk.onActive(e.target)\n    // selectBoxMarker.hide(onRemove)\n    // greenDropMarker.hide();\n\n    this.dragedEl = el;\n    evnt.dispatch("dragStart", {\n      e,\n      el,\n      ref\n    });\n  };\n\n  this.dragEnd = (e, ref) => {\n    try {\n      if (this.dragedEl) this.dragedEl.removeAttribute("CoC-dragging");\n\n      if (this.position) {\n        if (this.dropedEl === this.dragedEl) throw "dnd cancelled. you can\'t dnd on the same element."; // in future we should also disable hover and tag name in dragOver method\n        // parent can\'t be draged into children\n\n        if (this.dragedEl.contains(this.dropedEl)) throw "dnd cancelled, you can\'t dnd from parent to its children.";\n\n        let path = _utils.default.getElementPath(this.dropedEl); // get iframe path\n        // let path = [];\n        //   const {cssPath, findIframeFromElement, getTopMostWindow} = window.cc;\n        //   let topWindow = getTopMostWindow()\n        //   let iframeElement = findIframeFromElement(topWindow, this.dropedEl)\n        //   let p = cssPath(iframeElement);\n        //   if(p)\n        //   path.unshift(p)\n        //todo: support for nested iframe\n        // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n        // {\n        //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n        //   path.unshift(cssPath(iframeElement))\n        // }\n\n\n        let detail = {\n          position: this.position,\n          dragedEl: this.dragedEl,\n          dropedEl: this.dropedEl,\n          dropType: this.dropType,\n          path\n        };\n        let result;\n        if (beforeDndSuccess) result = beforeDndSuccess(detail);\n        Object.assign(detail, result); // dispatch gloval events\n\n        const event = new CustomEvent("dndsuccess", {\n          bubbles: false,\n          detail\n        });\n        let broadcast = {\n          target: detail.dropedEl,\n          method: "insertAdjacentElement",\n          value: [detail.position, detail.dragedEl]\n        };\n        this.dropedEl.insertAdjacentElement(this.position, this.dragedEl); // domEditor(broadcast);\n\n        window.dispatchEvent(event, {\n          bubbles: false\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    } finally {\n      if (this.type) {\n        this.position = null;\n        console.log("dnd completed", "type:", this.type, "position:", this.position);\n      }\n\n      evnt.dispatch("dragEnd", {\n        e,\n        ref\n      });\n    }\n  };\n\n  this.dragOver = (e, el, ref) => {\n    // el is the element hovered\n    if (this.dragedEl) this.dragedEl.setAttribute("CoC-dragging", true);\n\n    if (el.children.length === 0) {\n      // place top or bottom inside the element\n      let [orientation, closestEl] = (0, _common.closestChild)([e.x, e.y], [el]);\n      evnt.dispatch("dragOver", {\n        e,\n        el,\n        closestEl,\n        orientation,\n        hasChild: true,\n        ref\n      }); // greenDropMarker.draw(el, el, orientation, true);\n      // hoverBoxMarker.draw(el)\n      // tagNameTooltip.draw(el)\n\n      this.position = topleft.includes(orientation) ? "afterbegin" : "beforeend";\n      this.dropedEl = el;\n      this.type = "normal";\n    } else {\n      // find closest child and put outside the child element on top or bottom relating to that child,\n      let [orientation, closestEl] = (0, _common.closestChild)([e.x, e.y], el.children); // greenDropMarker.draw(el, closestEl, orientation, false);\n      // hoverBoxMarker.draw(el)\n      // tagNameTooltip.draw(el)\n\n      if (closestEl.getAttribute("data-exclude") == "true") {\n        this.dropedEl = closestEl.parentElement; // only to get orientation\n\n        let [orientation2, closestEl2] = (0, _common.closestChild)([e.x, e.y], [this.dropedEl]);\n        orientation = orientation2;\n      } else this.dropedEl = closestEl;\n\n      evnt.dispatch("dragOver", {\n        e,\n        el,\n        closestEl,\n        orientation,\n        hasChild: false,\n        ref\n      });\n      this.position = topleft.includes(orientation) ? "beforebegin" : "afterend";\n      this.type = "children";\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/virtualDnd.js\n')},"../../node_modules/file-loader/dist/cjs.js!../CoCreate-dnd/src/CoCreate-dnd.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "862e2fd973e3d8e9d9daf4bf94ef74e4.css");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvQ29DcmVhdGUtZG5kLmNzcz85ZGQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxxQkFBdUIseUNBQXlDIiwiZmlsZSI6Ii4uLy4uL25vZGVfbW9kdWxlcy9maWxlLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9Db0NyZWF0ZS1kbmQvc3JjL0NvQ3JlYXRlLWRuZC5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiODYyZTJmZDk3M2UzZDhlOWQ5ZGFmNGJmOTRlZjc0ZTQuY3NzXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../node_modules/file-loader/dist/cjs.js!../CoCreate-dnd/src/CoCreate-dnd.css\n')},"../CoCreate-dnd/src/CoCreate-dnd.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js */ "../../node_modules/style-loader/dist/runtime/injectStylesIntoLinkTag.js");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_file_loader_dist_cjs_js_CoCreate_dnd_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/file-loader/dist/cjs.js!./CoCreate-dnd.css */ "../../node_modules/file-loader/dist/cjs.js!../CoCreate-dnd/src/CoCreate-dnd.css");\n\n            \n\nvar options = {"injectType":"linkTag"};\n\noptions.insert = "head";\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoLinkTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_file_loader_dist_cjs_js_CoCreate_dnd_css__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5jdXJzb3JzLy4uL0NvQ3JlYXRlLWRuZC9zcmMvQ29DcmVhdGUtZG5kLmNzcz8zZDEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBOEY7QUFDOUYsWUFBcUc7O0FBRXJHLGVBQWU7O0FBRWY7O0FBRUEsYUFBYSx5R0FBRyxDQUFDLDJGQUFPOzs7O0FBSXhCLGlFQUFlLEUiLCJmaWxlIjoiLi4vQ29DcmVhdGUtZG5kL3NyYy9Db0NyZWF0ZS1kbmQuY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9MaW5rVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmlsZS1sb2FkZXIvZGlzdC9janMuanMhLi9Db0NyZWF0ZS1kbmQuY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge1wiaW5qZWN0VHlwZVwiOlwibGlua1RhZ1wifTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IHt9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../CoCreate-dnd/src/CoCreate-dnd.css\n')}}]);