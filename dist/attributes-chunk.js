/*! For license information please see attributes-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["attributes-chunk"],{"../../node_modules/@simonwep/pickr/dist/pickr.min.js":module=>{eval('/*! Pickr 1.8.0 MIT | https://github.com/Simonwep/pickr */\n!function(t,e){ true?module.exports=e():0}(window,(function(){return function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}return o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);var n={};function i(t,e,o,n,i={}){e instanceof HTMLCollection||e instanceof NodeList?e=Array.from(e):Array.isArray(e)||(e=[e]),Array.isArray(o)||(o=[o]);for(const r of e)for(const e of o)r[t](e,n,{capture:!1,...i});return Array.prototype.slice.call(arguments,1)}o.r(n),o.d(n,"on",(function(){return r})),o.d(n,"off",(function(){return s})),o.d(n,"createElementFromString",(function(){return a})),o.d(n,"createFromTemplate",(function(){return l})),o.d(n,"eventPath",(function(){return c})),o.d(n,"resolveElement",(function(){return p})),o.d(n,"adjustableInputNumbers",(function(){return u}));const r=i.bind(null,"addEventListener"),s=i.bind(null,"removeEventListener");function a(t){const e=document.createElement("div");return e.innerHTML=t.trim(),e.firstElementChild}function l(t){const e=(t,e)=>{const o=t.getAttribute(e);return t.removeAttribute(e),o},o=(t,n={})=>{const i=e(t,":obj"),r=e(t,":ref"),s=i?n[i]={}:n;r&&(n[r]=t);for(const n of Array.from(t.children)){const t=e(n,":arr"),i=o(n,t?{}:s);t&&(s[t]||(s[t]=[])).push(Object.keys(i).length?i:n)}return n};return o(a(t))}function c(t){let e=t.path||t.composedPath&&t.composedPath();if(e)return e;let o=t.target.parentElement;for(e=[t.target,o];o=o.parentElement;)e.push(o);return e.push(document,window),e}function p(t){return t instanceof Element?t:"string"==typeof t?t.split(/>>/g).reduce((t,e,o,n)=>(t=t.querySelector(e),o<n.length-1?t.shadowRoot:t),document):null}function u(t,e=(t=>t)){function o(o){const n=[.001,.01,.1][Number(o.shiftKey||2*o.ctrlKey)]*(o.deltaY<0?1:-1);let i=0,r=t.selectionStart;t.value=t.value.replace(/[\\d.]+/g,(t,o)=>o<=r&&o+t.length>=r?(r=o,e(Number(t),n,i)):(i++,t)),t.focus(),t.setSelectionRange(r,r),o.preventDefault(),t.dispatchEvent(new Event("input"))}r(t,"focus",()=>r(window,"wheel",o,{passive:!1})),r(t,"blur",()=>s(window,"wheel",o))}const{min:h,max:d,floor:f,round:m}=Math;function v(t,e,o){e/=100,o/=100;const n=f(t=t/360*6),i=t-n,r=o*(1-e),s=o*(1-i*e),a=o*(1-(1-i)*e),l=n%6;return[255*[o,s,r,r,a,o][l],255*[a,o,o,s,r,r][l],255*[r,r,a,o,o,s][l]]}function b(t,e,o){const n=(2-(e/=100))*(o/=100)/2;return 0!==n&&(e=1===n?0:n<.5?e*o/(2*n):e*o/(2-2*n)),[t,100*e,100*n]}function g(t,e,o){const n=h(t/=255,e/=255,o/=255),i=d(t,e,o),r=i-n;let s,a;if(0===r)s=a=0;else{a=r/i;const n=((i-t)/6+r/2)/r,l=((i-e)/6+r/2)/r,c=((i-o)/6+r/2)/r;t===i?s=c-l:e===i?s=1/3+n-c:o===i&&(s=2/3+l-n),s<0?s+=1:s>1&&(s-=1)}return[360*s,100*a,100*i]}function y(t,e,o,n){e/=100,o/=100;return[...g(255*(1-h(1,(t/=100)*(1-(n/=100))+n)),255*(1-h(1,e*(1-n)+n)),255*(1-h(1,o*(1-n)+n)))]}function _(t,e,o){e/=100;const n=2*(e*=(o/=100)<.5?o:1-o)/(o+e)*100,i=100*(o+e);return[t,isNaN(n)?0:n,i]}function w(t){return g(...t.match(/.{2}/g).map(t=>parseInt(t,16)))}function A(t){t=t.match(/^[a-zA-Z]+$/)?function(t){if("black"===t.toLowerCase())return"#000";const e=document.createElement("canvas").getContext("2d");return e.fillStyle=t,"#000"===e.fillStyle?null:e.fillStyle}(t):t;const e={cmyk:/^cmyk[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)/i,rgba:/^((rgba)|rgb)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,hsla:/^((hsla)|hsl)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,hsva:/^((hsva)|hsv)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,hexa:/^#?(([\\dA-Fa-f]{3,4})|([\\dA-Fa-f]{6})|([\\dA-Fa-f]{8}))$/i},o=t=>t.map(t=>/^(|\\d+)\\.\\d+|\\d+$/.test(t)?Number(t):void 0);let n;t:for(const i in e){if(!(n=e[i].exec(t)))continue;const r=t=>!!n[2]==("number"==typeof t);switch(i){case"cmyk":{const[,t,e,r,s]=o(n);if(t>100||e>100||r>100||s>100)break t;return{values:y(t,e,r,s),type:i}}case"rgba":{const[,,,t,e,s,a]=o(n);if(t>255||e>255||s>255||a<0||a>1||!r(a))break t;return{values:[...g(t,e,s),a],a:a,type:i}}case"hexa":{let[,t]=n;4!==t.length&&3!==t.length||(t=t.split("").map(t=>t+t).join(""));const e=t.substring(0,6);let o=t.substring(6);return o=o?parseInt(o,16)/255:void 0,{values:[...w(e),o],a:o,type:i}}case"hsla":{const[,,,t,e,s,a]=o(n);if(t>360||e>100||s>100||a<0||a>1||!r(a))break t;return{values:[..._(t,e,s),a],a:a,type:i}}case"hsva":{const[,,,t,e,s,a]=o(n);if(t>360||e>100||s>100||a<0||a>1||!r(a))break t;return{values:[t,e,s,a],a:a,type:i}}}}return{values:null,type:null}}function C(t=0,e=0,o=0,n=1){const i=(t,e)=>(o=-1)=>e(~o?t.map(t=>Number(t.toFixed(o))):t),r={h:t,s:e,v:o,a:n,toHSVA(){const t=[r.h,r.s,r.v,r.a];return t.toString=i(t,t=>`hsva(${t[0]}, ${t[1]}%, ${t[2]}%, ${r.a})`),t},toHSLA(){const t=[...b(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>`hsla(${t[0]}, ${t[1]}%, ${t[2]}%, ${r.a})`),t},toRGBA(){const t=[...v(r.h,r.s,r.v),r.a];return t.toString=i(t,t=>`rgba(${t[0]}, ${t[1]}, ${t[2]}, ${r.a})`),t},toCMYK(){const t=function(t,e,o){const n=v(t,e,o),i=n[0]/255,r=n[1]/255,s=n[2]/255,a=h(1-i,1-r,1-s);return[100*(1===a?0:(1-i-a)/(1-a)),100*(1===a?0:(1-r-a)/(1-a)),100*(1===a?0:(1-s-a)/(1-a)),100*a]}(r.h,r.s,r.v);return t.toString=i(t,t=>`cmyk(${t[0]}%, ${t[1]}%, ${t[2]}%, ${t[3]}%)`),t},toHEXA(){const t=function(t,e,o){return v(t,e,o).map(t=>m(t).toString(16).padStart(2,"0"))}(r.h,r.s,r.v),e=r.a>=1?"":Number((255*r.a).toFixed(0)).toString(16).toUpperCase().padStart(2,"0");return e&&t.push(e),t.toString=()=>"#"+t.join("").toUpperCase(),t},clone:()=>C(r.h,r.s,r.v,r.a)};return r}const k=t=>Math.max(Math.min(t,1),0);function $(t){const e={options:Object.assign({lock:null,onchange:()=>0,onstop:()=>0},t),_keyboard(t){const{options:o}=e,{type:n,key:i}=t;if(document.activeElement===o.wrapper){const{lock:o}=e.options,r="ArrowUp"===i,s="ArrowRight"===i,a="ArrowDown"===i,l="ArrowLeft"===i;if("keydown"===n&&(r||s||a||l)){let n=0,i=0;"v"===o?n=r||s?1:-1:"h"===o?n=r||s?-1:1:(i=r?-1:a?1:0,n=l?-1:s?1:0),e.update(k(e.cache.x+.01*n),k(e.cache.y+.01*i)),t.preventDefault()}else i.startsWith("Arrow")&&(e.options.onstop(),t.preventDefault())}},_tapstart(t){r(document,["mouseup","touchend","touchcancel"],e._tapstop),r(document,["mousemove","touchmove"],e._tapmove),t.cancelable&&t.preventDefault(),e._tapmove(t)},_tapmove(t){const{options:o,cache:n}=e,{lock:i,element:r,wrapper:s}=o,a=s.getBoundingClientRect();let l=0,c=0;if(t){const e=t&&t.touches&&t.touches[0];l=t?(e||t).clientX:0,c=t?(e||t).clientY:0,l<a.left?l=a.left:l>a.left+a.width&&(l=a.left+a.width),c<a.top?c=a.top:c>a.top+a.height&&(c=a.top+a.height),l-=a.left,c-=a.top}else n&&(l=n.x*a.width,c=n.y*a.height);"h"!==i&&(r.style.left=`calc(${l/a.width*100}% - ${r.offsetWidth/2}px)`),"v"!==i&&(r.style.top=`calc(${c/a.height*100}% - ${r.offsetHeight/2}px)`),e.cache={x:l/a.width,y:c/a.height};const p=k(l/a.width),u=k(c/a.height);switch(i){case"v":return o.onchange(p);case"h":return o.onchange(u);default:return o.onchange(p,u)}},_tapstop(){e.options.onstop(),s(document,["mouseup","touchend","touchcancel"],e._tapstop),s(document,["mousemove","touchmove"],e._tapmove)},trigger(){e._tapmove()},update(t=0,o=0){const{left:n,top:i,width:r,height:s}=e.options.wrapper.getBoundingClientRect();"h"===e.options.lock&&(o=t),e._tapmove({clientX:n+r*t,clientY:i+s*o})},destroy(){const{options:t,_tapstart:o,_keyboard:n}=e;s(document,["keydown","keyup"],n),s([t.wrapper,t.element],"mousedown",o),s([t.wrapper,t.element],"touchstart",o,{passive:!1})}},{options:o,_tapstart:n,_keyboard:i}=e;return r([o.wrapper,o.element],"mousedown",n),r([o.wrapper,o.element],"touchstart",n,{passive:!1}),r(document,["keydown","keyup"],i),e}function S(t={}){t=Object.assign({onchange:()=>0,className:"",elements:[]},t);const e=r(t.elements,"click",e=>{t.elements.forEach(o=>o.classList[e.target===o?"add":"remove"](t.className)),t.onchange(e),e.stopPropagation()});return{destroy:()=>s(...e)}}\n/*! NanoPop 2.1.0 MIT | https://github.com/Simonwep/nanopop */\nconst O={variantFlipOrder:{start:"sme",middle:"mse",end:"ems"},positionFlipOrder:{top:"tbrl",right:"rltb",bottom:"btrl",left:"lrbt"},position:"bottom",margin:8},E=(t,e,o)=>{const n="object"!=typeof t||t instanceof HTMLElement?{reference:t,popper:e,...o}:t;return{update(t=n){const{reference:e,popper:o}=Object.assign(n,t);if(!o||!e)throw new Error("Popper- or reference-element missing.");return((t,e,o)=>{const{container:n,margin:i,position:r,variantFlipOrder:s,positionFlipOrder:a}={container:document.documentElement.getBoundingClientRect(),...O,...o},{left:l,top:c}=e.style;e.style.left="0",e.style.top="0";const p=t.getBoundingClientRect(),u=e.getBoundingClientRect(),h={t:p.top-u.height-i,b:p.bottom+i,r:p.right+i,l:p.left-u.width-i},d={vs:p.left,vm:p.left+p.width/2+-u.width/2,ve:p.left+p.width-u.width,hs:p.top,hm:p.bottom-p.height/2-u.height/2,he:p.bottom-u.height},[f,m="middle"]=r.split("-"),v=a[f],b=s[m],{top:g,left:y,bottom:_,right:w}=n;for(const t of v){const o="t"===t||"b"===t,n=h[t],[i,r]=o?["top","left"]:["left","top"],[s,a]=o?[u.height,u.width]:[u.width,u.height],[l,c]=o?[_,w]:[w,_],[p,f]=o?[g,y]:[y,g];if(!(n<p||n+s>l))for(const s of b){const l=d[(o?"v":"h")+s];if(!(l<f||l+a>c))return e.style[r]=l-u[r]+"px",e.style[i]=n-u[i]+"px",t+s}}return e.style.left=l,e.style.top=c,null})(e,o,n)}}};function L(t,e,o){return e in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}class x{constructor(t){L(this,"_initializingActive",!0),L(this,"_recalc",!0),L(this,"_nanopop",null),L(this,"_root",null),L(this,"_color",C()),L(this,"_lastColor",C()),L(this,"_swatchColors",[]),L(this,"_setupAnimationFrame",null),L(this,"_eventListener",{init:[],save:[],hide:[],show:[],clear:[],change:[],changestop:[],cancel:[],swatchselect:[]}),this.options=t=Object.assign({...x.DEFAULT_OPTIONS},t);const{swatches:e,components:o,theme:n,sliders:i,lockOpacity:r,padding:s}=t;["nano","monolith"].includes(n)&&!i&&(t.sliders="h"),o.interaction||(o.interaction={});const{preview:a,opacity:l,hue:c,palette:p}=o;o.opacity=!r&&l,o.palette=p||a||l||c,this._preBuild(),this._buildComponents(),this._bindEvents(),this._finalBuild(),e&&e.length&&e.forEach(t=>this.addSwatch(t));const{button:u,app:h}=this._root;this._nanopop=E(u,h,{margin:s}),u.setAttribute("role","button"),u.setAttribute("aria-label",this._t("btn:toggle"));const d=this;this._setupAnimationFrame=requestAnimationFrame((function e(){if(!h.offsetWidth)return requestAnimationFrame(e);d.setColor(t.default),d._rePositioningPicker(),t.defaultRepresentation&&(d._representation=t.defaultRepresentation,d.setColorRepresentation(d._representation)),t.showAlways&&d.show(),d._initializingActive=!1,d._emit("init")}))}_preBuild(){const{options:t}=this;for(const e of["el","container"])t[e]=p(t[e]);this._root=(t=>{const{components:e,useAsButton:o,inline:n,appClass:i,theme:r,lockOpacity:s}=t.options,a=t=>t?"":\'style="display:none" hidden\',c=e=>t._t(e),p=l(`\\n      <div :ref="root" class="pickr">\\n\\n        ${o?"":\'<button type="button" :ref="button" class="pcr-button"></button>\'}\\n\\n        <div :ref="app" class="pcr-app ${i||""}" data-theme="${r}" ${n?\'style="position: unset"\':""} aria-label="${c("ui:dialog")}" role="window">\\n          <div class="pcr-selection" ${a(e.palette)}>\\n            <div :obj="preview" class="pcr-color-preview" ${a(e.preview)}>\\n              <button type="button" :ref="lastColor" class="pcr-last-color" aria-label="${c("btn:last-color")}"></button>\\n              <div :ref="currentColor" class="pcr-current-color"></div>\\n            </div>\\n\\n            <div :obj="palette" class="pcr-color-palette">\\n              <div :ref="picker" class="pcr-picker"></div>\\n              <div :ref="palette" class="pcr-palette" tabindex="0" aria-label="${c("aria:palette")}" role="listbox"></div>\\n            </div>\\n\\n            <div :obj="hue" class="pcr-color-chooser" ${a(e.hue)}>\\n              <div :ref="picker" class="pcr-picker"></div>\\n              <div :ref="slider" class="pcr-hue pcr-slider" tabindex="0" aria-label="${c("aria:hue")}" role="slider"></div>\\n            </div>\\n\\n            <div :obj="opacity" class="pcr-color-opacity" ${a(e.opacity)}>\\n              <div :ref="picker" class="pcr-picker"></div>\\n              <div :ref="slider" class="pcr-opacity pcr-slider" tabindex="0" aria-label="${c("aria:opacity")}" role="slider"></div>\\n            </div>\\n          </div>\\n\\n          <div class="pcr-swatches ${e.palette?"":"pcr-last"}" :ref="swatches"></div>\\n\\n          <div :obj="interaction" class="pcr-interaction" ${a(Object.keys(e.interaction).length)}>\\n            <input :ref="result" class="pcr-result" type="text" spellcheck="false" ${a(e.interaction.input)} aria-label="${c("aria:input")}">\\n\\n            <input :arr="options" class="pcr-type" data-type="HEXA" value="${s?"HEX":"HEXA"}" type="button" ${a(e.interaction.hex)}>\\n            <input :arr="options" class="pcr-type" data-type="RGBA" value="${s?"RGB":"RGBA"}" type="button" ${a(e.interaction.rgba)}>\\n            <input :arr="options" class="pcr-type" data-type="HSLA" value="${s?"HSL":"HSLA"}" type="button" ${a(e.interaction.hsla)}>\\n            <input :arr="options" class="pcr-type" data-type="HSVA" value="${s?"HSV":"HSVA"}" type="button" ${a(e.interaction.hsva)}>\\n            <input :arr="options" class="pcr-type" data-type="CMYK" value="CMYK" type="button" ${a(e.interaction.cmyk)}>\\n\\n            <input :ref="save" class="pcr-save" value="${c("btn:save")}" type="button" ${a(e.interaction.save)} aria-label="${c("aria:btn:save")}">\\n            <input :ref="cancel" class="pcr-cancel" value="${c("btn:cancel")}" type="button" ${a(e.interaction.cancel)} aria-label="${c("aria:btn:cancel")}">\\n            <input :ref="clear" class="pcr-clear" value="${c("btn:clear")}" type="button" ${a(e.interaction.clear)} aria-label="${c("aria:btn:clear")}">\\n          </div>\\n        </div>\\n      </div>\\n    `),u=p.interaction;return u.options.find(t=>!t.hidden&&!t.classList.add("active")),u.type=()=>u.options.find(t=>t.classList.contains("active")),p})(this),t.useAsButton&&(this._root.button=t.el),t.container.appendChild(this._root.root)}_finalBuild(){const t=this.options,e=this._root;if(t.container.removeChild(e.root),t.inline){const o=t.el.parentElement;t.el.nextSibling?o.insertBefore(e.app,t.el.nextSibling):o.appendChild(e.app)}else t.container.appendChild(e.app);t.useAsButton?t.inline&&t.el.remove():t.el.parentNode.replaceChild(e.root,t.el),t.disabled&&this.disable(),t.comparison||(e.button.style.transition="none",t.useAsButton||(e.preview.lastColor.style.transition="none")),this.hide()}_buildComponents(){const t=this,e=this.options.components,o=(t.options.sliders||"v").repeat(2),[n,i]=o.match(/^[vh]+$/g)?o:[],r=()=>this._color||(this._color=this._lastColor.clone()),s={palette:$({element:t._root.palette.picker,wrapper:t._root.palette.palette,onstop:()=>t._emit("changestop","slider",t),onchange(o,n){if(!e.palette)return;const i=r(),{_root:s,options:a}=t,{lastColor:l,currentColor:c}=s.preview;t._recalc&&(i.s=100*o,i.v=100-100*n,i.v<0&&(i.v=0),t._updateOutput("slider"));const p=i.toRGBA().toString(0);this.element.style.background=p,this.wrapper.style.background=`\\n                        linear-gradient(to top, rgba(0, 0, 0, ${i.a}), transparent),\\n                        linear-gradient(to left, hsla(${i.h}, 100%, 50%, ${i.a}), rgba(255, 255, 255, ${i.a}))\\n                    `,a.comparison?a.useAsButton||t._lastColor||(l.style.color=p):(s.button.style.color=p,s.button.classList.remove("clear"));const u=i.toHEXA().toString();for(const{el:e,color:o}of t._swatchColors)e.classList[u===o.toHEXA().toString()?"add":"remove"]("pcr-active");c.style.color=p}}),hue:$({lock:"v"===i?"h":"v",element:t._root.hue.picker,wrapper:t._root.hue.slider,onstop:()=>t._emit("changestop","slider",t),onchange(o){if(!e.hue||!e.palette)return;const n=r();t._recalc&&(n.h=360*o),this.element.style.backgroundColor=`hsl(${n.h}, 100%, 50%)`,s.palette.trigger()}}),opacity:$({lock:"v"===n?"h":"v",element:t._root.opacity.picker,wrapper:t._root.opacity.slider,onstop:()=>t._emit("changestop","slider",t),onchange(o){if(!e.opacity||!e.palette)return;const n=r();t._recalc&&(n.a=Math.round(100*o)/100),this.element.style.background=`rgba(0, 0, 0, ${n.a})`,s.palette.trigger()}}),selectable:S({elements:t._root.interaction.options,className:"active",onchange(e){t._representation=e.target.getAttribute("data-type").toUpperCase(),t._recalc&&t._updateOutput("swatch")}})};this._components=s}_bindEvents(){const{_root:t,options:e}=this,o=[r(t.interaction.clear,"click",()=>this._clearColor()),r([t.interaction.cancel,t.preview.lastColor],"click",()=>{this._emit("cancel"),this.setHSVA(...(this._lastColor||this._color).toHSVA(),!0)}),r(t.interaction.save,"click",()=>{!this.applyColor()&&!e.showAlways&&this.hide()}),r(t.interaction.result,["keyup","input"],t=>{this.setColor(t.target.value,!0)&&!this._initializingActive&&(this._emit("change",this._color,"input",this),this._emit("changestop","input",this)),t.stopImmediatePropagation()}),r(t.interaction.result,["focus","blur"],t=>{this._recalc="blur"===t.type,this._recalc&&this._updateOutput(null)}),r([t.palette.palette,t.palette.picker,t.hue.slider,t.hue.picker,t.opacity.slider,t.opacity.picker],["mousedown","touchstart"],()=>this._recalc=!0,{passive:!0})];if(!e.showAlways){const n=e.closeWithKey;o.push(r(t.button,"click",()=>this.isOpen()?this.hide():this.show()),r(document,"keyup",t=>this.isOpen()&&(t.key===n||t.code===n)&&this.hide()),r(document,["touchstart","mousedown"],e=>{this.isOpen()&&!c(e).some(e=>e===t.app||e===t.button)&&this.hide()},{capture:!0}))}if(e.adjustableNumbers){const e={rgba:[255,255,255,1],hsva:[360,100,100,1],hsla:[360,100,100,1],cmyk:[100,100,100,100]};u(t.interaction.result,(t,o,n)=>{const i=e[this.getColorRepresentation().toLowerCase()];if(i){const e=i[n],r=t+(e>=100?1e3*o:o);return r<=0?0:Number((r<e?r:e).toPrecision(3))}return t})}if(e.autoReposition&&!e.inline){let t=null;const n=this;o.push(r(window,["scroll","resize"],()=>{n.isOpen()&&(e.closeOnScroll&&n.hide(),null===t?(t=setTimeout(()=>t=null,100),requestAnimationFrame((function e(){n._rePositioningPicker(),null!==t&&requestAnimationFrame(e)}))):(clearTimeout(t),t=setTimeout(()=>t=null,100)))},{capture:!0}))}this._eventBindings=o}_rePositioningPicker(){const{options:t}=this;if(!t.inline){if(!this._nanopop.update({container:document.body.getBoundingClientRect(),position:t.position})){const t=this._root.app,e=t.getBoundingClientRect();t.style.top=(window.innerHeight-e.height)/2+"px",t.style.left=(window.innerWidth-e.width)/2+"px"}}}_updateOutput(t){const{_root:e,_color:o,options:n}=this;if(e.interaction.type()){const t="to"+e.interaction.type().getAttribute("data-type");e.interaction.result.value="function"==typeof o[t]?o[t]().toString(n.outputPrecision):""}!this._initializingActive&&this._recalc&&this._emit("change",o,t,this)}_clearColor(t=!1){const{_root:e,options:o}=this;o.useAsButton||(e.button.style.color="rgba(0, 0, 0, 0.15)"),e.button.classList.add("clear"),o.showAlways||this.hide(),this._lastColor=null,this._initializingActive||t||(this._emit("save",null),this._emit("clear"))}_parseLocalColor(t){const{values:e,type:o,a:n}=A(t),{lockOpacity:i}=this.options,r=void 0!==n&&1!==n;return e&&3===e.length&&(e[3]=void 0),{values:!e||i&&r?null:e,type:o}}_t(t){return this.options.i18n[t]||x.I18N_DEFAULTS[t]}_emit(t,...e){this._eventListener[t].forEach(t=>t(...e,this))}on(t,e){return this._eventListener[t].push(e),this}off(t,e){const o=this._eventListener[t]||[],n=o.indexOf(e);return~n&&o.splice(n,1),this}addSwatch(t){const{values:e}=this._parseLocalColor(t);if(e){const{_swatchColors:t,_root:o}=this,n=C(...e),i=a(`<button type="button" style="color: ${n.toRGBA().toString(0)}" aria-label="${this._t("btn:swatch")}"/>`);return o.swatches.appendChild(i),t.push({el:i,color:n}),this._eventBindings.push(r(i,"click",()=>{this.setHSVA(...n.toHSVA(),!0),this._emit("swatchselect",n),this._emit("change",n,"swatch",this)})),!0}return!1}removeSwatch(t){const e=this._swatchColors[t];if(e){const{el:o}=e;return this._root.swatches.removeChild(o),this._swatchColors.splice(t,1),!0}return!1}applyColor(t=!1){const{preview:e,button:o}=this._root,n=this._color.toRGBA().toString(0);return e.lastColor.style.color=n,this.options.useAsButton||(o.style.color=n),o.classList.remove("clear"),this._lastColor=this._color.clone(),this._initializingActive||t||this._emit("save",this._color),this}destroy(){cancelAnimationFrame(this._setupAnimationFrame),this._eventBindings.forEach(t=>s(...t)),Object.keys(this._components).forEach(t=>this._components[t].destroy())}destroyAndRemove(){this.destroy();const{root:t,app:e}=this._root;t.parentElement&&t.parentElement.removeChild(t),e.parentElement.removeChild(e),Object.keys(this).forEach(t=>this[t]=null)}hide(){return this._root.app.classList.remove("visible"),this._emit("hide"),this}show(){return this.options.disabled||(this._root.app.classList.add("visible"),this._rePositioningPicker(),this._emit("show",this._color)),this}isOpen(){return this._root.app.classList.contains("visible")}setHSVA(t=360,e=0,o=0,n=1,i=!1){const r=this._recalc;if(this._recalc=!1,t<0||t>360||e<0||e>100||o<0||o>100||n<0||n>1)return!1;this._color=C(t,e,o,n);const{hue:s,opacity:a,palette:l}=this._components;return s.update(t/360),a.update(n),l.update(e/100,1-o/100),i||this.applyColor(),r&&this._updateOutput(),this._recalc=r,!0}setColor(t,e=!1){if(null===t)return this._clearColor(e),!0;const{values:o,type:n}=this._parseLocalColor(t);if(o){const t=n.toUpperCase(),{options:i}=this._root.interaction,r=i.find(e=>e.getAttribute("data-type")===t);if(r&&!r.hidden)for(const t of i)t.classList[t===r?"add":"remove"]("active");return!!this.setHSVA(...o,e)&&this.setColorRepresentation(t)}return!1}setColorRepresentation(t){return t=t.toUpperCase(),!!this._root.interaction.options.find(e=>e.getAttribute("data-type").startsWith(t)&&!e.click())}getColorRepresentation(){return this._representation}getColor(){return this._color}getSelectedColor(){return this._lastColor}getRoot(){return this._root}disable(){return this.hide(),this.options.disabled=!0,this._root.button.classList.add("disabled"),this}enable(){return this.options.disabled=!1,this._root.button.classList.remove("disabled"),this}}L(x,"utils",n),L(x,"version","1.8.0"),L(x,"I18N_DEFAULTS",{"ui:dialog":"color picker dialog","btn:toggle":"toggle color picker dialog","btn:swatch":"color swatch","btn:last-color":"use previous color","btn:save":"Save","btn:cancel":"Cancel","btn:clear":"Clear","aria:btn:save":"save and close","aria:btn:cancel":"cancel and close","aria:btn:clear":"clear and close","aria:input":"color input field","aria:palette":"color selection area","aria:hue":"hue selection slider","aria:opacity":"selection slider"}),L(x,"DEFAULT_OPTIONS",{appClass:null,theme:"classic",useAsButton:!1,padding:8,disabled:!1,comparison:!0,closeOnScroll:!1,outputPrecision:0,lockOpacity:!1,autoReposition:!0,container:"body",components:{interaction:{}},i18n:{},swatches:null,inline:!1,sliders:null,default:"#42445a",defaultRepresentation:null,position:"bottom-middle",adjustableNumbers:!0,showAlways:!1,closeWithKey:"Escape"}),L(x,"create",t=>new x(t));e.default=x}]).default}));\n//# sourceMappingURL=pickr.min.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../node_modules/@simonwep/pickr/dist/pickr.min.js\n')},"../CoCreate-attributes/src/common.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.parseClassRules = parseClassRules;\nexports.getCoCreateStyle = getCoCreateStyle;\nexports.setStyleClassIfDif = setStyleClassIfDif;\nexports.setAttributeIfDif = setAttributeIfDif;\nexports.setStyleIfDif = setStyleIfDif;\nexports.removeAllSelectedOptions = removeAllSelectedOptions;\nexports.renderOptions = renderOptions;\nexports.parseCssRules = parseCssRules;\nexports.rgba2hex = rgba2hex;\nexports.parseUnit = parseUnit;\nexports.toCamelCase = toCamelCase;\nexports.elStore = elStore;\n\nvar _select = _interopRequireDefault(__webpack_require__(/*! @cocreate/select */ "../CoCreate-select/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global CoCreate*/\nfunction parseClassRules(str) {\n  return str.split(\' \').filter(cln => cln);\n}\n\nfunction getCoCreateStyle(classList) {\n  let styles = {};\n  classList.forEach(classname => {\n    let [name, value] = classname.split(":");\n    styles[toCamelCase(name)] = value;\n  });\n  return styles;\n}\n\nfunction setStyleClassIfDif(element, {\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  let classList = element.classList;\n  let styleList = new Map();\n  classList.forEach(classname => {\n    let [name, value] = classname.split(":");\n    value && styleList.set(name, value);\n  });\n  let elValue = styleList.get(property);\n\n  if (value) {\n    if (elValue) {\n      if (elValue != value) return classList.replace(`${property}:${elValue}`, `${property}:${value}`);\n    } else if (computedStyles[camelProperty] != value && !classList.contains(`${property}:${value}`)) {\n      classList.add(`${property}:${value}`);\n      return true;\n    }\n  } else {\n    if (classList.contains(`${property}:${elValue}`)) {\n      classList.remove(`${property}:${elValue}`);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction setAttributeIfDif(property, value) {\n  if (this.getAttribute(property) !== value) {\n    if (value) this.setAttribute(property, value);else this.removeAttribute(property);\n    return true;\n  }\n\n  return false;\n}\n\nfunction setStyleIfDif({\n  property,\n  camelProperty,\n  value,\n  computedStyles\n}) {\n  if (computedStyles[camelProperty] && computedStyles[camelProperty] !== value) {\n    this.style[property] = value;\n    return true;\n  } else return false;\n} // CoCreate Select helper\n// export function getAllSelectedOptions() {\n//     let options = this.querySelectorAll(":scope > [selected]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\n\nfunction removeAllSelectedOptions() {\n  let options = this.querySelectorAll(":scope > [selected]");\n  return Array.from(options).forEach(o => o.remove());\n}\n\n; // export function getAllOptions() {\n//     let options = this.querySelectorAll(":scope > ul > [value]");\n//     return Array.from(options).map((o) => o.getAttribute("value"));\n// };\n\nfunction renderOptions(input, arrValue) {\n  if (arrValue && arrValue.length) _select.default.renderValue(input, arrValue);else removeAllSelectedOptions.call(input);\n} // CoCreate Select helper end  \n\n\nfunction parseCssRules(str) {\n  let styleObject = {};\n  if (str.split) str.split(";").forEach(rule => {\n    let ruleSplit = rule.split(":");\n    let key = ruleSplit.shift().trim();\n    let value = ruleSplit.join().trim();\n    if (key) styleObject[key] = value;\n  });\n  return styleObject;\n}\n\nfunction rgba2hex(orig) {\n  let a,\n      isPercent,\n      rgb = orig.replace(/\\s/g, \'\').match(/^rgba?\\((\\d+),(\\d+),(\\d+),?([^,\\s)]+)?/i),\n      alpha = (rgb && rgb[4] || "").trim(),\n      hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : orig;\n\n  if (alpha !== "") {\n    a = alpha;\n  } else {\n    a = 1;\n  } // multiply before convert to HEX\n\n\n  a = (a * 255 | 1 << 8).toString(16).slice(1);\n  hex = hex + a;\n  return hex;\n}\n\nfunction parseUnit(style) {\n  let value = parseFloat(style);\n  if (isNaN(value)) return [style, \'\'];else {\n    let valueLength = (value + "").length;\n    return [value, style.substr(valueLength)];\n  }\n}\n\nfunction toCamelCase(str) {\n  let index = 0;\n\n  do {\n    index = str.indexOf("-", index);\n\n    if (index !== -1) {\n      let t = str.substring(0, index);\n      t += String.fromCharCode(str.charCodeAt(index + 1) - 32);\n      t += str.substr(index + 2);\n      str = t;\n    } else break;\n  } while (true);\n\n  return str;\n} // export function setCCStyle({ property, camelProperty, value, computedStyles }) {\n//     let hasChanged = false;\n//     if (computedStyles[camelProperty]  && computedStyles[camelProperty] !== value) {\n//         for (let classname of this.classList) {\n//             let [name, styleValue] = classname.split(":");\n//             if (name === property && styleValue) {\n//                 if (value)\n//                     this.classList.replace(classname, property + ":" + value);\n//                 else\n//                     this.classList.remove(classname)\n//                 hasChanged = true;\n//                 break;\n//             }\n//         }\n//         if (!hasChanged)\n//             this.classList.add(property + ":" + value);\n//         return true;\n//     } else\n//         return false;\n// }\n\n\nfunction elStore() {\n  this.cache = new Map();\n\n  this.spread = function set(key, object) {\n    this.cache.set(key, { ...this.cache.get(key),\n      ...object\n    });\n  };\n\n  this.set = function set(key, property, value) {\n    this.cache.set(key, { ...this.cache.get(key),\n      [property]: value\n    });\n  };\n\n  this.get = function get(key, property) {\n    let value = this.cache.get(key);\n    return value ? value[property] : undefined;\n  };\n\n  this.reset = function reset(key) {\n    this.cache.delete(key);\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-attributes/src/common.js\n')},"../CoCreate-attributes/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _common = __webpack_require__(/*! ./common.js */ \"../CoCreate-attributes/src/common.js\");\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _crdt = _interopRequireDefault(__webpack_require__(/*! @cocreate/crdt */ \"../CoCreate-crdt/src/index.js\"));\n\nvar _pickr = _interopRequireDefault(__webpack_require__(/*! @cocreate/pickr */ \"../../CoCreate-plugins/CoCreate-pickr/src/index.js\"));\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! @cocreate/message */ \"../CoCreate-message/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global CoCreate*/\n// // dev start\n// import '@cocreate/select'\n// import selected from '@cocreate/selected'\n// import domToText from '@cocreate/domToText'\n// selected.config({\n//     srcDocument: document,\n//     destDocument: document,\n//     selector: \"#container *\",\n//     target: \"[data-attributes]:not(.styleunit)\",\n//     callback: (element, target) => {\n//         target.setAttribute('data-attributes_target', `[data-element_id=${element.getAttribute('data-element_id')}]`);\n//         target.setAttribute('name', target.id + '-' + element.getAttribute('data-element_id'))\n//     }\n// });\n// //profile observer\n// let profile = []\n// function profileObserver(mutation, extra = {}) {\n//     // get time\n//     let date = new Date();\n//     let time = date.getSeconds() + '.' + date.getMilliseconds()\n//     profile.push({ time, ...extra, ...mutation })\n// }\n// // dev end\nlet cache = new _common.elStore();\nlet types = ['attribute', 'classstyle', 'style', 'innerText'];\n\nfunction attributes({\n  document: initDocument,\n  exclude = \"\",\n  callback = () => {}\n}) {\n  this.exclude = exclude;\n  this.callback = callback;\n  this.initDocument = initDocument;\n}\n\nattributes.prototype.init = function init() {\n  this.scanNewElement(); // this.initDocument.defaultView.CoCreate.observer.init({\n\n  _observer.default.init({\n    name: \"ccAttribute\",\n    observe: [\"attributes\"],\n    attributes: [\"data-attributes_target\", \"value\", \"data-attributes_unit\"],\n    include: \"INPUT, .pickr, cocreate-select\",\n    callback: async m => await this.watchInputChange(m)\n  });\n\n  this.initDocument.addEventListener(\"input\", async e => {\n    let input = e.target; // input.tagName == \"COCREATE-SELECT\" && \n\n    this.perInput(input, (inputMeta, element) => this.updateElement({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  }); // observer elements change to reflect inputs (data-units)\n\n  this.observerElements(this.initDocument.defaultView);\n\n  _message.default.listen(\"ccStyle\", args => this.listen(args));\n};\n\nattributes.prototype.listen = async function listen({\n  value,\n  unit,\n  type,\n  property,\n  camelProperty,\n  elementId,\n  elementSelector\n}) {\n  let selector = property ? `[data-attributes=${type}][data-attributes_property=${property}]:not(${this.exclude})` : `[data-attributes=${type}]:not(${this.exclude})`;\n  let input = this.initDocument.querySelector(selector); // if (selector.indexOf(';') !== -1)\n  // let element\n\n  let element = await this.complexSelector(elementSelector, (canvasDoc, selector) => canvasDoc.querySelector(selector)); // else\n  //     element = this.initDocument.querySelector(elementSelector)\n\n  this.updateElement({\n    type,\n    property,\n    camelProperty,\n    input,\n    element,\n    collValue: value,\n    unit,\n    isColl: false\n  });\n};\n\nattributes.prototype.collaborate = function collaborate({\n  element,\n  ...rest\n}) {\n  // if (value != input.value) return;\n  let elementId = element.getAttribute('data-element_id');\n  if (!elementId) return console.warn('no element id, collaboration skiped');\n  let elementSelector = rest.input.getAttribute('data-attributes_target');\n\n  _message.default.send({\n    broadcast_sender: false,\n    rooms: \"\",\n    emit: {\n      message: \"ccStyle\",\n      data: { ...rest,\n        elementId,\n        elementSelector\n      }\n    }\n  });\n};\n\nattributes.prototype.scanNewElement = function scanNewElement() {\n  this.initDocument.querySelectorAll(`[data-attributes]:not(${this.exclude})`).forEach(async input => {\n    this.perInput(input, (inputMeta, element) => this.updateInput({ ...inputMeta,\n      input,\n      element,\n      isColl: true\n    }));\n  });\n};\n\nattributes.prototype.observerElements = function observerElements(initWindow) {\n  // initWindow.CoCreate.observer.init({\n  // let observer = initWindow.CoCreate.observer ?\n  _observer.default.init({\n    name: 'ccAttribute',\n    observe: [\"attributes\", \"characterData\"],\n    callback: mutation => {\n      let element = mutation.target;\n      if (!element) return;\n      this.getInputFromElement(mutation.target).forEach(input => {\n        let inputMeta = this.validateInput(input);\n        if (!inputMeta) return;\n        this.updateInput({ ...inputMeta,\n          input,\n          element\n        });\n      });\n    }\n  });\n}; //convention based (all elements should use data-elememet_id and it's faster)\n// made it also support \"id\"\n\n\nattributes.prototype.getInputFromElement = function getInputFromElement(element) {\n  let elId = element.getAttribute('data-element_id') || element.id && `\"#${element.id}\"`;\n  if (elId) return this.initDocument.querySelectorAll(`[data-attributes_target=${elId}]`);\n  return [];\n}; // todo: discuss with\n// attributes.prototype.getInputFromElement = function getInputFromElement(element) {\n//     // let inputs = [];\n//     //todo: fix add textarea\n//     let elId = element.getAttribute('data-element_id');\n//     if(elId)\n//      this.initDocument.querySelectorAll(`[data-attributes_target]`).forEach\n// }\n\n\nattributes.prototype.watchInputChange = async function watchInputChange(mutation) {\n  try {\n    // return;\n    let element,\n        input = mutation.target;\n    let inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n\n    if (mutation.attributeName === \"data-attributes_target\") {\n      // if (element) \n      this.updateInput({ ...inputMeta,\n        input,\n        element\n      }); // element.isFirst = element.isFirst === true ? false : true;\n    } else if (mutation.attributeName === \"data-attributes_unit\") {\n      // if (element.isFirst) return;\n      this.updateElement({ ...inputMeta,\n        input,\n        element,\n        isColl: true\n      });\n    }\n  } catch (err) {}\n};\n\nattributes.prototype.perInput = async function perInput(input, callback) {\n  try {\n    let inputMeta, element;\n    inputMeta = this.validateInput(input);\n    element = inputMeta && (await this.getElementFromInput(input));\n    if (!element) return;\n    callback(inputMeta, element);\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nattributes.prototype.validateInput = function validateInput(input) {\n  let type = input.getAttribute(\"data-attributes\");\n\n  if (!type) {\n    // console.warn(\"cc-style: input doesn't have data-attributes\")\n    return;\n  }\n\n  type = type.toLowerCase();\n  let camelProperty,\n      property = input.getAttribute(\"data-attributes_property\");\n\n  if (property) {\n    camelProperty = (0, _common.toCamelCase)(property);\n    property = property.toLowerCase();\n  }\n\n  return {\n    type,\n    property,\n    camelProperty\n  };\n};\n\nattributes.prototype.updateElementByValue = function updateElementByValue({\n  type,\n  property,\n  camelProperty,\n  input,\n  element,\n  inputValue,\n  hasCollValue\n}) {\n  let computedStyles, value, removeValue, hasUpdated, unit, parsedInt;\n\n  switch (type) {\n    case 'classstyle':\n      parsedInt = parseInt(value);\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return (0, _common.setStyleClassIfDif)(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n\n    case 'style':\n      unit = input.getAttribute('data-attributes_unit') || '';\n      value = inputValue && !hasCollValue ? inputValue + unit : inputValue;\n      value = value || '';\n      computedStyles = this.getRealStaticCompStyle(element);\n      return _common.setStyleIfDif.call(element, {\n        property,\n        camelProperty,\n        value,\n        computedStyles\n      });\n\n    case 'innerText':\n      if (element.innerText != inputValue) {\n        element.innerText = inputValue;\n        return true;\n      } else return false;\n\n    default:\n      if (typeof inputValue == 'string') {\n        return _common.setAttributeIfDif.call(element, type, inputValue);\n      } else {\n        for (let inputSValue of inputValue) {\n          if (inputSValue.checked) {\n            // unconventional change\n            if (type === 'data-attributes_unit' && ['auto', 'inherit', 'initial'].includes(inputSValue.value)) {\n              element.value = inputSValue.value;\n\n              _common.removeAllSelectedOptions.call(input);\n            } else // unconventional change\n              return _common.setAttributeIfDif.call(element, type, inputSValue.value);\n          }\n        }\n      }\n\n      break;\n  }\n};\n\nattributes.prototype.removeZeros = function removeZeros(str) {\n  let i = 0;\n\n  for (let len = str.length; i < len; i++) {\n    if (str[i] !== '0') break;\n  }\n\n  return str.substr(i) || str && '0';\n};\n\nattributes.prototype.updateElement = function updateElement({\n  input,\n  element,\n  collValue,\n  isColl,\n  unit,\n  type,\n  property,\n  ...rest\n}) {\n  let inputValue = collValue != undefined ? collValue : this.getInputValue(input);\n\n  if (!Array.isArray(inputValue)) {\n    inputValue = unit && inputValue ? inputValue + unit : inputValue;\n    inputValue = this.removeZeros(inputValue);\n  } else inputValue.forEach(a => this.removeZeros(a.value));\n\n  let hasUpdated = this.updateElementByValue({ ...rest,\n    type,\n    property,\n    input,\n    element,\n    inputValue,\n    hasCollValue: collValue != undefined\n  });\n  cache.reset(element); // attribute is default when it's not attribute\n\n  hasUpdated && isColl && this.collaborate({\n    value: inputValue,\n    unit: input.getAttribute('data-attributes_unit'),\n    input,\n    element,\n    type,\n    property,\n    ...rest\n  });\n\n  if (!types.includes(type)) {\n    property = type;\n    type = 'attribute';\n  }\n\n  hasUpdated && isColl && this.callback({\n    value: Array.isArray(inputValue) ? inputValue[0].value : inputValue,\n    unit: input.getAttribute('data-attributes_unit'),\n    input,\n    element,\n    type,\n    property,\n    ...rest\n  }); // not needed since crdt\n  // when function called on collboration\n  // todo: use setInputValue directly in updateElementByValue\n  // if (newValue) {\n  //     updateInput({...rest, element, input, })\n  // }\n};\n\nattributes.prototype.updateInput = function updateInput({\n  type,\n  property,\n  camelProperty,\n  element,\n  input\n}) {\n  let computedStyles, value, value2, styleValue, unit;\n  if (!input) return console.error('CoCreate Attributes: input not found/dev');\n\n  switch (type) {\n    case 'classstyle':\n      let ccStyle = (0, _common.getCoCreateStyle)(element.classList);\n      if (ccStyle[camelProperty]) value2 = ccStyle[camelProperty];else {\n        computedStyles = this.getRealStaticCompStyle(element);\n        value2 = computedStyles[camelProperty];\n      }\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n      break;\n\n    case 'style':\n      computedStyles = this.getRealStaticCompStyle(element);\n      value2 = computedStyles[camelProperty];\n\n      if (!value2) {\n        return console.warn(`\"${property}\" can not be found in style object`);\n      }\n\n      [styleValue, unit] = (0, _common.parseUnit)(value2);\n      value = styleValue;\n\n      _common.setAttributeIfDif.call(input, \"data-attributes_unit\", unit);\n\n    case 'innerText':\n      value = element.innerText;\n      break;\n\n    default:\n      value = element.getAttribute(type);\n      break;\n  }\n\n  this.setInputValue(input, value != undefined ? value : '');\n};\n\nattributes.prototype.setInputValue = function setInputValue(input, value) {\n  // console.log(input.getAttribute('name'))\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    // case 'input':\n    //     switch (input.type) {\n    //         case 'checkbox':\n    //         case 'radio':\n    //             input.checked = value == input.value ? true : false;\n    //             break;\n    //         default:\n    //             input.value = value;\n    //     }\n    //     break;\n    // case \"textarea\":\n    //     input.value = value;\n    //     break;\n    case 'select':\n      let options = Array.from(input.options);\n      options.forEach(option => {\n        if (value == option.value) input.selectedIndex = options.indexOf(option);\n      });\n      break;\n\n    case 'cocreate-select':\n      (0, _common.renderOptions)(input, value);\n      break;\n\n    case 'pickr':\n      // todo: how to perform validation\n      let pickrIns = _pickr.default.refs.get(input);\n\n      _pickr.default.disabledEvent = true;\n      pickrIns.setColor(value); // todo: style or value\n\n      _pickr.default.disabledEvent = false;\n\n    default:\n      _crdt.default.replaceText({\n        collection: 'aaaaa',\n        document_id: 'null',\n        name: input.getAttribute('name'),\n        value: value + '',\n        position: '0'\n      });\n\n    // console.warn('CoCreateStyle: unidentified input: ', inputType, 'input ', input)\n  }\n};\n\nattributes.prototype.packMultiValue = function packMultiValue({\n  inputs,\n  stateProperty,\n  valueProperty = \"value\",\n  forceState\n}) {\n  let value = [];\n  Array.from(inputs).forEach(input => {\n    value.push({\n      checked: forceState || input[stateProperty],\n      value: input[valueProperty] || input.getAttribute(valueProperty)\n    });\n  });\n  return value;\n};\n\nattributes.prototype.getInputValue = function getInputValue(input) {\n  if (!input) return;\n  let inputType = input.tagName.toLowerCase() || input.classList.has('.pickr') && 'pickr';\n\n  switch (inputType) {\n    case 'input':\n      switch (input.type) {\n        case 'checkbox':\n        case 'radio':\n          return this.packMultiValue({\n            inputs: this.initDocument.getElementsByName(input.name),\n            stateProperty: 'checked'\n          });\n\n        default:\n          return input.value;\n      }\n\n    case \"textarea\":\n      return input.value;\n\n    case 'select':\n      return this.packMultiValue({\n        inputs: input.options,\n        stateProperty: 'selected'\n      });\n\n    case 'cocreate-select':\n      return this.packMultiValue({\n        inputs: input.querySelectorAll(\":scope > [selected]\"),\n        forceState: true\n      });\n\n    case 'pickr':\n      // todo: how to perform validation\n      // if (!CoCreate.pickr.refs.has(input)) return; \n      let pickrIns = _pickr.default.refs.get(input);\n\n      return pickrIns ? pickrIns.getColor().toHEXA().toString() : '';\n\n    default:\n      console.warn('CoCreateStyle: unidentified input');\n      break;\n  }\n};\n\nattributes.prototype.getElementFromInput = async function getElementFromInput(input) {\n  let id = input.getAttribute(\"data-attributes_target\");\n\n  if (id) {\n    if (id.indexOf(';') !== -1) {\n      let el = await this.complexSelector(id, (canvasDoc, selector) => canvasDoc.querySelector(selector));\n      return el;\n    } else return this.initDocument.querySelector(id);\n  } else return false;\n};\n\nattributes.prototype.getRealStaticCompStyle = function getRealStaticCompStyle(element) {\n  if (cache.get(element, 'valid')) return cache.get(element, 'computedStyles');\n  setTimeout(() => {\n    cache.reset(element);\n  }, 5000);\n  let oldDispaly = element.style.display;\n  element.style.display = \"none\";\n  let computedStylesLive = window.getComputedStyle(element);\n  let computedStyles = Object.assign({}, computedStylesLive);\n  computedStyles.display = oldDispaly;\n  element.style.display = oldDispaly;\n  if (element.getAttribute(\"style\") == \"\") element.removeAttribute(\"style\");\n  element.removeAttribute('no-observe');\n  cache.spread(element, {\n    computedStyles,\n    valid: true\n  });\n  return computedStyles;\n};\n\nattributes.prototype.complexSelector = async function complexSelector(comSelector, callback) {\n  let [canvasSelector, selector] = comSelector.split(';');\n  let canvas = document.querySelector(canvasSelector);\n\n  if (!canvas) {\n    console.warn('complex selector canvas now found for', comSelector);\n    return;\n  }\n\n  if (\n  /*!canvas.contentWindow.observedByCCAttributes &&*/\n  canvas.contentDocument.readyState === 'loading') {\n    try {\n      await new Promise((resolve, reject) => {\n        canvas.contentWindow.addEventListener('load', e => resolve());\n      });\n    } catch (err) {\n      console.error('iframe can not be loaded');\n    } // this.observerElements(canvas.contentWindow)\n    // canvas.contentWindow.observedByCCAttributes = true;\n\n  }\n\n  return callback(canvas.contentWindow.document, selector);\n}; // attributes.prototype.getInputs = function getInputs(element) {\n//     let inputs = [];\n//     let allInputs = Array.from(document.getElementsByTagName(\"input\"));\n//     allInputs.forEach((inputCandidate) => {\n//         let inputMeta = getInputMetaData(inputCandidate);\n//         if (!inputMeta) return;\n//         let allReferencedEl = allFrame((frame) =>\n//             frame.querySelectorAll(\n//                 inputMeta.input.getAttribute(\"data-attributes_target\")\n//             )\n//         );\n//         if (Array.from(allReferencedEl).includes(element)) {\n//             inputs.push(inputMeta.input);\n//         }\n//     });\n//     return inputs;\n// }\n//attributes.prototype.perInput =  async function perInput(input, callback) {\n//     let inputMeta, element, group = input.getAttribute(\"data-attributes_group\");\n//     if (group) {\n//         [inputMeta, element] = getInputsMetaData(input);\n//     } else {\n//         inputMeta = validateInput(input);\n//         element = await getElementFromInput(input);\n//     }\n//     if (!inputMeta || !element) return;\n//     if (Array.isArray(inputMeta))\n//         inputMeta.forEach(async(metas) => callback(metas, element))\n//     else\n//         callback(inputMeta, element)\n// }\n//attributes.prototype.getInputsMetaData =  function getInputsMetaData(input) {\n//     let list = [],\n//         inputs = [];\n//     let element = getElementFromInput(input)\n//     let realInputs = input.querySelectorAll(group);\n//     realInputs.forEach(inp => {\n//         \n//         inputs.push(inp)\n//         list.push(validateInput(inp))\n//     })\n//     groupEl.set(input, inputs);\n//     return [list, element];\n// }\n// window.addEventListener('load', () => {\n//     let attribute = new attributes({ document, exclude: '#ghostEffect,.vdom-item ',\n//       callback: ({\n//         value,\n//         type,\n//         property,\n//         element,\n//     }) => {\n//           if (document.contains(element))\n//         domToText.domToText({\n//           method: type == 'attribute' ? 'setAttribute' : type, \n//           property: property,\n//           target: element.getAttribute(\"data-element_id\"),\n//           tagName: element.tagName,\n//           value,\n//           ...crdtCon\n//         })\n//     },})\n//     attribute.init()\n// })\n// let s = new attributes({\n//     document,\n//     exclude: '#ghostEffect,.vdom-item ',\n//     callback: ({\n//         value,\n//         type,\n//         property,\n//         element,\n//     }) => {\n//           if (document.contains(element))\n//         domToText.domToText({\n//           method: type == 'attribute' ? 'setAttribute' : type, \n//           property: property,\n//           target: element.getAttribute(\"data-element_id\"),\n//           tagName: element.tagName,\n//           value,\n//           ...crdtCon\n//         })\n//     },\n// })\n// s.init();\n\n\nvar _default = {\n  init: params => {\n    let s = new attributes(params);\n    s.init();\n    return s;\n  }\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-attributes/src/index.js\n")},"../../CoCreate-plugins/CoCreate-pickr/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _pickr = _interopRequireDefault(__webpack_require__(/*! @simonwep/pickr */ \"../../node_modules/@simonwep/pickr/dist/pickr.min.js\"));\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Simple example, see optional options for more configuration.\nlet config = {\n  el: null,\n  // will be replaced in observer\n  theme: 'monolith',\n  // or 'monolith', or 'nano'\n  position: 'bottom-start',\n  defaultRepresentation: 'HEX',\n  inline: false,\n  comparison: true,\n  default: '#999999',\n  swatches: ['rgba(244, 67, 54, 1)', 'rgba(233, 30, 99, 0.95)', 'rgba(156, 39, 176, 0.9)', 'rgba(103, 58, 183, 0.85)', 'rgba(63, 81, 181, 0.8)', 'rgba(33, 150, 243, 0.75)', 'rgba(3, 169, 244, 0.7)', 'rgba(0, 188, 212, 0.7)', 'rgba(0, 150, 136, 0.75)', 'rgba(76, 175, 80, 0.8)', 'rgba(139, 195, 74, 0.85)', 'rgba(205, 220, 57, 0.9)', 'rgba(255, 235, 59, 0.95)', 'rgba(255, 193, 7, 1)'],\n  components: {\n    // Main components\n    preview: true,\n    opacity: true,\n    hue: true,\n    // Input / output Options\n    interaction: {\n      hex: true,\n      rgba: true,\n      hsla: true,\n      hsva: true,\n      cmyk: true,\n      input: true,\n      clear: false,\n      save: false\n    }\n  }\n};\n\nconst eventHandler = root => (instance, e, pickr) => {\n  //todofix: what is pickr.disabledEvent??\n  if (instance && !CoCreate.pickr.disabledEvent) {\n    let event = new CustomEvent(\"input\", {\n      bubbles: true,\n      detail: {\n        color: instance.toHEXA().toString()\n      }\n    });\n    pickr.setColor(instance.toHEXA().toString());\n    root.dispatchEvent(event);\n  }\n};\n\nlet refs = new Map();\nconst CoCreatePickr = {\n  refs\n};\n\n_observer.default.init({\n  name: \"pickr\",\n  observe: [\"childList\"],\n  include: \".color-picker\",\n  callback: mutation => {\n    // let colorPickers = mutation.target.querySelectorAll('.color-picker');\n    // if (colorPickers.length)\n    //     colorPickers.forEach(p => createPickr(p))\n    createPickr(mutation.target);\n  }\n});\n\nwindow.addEventListener('load', () => {\n  let colorPickers = document.querySelectorAll('.color-picker');\n  if (colorPickers.length) colorPickers.forEach(p => createPickr(p));\n});\n\nfunction createPickr(p) {\n  // pick attributes\n  let ccAttributes = Array.from(p.attributes).filter(att => att.name.startsWith('data-style')); // if not for cocreate\n\n  if (!ccAttributes.length) return; // set element\n\n  config.el = p; // init and get root\n\n  let pickr = _pickr.default.create(config);\n\n  let root = pickr.getRoot().root; // write attributes\n\n  ccAttributes.forEach(att => {\n    root.setAttribute(att.name, att.value);\n  }); //set ref\n\n  refs.set(root, pickr); //set events\n  // pickr.on('save', eventHandler(root))\n\n  pickr.on('change', eventHandler(root));\n}\n\nvar _default = CoCreatePickr;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-plugins/CoCreate-pickr/src/index.js\n")}}]);