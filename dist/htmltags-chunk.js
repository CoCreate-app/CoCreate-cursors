/*! For license information please see htmltags-chunk.js.LICENSE.txt */
(this.webpackChunkCoCreate_cursors=this.webpackChunkCoCreate_cursors||[]).push([["htmltags-chunk"],{"../CoCreate-htmltags/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _observer = _interopRequireDefault(__webpack_require__(/*! @cocreate/observer */ \"../CoCreate-observer/src/index.js\"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! @cocreate/utils */ \"../CoCreate-utils/src/index.js\"));\n\nvar _crudClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud-client */ \"../CoCreate-crud-client/src/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateHtmlTags = {\n  selector: \"h1, h2, h3, h4, h5, h6, p, i, q, a, b, li, span, code, head, div, div.domEditor, iframe, body, img, html\",\n  init: function () {\n    this.__initAttribute();\n\n    this.__initSocket();\n\n    this.__initEvents();\n\n    this.initElement(document);\n  },\n  initElement: function (element) {\n    // if (!element || !element.getAttribute) {\n    // \treturn;\n    // }\n    const requests = this.__getReqeust(element);\n\n    if (requests && requests.length > 0) {\n      requests.forEach(req => {\n        _crudClient.default.readDocument({\n          collection: req['collection'],\n          document_id: req['document_id'],\n          metadata: req['metadata']\n        });\n      });\n    }\n  },\n  saveContent: function (el) {\n    const collection = el.getAttribute('data-collection');\n    const document_id = el.getAttribute('data-document_id');\n    const name = el.getAttribute('name');\n    let save_value = '';\n\n    if (el.tagName === 'IFRAME') {\n      save_value = el.srcdoc;\n    } else {\n      save_value = el.innerHTML;\n    }\n\n    _crudClient.default.updateDocument({\n      collection,\n      document_id,\n      upsert: true,\n      broadcast_sender: false,\n      data: {\n        [name]: save_value\n      },\n      broadcast: false\n    });\n  },\n  save: function (el, broadcast, broadcast_sender) {\n    if (typeof el == \"object\") {\n      const event = new CustomEvent('changed-element', {});\n      el.dispatchEvent(event);\n    }\n\n    if (!el.classList.contains('domEditor')) {\n      return;\n    } // if (utils.isRealTime(el) || isSubmit) {\n\n\n    const {\n      collection,\n      document_id,\n      name\n    } = _crudClient.default.getAttr(el);\n\n    let el_broadcast = el.getAttribute('data-broadcast') || \"true\";\n    let namespace = el.getAttribute('data-namespace') || '';\n    let room = el.getAttribute('data-room') || '';\n    el_broadcast = el_broadcast === \"true\" ? true : false;\n\n    if (!broadcast) {\n      broadcast = el_broadcast;\n    }\n\n    let save_value = '';\n\n    if (el.tagName === 'IFRAME') {\n      save_value = el.srcdoc;\n    } else {\n      save_value = el.innerHTML;\n    }\n\n    _crudClient.default.updateDocument({\n      namespace,\n      room,\n      collection,\n      document_id,\n      upsert: true,\n      broadcast_sender,\n      data: {\n        [name]: save_value\n      },\n      broadcast: broadcast\n    }); // }\n\n  },\n  render: function (data, isUpdate) {\n    const tags_selector = this.__addAttributeSelectorTags(this.selector);\n\n    let elements = document.querySelectorAll(tags_selector);\n    let isRendered = false;\n    let isRenderedIframe = false;\n    const self = this;\n\n    let encodeData = _crudClient.default.encodeObject(data.data);\n\n    elements.forEach(el => {\n      const {\n        collection,\n        document_id,\n        name\n      } = _crudClient.default.getAttr(el);\n\n      const {\n        is_read,\n        is_update\n      } = _crudClient.default.getFlagAttr(el);\n\n      const metadata = data['metadata'] || {};\n      const request_id = el.getAttribute('data-request_id');\n\n      if (!is_read) {\n        return;\n      }\n\n      if (isUpdate && !is_update) {\n        return;\n      }\n\n      if (request_id && data['metadata'] && data['metadata']['request_id'] !== request_id) {\n        return;\n      }\n\n      if (data['collection'] == collection && data['document_id'] == document_id && !el.isContentEditable) {\n        // const value = self.__getValueFromJonDeep(data.data, name)\n        const value = encodeData[name];\n        if (value === null || value === undefined) return;\n\n        if (el.tagName === 'IMG') {\n          el.src = value;\n        } else if (el.tagName === 'IFRAME') {\n          el.srcdoc = value;\n          let iframe = el;\n          isRenderedIframe = true;\n\n          el.onload = function (e) {\n            iframe.removeAttribute('srcdoc');\n          };\n        } else if (el.tagName === 'DIV') {\n          if (el.hasAttribute(\"value\")) {\n            el.setAttribute(\"value\", value);\n          }\n\n          if (el.classList.contains('domEditor')) {\n            if (el.getAttribute('data-domEditor') == \"replace\") {\n              let newElement = document.createElement(\"div\");\n              newElement.innerHTML = value;\n              let parentNode = el.parentNode;\n\n              if (parentNode) {\n                if (newElement.children[0]) {\n                  parentNode.replaceChild(newElement.children[0], el);\n                } else {\n                  parentNode.replaceChild(newElement, el);\n                }\n              }\n            } else {\n              el.innerHTML = value;\n            }\n          }\n        } else {\n          el.innerHTML = value;\n\n          if (el.hasAttribute(\"value\")) {\n            el.setAttribute(\"value\", value);\n          }\n        }\n\n        if (el.tagName == 'HEAD' || el.tagName == 'BODY') {\n          el.removeAttribute('data-collection');\n          el.removeAttribute('data-document_id');\n          el.removeAttribute('data-pass_id');\n          var scripts = el.querySelectorAll('script');\n\n          for (var k = 0; k < scripts.length; k++) {\n            var tmp = document.createElement('script');\n            tmp.type = \"text/javascript\";\n            var src = scripts[k].getAttribute('src');\n            var innerHtml = scripts[k].innerHTML;\n            if (innerHtml != \"\") tmp.innerHTML = innerHtml;\n            if (src) tmp.src = src;\n            el.appendChild(tmp);\n            scripts[k].remove();\n          }\n        }\n\n        isRendered = true;\n      }\n    });\n\n    if (isRendered) {\n      //. rendered event\n      const event = new CustomEvent('CoCreateHtmlTags-rendered', {\n        eventType: 'rendered',\n        detail: {\n          data: data\n        }\n      });\n      document.dispatchEvent(event);\n    }\n\n    if (isRenderedIframe) {\n      const iframeEvent = new CustomEvent('CoCreateHtmlTags-iframe-rendered', {\n        eventType: 'rendered',\n        detail: {\n          data: data\n        }\n      });\n      document.dispatchEvent(iframeEvent);\n    }\n  },\n  __getReqeust: function (container) {\n    let fetch_container = container || document;\n\n    if (!fetch_container.querySelectorAll) {\n      return;\n    }\n\n    const tags_selector = this.__addAttributeSelectorTags(this.selector);\n\n    let elements = fetch_container.querySelectorAll(tags_selector);\n    let requestData = [];\n\n    if (elements.length == 0 && fetch_container != document && fetch_container.hasAttribute('data-document_id')) {\n      elements = [fetch_container];\n    }\n\n    elements.forEach(el => {\n      if (_observer.default.getInitialized(el, \"htmltags\")) {\n        return;\n      }\n\n      const {\n        collection,\n        document_id\n      } = _crudClient.default.getAttr(el);\n\n      const readValue = _crudClient.default.isReadAttr(el);\n\n      const request_id = el.getAttribute('data-request_id');\n\n      if (readValue && _crudClient.default.checkValue(document_id) && request_id) {\n        _observer.default.setInitialized(el, \"htmltags\");\n\n        requestData.push({\n          collection: collection,\n          document_id: document_id,\n          metadata: {\n            request_id: request_id\n          }\n        });\n        return;\n      }\n\n      if (readValue && _crudClient.default.checkValue(document_id) && !requestData.some(d => d['collection'] === collection && d['document_id'] === document_id)) {\n        requestData.push({\n          collection,\n          document_id\n        });\n      }\n    });\n    return requestData;\n  },\n  __initAttribute: function (container) {\n    const mainContainer = container || document;\n\n    if (!mainContainer.querySelectorAll) {\n      return;\n    }\n\n    const tags_selector = this.__addAttributeSelectorTags(this.selector);\n\n    let elements = mainContainer.querySelectorAll(tags_selector);\n\n    if (elements.length == 0 && mainContainer != document && mainContainer.hasAttribute('data-document_id')) {\n      elements = [mainContainer];\n    }\n\n    elements.forEach(el => {\n      const {\n        collection,\n        document_id,\n        name\n      } = _crudClient.default.getAttr(el);\n\n      if (collection && document_id && name && el.getAttribute('data-realtime') == null) {\n        el.setAttribute('data-realtime', true);\n      }\n    });\n  },\n  __initSocket: function () {\n    const self = this;\n\n    _crudClient.default.listen('updateDocument', function (data) {\n      self.render(data, true);\n    });\n\n    _crudClient.default.listen('readDocument', function (data) {\n      self.render(data);\n    }); //  socket.listen('connect', function(data) {\n    // const requests = self.__getReqeust()\n    // if (requests && requests.length > 0) {\n    // \trequests.forEach((req) => {\n    // \t\tcrud.readDocument({\n    // \t\t\tcollection: req['collection'],\n    // \t\t\tdocument_id: req['document_id']\n    // \t\t})\n    // \t})\n    // }\n    //  })\n\n  },\n  __initEvents: function () {\n    const self = this;\n    document.addEventListener('change-content', function (event) {\n      const {\n        element,\n        broadcast,\n        broadcast_sender\n      } = event.detail;\n\n      if (!element) {\n        return;\n      }\n\n      const domEl = self.findElementByChild(element);\n\n      if (domEl) {\n        self.save(domEl, broadcast, broadcast_sender);\n      }\n    });\n  },\n  __addAttributeSelectorTags: function (str_tags) {\n    let tags = str_tags.trim().split(/\\s*,\\s*/).map(function (tag) {\n      return tag + \"[data-collection][data-document_id][name]\";\n    });\n    return tags.join(\", \");\n  },\n  findElementByChild: function (element) {\n    return _utils.default.getParentFromElement(element, 'domEditor');\n  },\n  __getValueFromJonDeep: function (json, path) {\n    try {\n      if (typeof json == 'undefined') return false;\n      let subpath = path.split('.');\n      let find = subpath.shift();\n\n      if (subpath.length > 0) {\n        return this.__getValueFromJonDeep(json[find], subpath.join('.'));\n      }\n\n      return json[find];\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n  }\n};\nCoCreateHtmlTags.init(); // CoCreateInit.register('CoCreateHtmlTags', CoCreateHtmlTags, CoCreateHtmlTags.initElement);\n\n_observer.default.init({\n  name: 'CoCreateHtmlTags',\n  observe: ['subtree', 'childList'],\n  include: '[data-collection][data-document_id][name]',\n  callback: function (mutation) {\n    CoCreateHtmlTags.initElement(mutation.target);\n  }\n}); // if (window.parent !== window) {\n//   console.log(\"dispatch htmlTags rendered\");\n//   window.addEventListener(\"load\", () => {\n//     window.parent.dispatchEvent(new Event(\"CoCreateHtmlTags-rendered\"));\n//   });\n// }\n\n\nconsole.log(\"dispatch htmlTags rendered\");\nif (window.document.readyState != 'complete') window.addEventListener(\"load\", () => {\n  window.parent.dispatchEvent(new Event(\"CoCreateHtmlTags-rendered\"));\n});else window.parent.dispatchEvent(new Event(\"CoCreateHtmlTags-rendered\"));\nvar _default = CoCreateHtmlTags;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-htmltags/src/index.js\n")}}]);